{
    "pipes": [],
    "interfaces": [
        {
            "name": "DefaultConfig",
            "id": "interface-DefaultConfig-60bb7f8c050e1d0482483a1fefc19055",
            "file": "projects/amsui/src/lib/search-service/search.types.ts",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { MatFormFieldAppearance } from '@angular/material/form-field';\n\nexport interface NamedIcon {\n  icon: string;\n  name: string;\n  description?: string;\n}\nexport interface ResultEntry {\n  title: string;\n  description: string;\n  id?: string;\n  avatarImgSrc?: string;\n  avatarIcon?: string;\n  subTitles?: NamedIcon[];\n  tags?: string[];\n  imageSrc?: string;\n  actions?: NamedIcon[];\n  avatarToolTip?: string;\n}\nexport interface ResultEntryActionEvent {\n  actionName: string;\n  entry: ResultEntry;\n}\nexport type ResultViewType = 'grid' | 'list';\nexport interface SearchResultMeta {\n  numFound: number;\n  timeTaken: number;\n  keyword: string;\n  numShowed: number;\n  didYouMeanValue?: string;\n}\nexport type FacetType = 'single' | 'multi';\nexport interface Facet {\n  name: string;\n  screenName: string;\n  entries: FacetEntry[];\n  options: FacetOptions;\n}\nexport interface FacetOptions {\n  facetType?: FacetType;\n  enableSearch?: boolean;\n  icon?: string;\n  showMoreBehaviour?: boolean;\n  showMoreThreshold?: number;\n  collapsed?: boolean;\n  hideNumbers?: boolean;\n  showMoreOpened?: boolean;\n  [key: string]: boolean | number | FacetType | string | undefined;\n}\nexport interface FacetEntry {\n  name: string;\n  numberOfResults: number;\n  viewName: string;\n  selected?: boolean;\n}\nexport interface SelectedFacet {\n  facetName: string;\n  facetEntryName: string;\n}\nexport interface SortingOption {\n  value: string;\n  viewValue: string;\n  default?: boolean;\n  fieldOfResults?: string;\n}\nexport interface SuggestionParameter {\n  keyword: string;\n  numberOfSuggestions: number;\n}\n\nexport interface DefaultConfig {\n  searchFieldConfig: SearchFieldConfig;\n  searchResultMeta: SearchResultMeta;\n  facetOptions: FacetOptions;\n  highlightingActivated: boolean;\n  numberOfSuggestions: number;\n  showMoreWordLimit: number;\n  resultViewConfig: ResultViewConfig;\n  noResultsConfig: NoResultsConfig;\n  metaViewConfig: MetaResultViewConfig;\n}\n\nexport interface VisualFacetState {\n  facetName: string;\n  showMoreOpened: boolean;\n  collapsed: boolean;\n}\nexport interface SearchFieldConfig {\n  value?: string;\n  formFieldAppearance?: MatFormFieldAppearance;\n  addQueryToURLParams?: boolean;\n  disableAutocomplete?: boolean;\n  asyncSuggestionDataProvider?: (\n    input: SuggestionParameter\n  ) => Observable<string[]>;\n}\n\nexport interface FilterTab {\n  name: string;\n  viewName: string;\n  icon: string;\n}\n\nexport interface NoResultsConfig {\n  searchKeyword: string;\n  didYouMeanValue: string;\n  alternativeKeywords: string[];\n  alternativeResults: ResultEntry[];\n  contactMailAddress?: string;\n  contactPhoneNumber?: string;\n}\n\nexport interface MetaResultViewConfig {\n  sortingOptions?: SortingOption[];\n  resultViewTypes?: ResultViewType[];\n  selectedResultViewType?: ResultViewType;\n}\nexport interface ResultViewConfig extends MetaResultViewConfig {\n  filterTabs?: FilterTab[];\n}\n",
            "properties": [
                {
                    "name": "facetOptions",
                    "type": "FacetOptions",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "highlightingActivated",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "metaViewConfig",
                    "type": "MetaResultViewConfig",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "noResultsConfig",
                    "type": "NoResultsConfig",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "numberOfSuggestions",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "resultViewConfig",
                    "type": "ResultViewConfig",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "searchFieldConfig",
                    "type": "SearchFieldConfig",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "searchResultMeta",
                    "type": "SearchResultMeta",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "showMoreWordLimit",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 78
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Facet",
            "id": "interface-Facet-60bb7f8c050e1d0482483a1fefc19055",
            "file": "projects/amsui/src/lib/search-service/search.types.ts",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { MatFormFieldAppearance } from '@angular/material/form-field';\n\nexport interface NamedIcon {\n  icon: string;\n  name: string;\n  description?: string;\n}\nexport interface ResultEntry {\n  title: string;\n  description: string;\n  id?: string;\n  avatarImgSrc?: string;\n  avatarIcon?: string;\n  subTitles?: NamedIcon[];\n  tags?: string[];\n  imageSrc?: string;\n  actions?: NamedIcon[];\n  avatarToolTip?: string;\n}\nexport interface ResultEntryActionEvent {\n  actionName: string;\n  entry: ResultEntry;\n}\nexport type ResultViewType = 'grid' | 'list';\nexport interface SearchResultMeta {\n  numFound: number;\n  timeTaken: number;\n  keyword: string;\n  numShowed: number;\n  didYouMeanValue?: string;\n}\nexport type FacetType = 'single' | 'multi';\nexport interface Facet {\n  name: string;\n  screenName: string;\n  entries: FacetEntry[];\n  options: FacetOptions;\n}\nexport interface FacetOptions {\n  facetType?: FacetType;\n  enableSearch?: boolean;\n  icon?: string;\n  showMoreBehaviour?: boolean;\n  showMoreThreshold?: number;\n  collapsed?: boolean;\n  hideNumbers?: boolean;\n  showMoreOpened?: boolean;\n  [key: string]: boolean | number | FacetType | string | undefined;\n}\nexport interface FacetEntry {\n  name: string;\n  numberOfResults: number;\n  viewName: string;\n  selected?: boolean;\n}\nexport interface SelectedFacet {\n  facetName: string;\n  facetEntryName: string;\n}\nexport interface SortingOption {\n  value: string;\n  viewValue: string;\n  default?: boolean;\n  fieldOfResults?: string;\n}\nexport interface SuggestionParameter {\n  keyword: string;\n  numberOfSuggestions: number;\n}\n\nexport interface DefaultConfig {\n  searchFieldConfig: SearchFieldConfig;\n  searchResultMeta: SearchResultMeta;\n  facetOptions: FacetOptions;\n  highlightingActivated: boolean;\n  numberOfSuggestions: number;\n  showMoreWordLimit: number;\n  resultViewConfig: ResultViewConfig;\n  noResultsConfig: NoResultsConfig;\n  metaViewConfig: MetaResultViewConfig;\n}\n\nexport interface VisualFacetState {\n  facetName: string;\n  showMoreOpened: boolean;\n  collapsed: boolean;\n}\nexport interface SearchFieldConfig {\n  value?: string;\n  formFieldAppearance?: MatFormFieldAppearance;\n  addQueryToURLParams?: boolean;\n  disableAutocomplete?: boolean;\n  asyncSuggestionDataProvider?: (\n    input: SuggestionParameter\n  ) => Observable<string[]>;\n}\n\nexport interface FilterTab {\n  name: string;\n  viewName: string;\n  icon: string;\n}\n\nexport interface NoResultsConfig {\n  searchKeyword: string;\n  didYouMeanValue: string;\n  alternativeKeywords: string[];\n  alternativeResults: ResultEntry[];\n  contactMailAddress?: string;\n  contactPhoneNumber?: string;\n}\n\nexport interface MetaResultViewConfig {\n  sortingOptions?: SortingOption[];\n  resultViewTypes?: ResultViewType[];\n  selectedResultViewType?: ResultViewType;\n}\nexport interface ResultViewConfig extends MetaResultViewConfig {\n  filterTabs?: FilterTab[];\n}\n",
            "properties": [
                {
                    "name": "entries",
                    "type": "FacetEntry[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "options",
                    "type": "FacetOptions",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "screenName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "FacetEntry",
            "id": "interface-FacetEntry-60bb7f8c050e1d0482483a1fefc19055",
            "file": "projects/amsui/src/lib/search-service/search.types.ts",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { MatFormFieldAppearance } from '@angular/material/form-field';\n\nexport interface NamedIcon {\n  icon: string;\n  name: string;\n  description?: string;\n}\nexport interface ResultEntry {\n  title: string;\n  description: string;\n  id?: string;\n  avatarImgSrc?: string;\n  avatarIcon?: string;\n  subTitles?: NamedIcon[];\n  tags?: string[];\n  imageSrc?: string;\n  actions?: NamedIcon[];\n  avatarToolTip?: string;\n}\nexport interface ResultEntryActionEvent {\n  actionName: string;\n  entry: ResultEntry;\n}\nexport type ResultViewType = 'grid' | 'list';\nexport interface SearchResultMeta {\n  numFound: number;\n  timeTaken: number;\n  keyword: string;\n  numShowed: number;\n  didYouMeanValue?: string;\n}\nexport type FacetType = 'single' | 'multi';\nexport interface Facet {\n  name: string;\n  screenName: string;\n  entries: FacetEntry[];\n  options: FacetOptions;\n}\nexport interface FacetOptions {\n  facetType?: FacetType;\n  enableSearch?: boolean;\n  icon?: string;\n  showMoreBehaviour?: boolean;\n  showMoreThreshold?: number;\n  collapsed?: boolean;\n  hideNumbers?: boolean;\n  showMoreOpened?: boolean;\n  [key: string]: boolean | number | FacetType | string | undefined;\n}\nexport interface FacetEntry {\n  name: string;\n  numberOfResults: number;\n  viewName: string;\n  selected?: boolean;\n}\nexport interface SelectedFacet {\n  facetName: string;\n  facetEntryName: string;\n}\nexport interface SortingOption {\n  value: string;\n  viewValue: string;\n  default?: boolean;\n  fieldOfResults?: string;\n}\nexport interface SuggestionParameter {\n  keyword: string;\n  numberOfSuggestions: number;\n}\n\nexport interface DefaultConfig {\n  searchFieldConfig: SearchFieldConfig;\n  searchResultMeta: SearchResultMeta;\n  facetOptions: FacetOptions;\n  highlightingActivated: boolean;\n  numberOfSuggestions: number;\n  showMoreWordLimit: number;\n  resultViewConfig: ResultViewConfig;\n  noResultsConfig: NoResultsConfig;\n  metaViewConfig: MetaResultViewConfig;\n}\n\nexport interface VisualFacetState {\n  facetName: string;\n  showMoreOpened: boolean;\n  collapsed: boolean;\n}\nexport interface SearchFieldConfig {\n  value?: string;\n  formFieldAppearance?: MatFormFieldAppearance;\n  addQueryToURLParams?: boolean;\n  disableAutocomplete?: boolean;\n  asyncSuggestionDataProvider?: (\n    input: SuggestionParameter\n  ) => Observable<string[]>;\n}\n\nexport interface FilterTab {\n  name: string;\n  viewName: string;\n  icon: string;\n}\n\nexport interface NoResultsConfig {\n  searchKeyword: string;\n  didYouMeanValue: string;\n  alternativeKeywords: string[];\n  alternativeResults: ResultEntry[];\n  contactMailAddress?: string;\n  contactPhoneNumber?: string;\n}\n\nexport interface MetaResultViewConfig {\n  sortingOptions?: SortingOption[];\n  resultViewTypes?: ResultViewType[];\n  selectedResultViewType?: ResultViewType;\n}\nexport interface ResultViewConfig extends MetaResultViewConfig {\n  filterTabs?: FilterTab[];\n}\n",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "numberOfResults",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "selected",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "viewName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "FacetGroupText",
            "id": "interface-FacetGroupText-70f446d668263625b0bc601b8e3c7443",
            "file": "projects/amsui/src/lib/text.types.ts",
            "type": "interface",
            "sourceCode": "export interface FacetGroupText {\n  noPossibleFilters?: string;\n  openAllFacets?: string;\n  closeAllFacets?: string;\n  resetFacetSelection?: string;\n  filterResults?: string;\n}\nexport interface FacetText {\n  showMore?: string;\n  showLess?: string;\n  noResults?: string;\n  filterRemovalTooltip?: string;\n  placeHolderSearchFacet?: string;\n}\nexport interface NoResultsText {\n  tipsHeading?: string;\n  tips?: string[];\n  othersSearched?: string;\n  helpfulResults?: string;\n  feedbackSearch?: string;\n  simpleFeedbackSearch?: string;\n  contact?: string;\n}\nexport interface SearchResultText {\n  information?: string;\n  notFound?: string;\n}\nexport interface ResultTypeText {\n  list?: string;\n  grid?: string;\n}\nexport interface ResultEntryText {\n  showLess?: string;\n  showMore?: string;\n  showFewMore?: string;\n}\nexport interface SearchResultsWrapperText {\n  loadMoreButton?: string;\n  problemsLoadMore?: string;\n  placeholder?: string;\n}\nexport interface SearchFieldText {\n  placeholderLabel?: string;\n  searchButtonText?: string;\n}\n",
            "properties": [
                {
                    "name": "closeAllFacets",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "filterResults",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "noPossibleFilters",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "openAllFacets",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "resetFacetSelection",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "FacetOptions",
            "id": "interface-FacetOptions-60bb7f8c050e1d0482483a1fefc19055",
            "file": "projects/amsui/src/lib/search-service/search.types.ts",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { MatFormFieldAppearance } from '@angular/material/form-field';\n\nexport interface NamedIcon {\n  icon: string;\n  name: string;\n  description?: string;\n}\nexport interface ResultEntry {\n  title: string;\n  description: string;\n  id?: string;\n  avatarImgSrc?: string;\n  avatarIcon?: string;\n  subTitles?: NamedIcon[];\n  tags?: string[];\n  imageSrc?: string;\n  actions?: NamedIcon[];\n  avatarToolTip?: string;\n}\nexport interface ResultEntryActionEvent {\n  actionName: string;\n  entry: ResultEntry;\n}\nexport type ResultViewType = 'grid' | 'list';\nexport interface SearchResultMeta {\n  numFound: number;\n  timeTaken: number;\n  keyword: string;\n  numShowed: number;\n  didYouMeanValue?: string;\n}\nexport type FacetType = 'single' | 'multi';\nexport interface Facet {\n  name: string;\n  screenName: string;\n  entries: FacetEntry[];\n  options: FacetOptions;\n}\nexport interface FacetOptions {\n  facetType?: FacetType;\n  enableSearch?: boolean;\n  icon?: string;\n  showMoreBehaviour?: boolean;\n  showMoreThreshold?: number;\n  collapsed?: boolean;\n  hideNumbers?: boolean;\n  showMoreOpened?: boolean;\n  [key: string]: boolean | number | FacetType | string | undefined;\n}\nexport interface FacetEntry {\n  name: string;\n  numberOfResults: number;\n  viewName: string;\n  selected?: boolean;\n}\nexport interface SelectedFacet {\n  facetName: string;\n  facetEntryName: string;\n}\nexport interface SortingOption {\n  value: string;\n  viewValue: string;\n  default?: boolean;\n  fieldOfResults?: string;\n}\nexport interface SuggestionParameter {\n  keyword: string;\n  numberOfSuggestions: number;\n}\n\nexport interface DefaultConfig {\n  searchFieldConfig: SearchFieldConfig;\n  searchResultMeta: SearchResultMeta;\n  facetOptions: FacetOptions;\n  highlightingActivated: boolean;\n  numberOfSuggestions: number;\n  showMoreWordLimit: number;\n  resultViewConfig: ResultViewConfig;\n  noResultsConfig: NoResultsConfig;\n  metaViewConfig: MetaResultViewConfig;\n}\n\nexport interface VisualFacetState {\n  facetName: string;\n  showMoreOpened: boolean;\n  collapsed: boolean;\n}\nexport interface SearchFieldConfig {\n  value?: string;\n  formFieldAppearance?: MatFormFieldAppearance;\n  addQueryToURLParams?: boolean;\n  disableAutocomplete?: boolean;\n  asyncSuggestionDataProvider?: (\n    input: SuggestionParameter\n  ) => Observable<string[]>;\n}\n\nexport interface FilterTab {\n  name: string;\n  viewName: string;\n  icon: string;\n}\n\nexport interface NoResultsConfig {\n  searchKeyword: string;\n  didYouMeanValue: string;\n  alternativeKeywords: string[];\n  alternativeResults: ResultEntry[];\n  contactMailAddress?: string;\n  contactPhoneNumber?: string;\n}\n\nexport interface MetaResultViewConfig {\n  sortingOptions?: SortingOption[];\n  resultViewTypes?: ResultViewType[];\n  selectedResultViewType?: ResultViewType;\n}\nexport interface ResultViewConfig extends MetaResultViewConfig {\n  filterTabs?: FilterTab[];\n}\n",
            "properties": [
                {
                    "name": "collapsed",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "enableSearch",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "facetType",
                    "type": "FacetType",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "hideNumbers",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "icon",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "showMoreBehaviour",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "showMoreOpened",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "showMoreThreshold",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 45
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-60bb7f8c050e1d0482483a1fefc19055",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "returnType": "boolean | number | FacetType | string | undefined",
                    "line": 48
                }
            ],
            "kind": 159,
            "methods": []
        },
        {
            "name": "FacetText",
            "id": "interface-FacetText-70f446d668263625b0bc601b8e3c7443",
            "file": "projects/amsui/src/lib/text.types.ts",
            "type": "interface",
            "sourceCode": "export interface FacetGroupText {\n  noPossibleFilters?: string;\n  openAllFacets?: string;\n  closeAllFacets?: string;\n  resetFacetSelection?: string;\n  filterResults?: string;\n}\nexport interface FacetText {\n  showMore?: string;\n  showLess?: string;\n  noResults?: string;\n  filterRemovalTooltip?: string;\n  placeHolderSearchFacet?: string;\n}\nexport interface NoResultsText {\n  tipsHeading?: string;\n  tips?: string[];\n  othersSearched?: string;\n  helpfulResults?: string;\n  feedbackSearch?: string;\n  simpleFeedbackSearch?: string;\n  contact?: string;\n}\nexport interface SearchResultText {\n  information?: string;\n  notFound?: string;\n}\nexport interface ResultTypeText {\n  list?: string;\n  grid?: string;\n}\nexport interface ResultEntryText {\n  showLess?: string;\n  showMore?: string;\n  showFewMore?: string;\n}\nexport interface SearchResultsWrapperText {\n  loadMoreButton?: string;\n  problemsLoadMore?: string;\n  placeholder?: string;\n}\nexport interface SearchFieldText {\n  placeholderLabel?: string;\n  searchButtonText?: string;\n}\n",
            "properties": [
                {
                    "name": "filterRemovalTooltip",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "noResults",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "placeHolderSearchFacet",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "showLess",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "showMore",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "FilterTab",
            "id": "interface-FilterTab-60bb7f8c050e1d0482483a1fefc19055",
            "file": "projects/amsui/src/lib/search-service/search.types.ts",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { MatFormFieldAppearance } from '@angular/material/form-field';\n\nexport interface NamedIcon {\n  icon: string;\n  name: string;\n  description?: string;\n}\nexport interface ResultEntry {\n  title: string;\n  description: string;\n  id?: string;\n  avatarImgSrc?: string;\n  avatarIcon?: string;\n  subTitles?: NamedIcon[];\n  tags?: string[];\n  imageSrc?: string;\n  actions?: NamedIcon[];\n  avatarToolTip?: string;\n}\nexport interface ResultEntryActionEvent {\n  actionName: string;\n  entry: ResultEntry;\n}\nexport type ResultViewType = 'grid' | 'list';\nexport interface SearchResultMeta {\n  numFound: number;\n  timeTaken: number;\n  keyword: string;\n  numShowed: number;\n  didYouMeanValue?: string;\n}\nexport type FacetType = 'single' | 'multi';\nexport interface Facet {\n  name: string;\n  screenName: string;\n  entries: FacetEntry[];\n  options: FacetOptions;\n}\nexport interface FacetOptions {\n  facetType?: FacetType;\n  enableSearch?: boolean;\n  icon?: string;\n  showMoreBehaviour?: boolean;\n  showMoreThreshold?: number;\n  collapsed?: boolean;\n  hideNumbers?: boolean;\n  showMoreOpened?: boolean;\n  [key: string]: boolean | number | FacetType | string | undefined;\n}\nexport interface FacetEntry {\n  name: string;\n  numberOfResults: number;\n  viewName: string;\n  selected?: boolean;\n}\nexport interface SelectedFacet {\n  facetName: string;\n  facetEntryName: string;\n}\nexport interface SortingOption {\n  value: string;\n  viewValue: string;\n  default?: boolean;\n  fieldOfResults?: string;\n}\nexport interface SuggestionParameter {\n  keyword: string;\n  numberOfSuggestions: number;\n}\n\nexport interface DefaultConfig {\n  searchFieldConfig: SearchFieldConfig;\n  searchResultMeta: SearchResultMeta;\n  facetOptions: FacetOptions;\n  highlightingActivated: boolean;\n  numberOfSuggestions: number;\n  showMoreWordLimit: number;\n  resultViewConfig: ResultViewConfig;\n  noResultsConfig: NoResultsConfig;\n  metaViewConfig: MetaResultViewConfig;\n}\n\nexport interface VisualFacetState {\n  facetName: string;\n  showMoreOpened: boolean;\n  collapsed: boolean;\n}\nexport interface SearchFieldConfig {\n  value?: string;\n  formFieldAppearance?: MatFormFieldAppearance;\n  addQueryToURLParams?: boolean;\n  disableAutocomplete?: boolean;\n  asyncSuggestionDataProvider?: (\n    input: SuggestionParameter\n  ) => Observable<string[]>;\n}\n\nexport interface FilterTab {\n  name: string;\n  viewName: string;\n  icon: string;\n}\n\nexport interface NoResultsConfig {\n  searchKeyword: string;\n  didYouMeanValue: string;\n  alternativeKeywords: string[];\n  alternativeResults: ResultEntry[];\n  contactMailAddress?: string;\n  contactPhoneNumber?: string;\n}\n\nexport interface MetaResultViewConfig {\n  sortingOptions?: SortingOption[];\n  resultViewTypes?: ResultViewType[];\n  selectedResultViewType?: ResultViewType;\n}\nexport interface ResultViewConfig extends MetaResultViewConfig {\n  filterTabs?: FilterTab[];\n}\n",
            "properties": [
                {
                    "name": "icon",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 102
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "viewName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 101
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Highlighting",
            "id": "interface-Highlighting-f55929a0bb3cc6b413bf029c9148585f",
            "file": "projects/amsui/src/lib/solr-service/solr.types.ts",
            "type": "interface",
            "sourceCode": "import { FacetOptions, SortingOption } from '../search-service/search.types';\n\nexport class FacetConfigSolr {\n  type = 'terms';\n  facetOptions: FacetOptions = {};\n  transformFunction?: (val: string) => any;\n  constructor(\n    public field: string,\n    public limit: number,\n    public screenName: string,\n    public name: string\n  ) {}\n  addFunctionality(\n    addons: FacetOptions,\n    transformFunction?: any\n  ): FacetConfigSolr {\n    for (const key of Object.keys(addons)) {\n      this.facetOptions[key] = addons[key];\n    }\n    this.transformFunction = transformFunction;\n    return this;\n  }\n}\n\nexport interface SearchResultFacetEntry {\n  val: string;\n  count: number;\n}\nexport interface SearchResultFacet {\n  buckets: SearchResultFacetEntry[];\n}\nexport interface SearchResultFacets {\n  count: number;\n  [key: string]: SearchResultFacet | number;\n}\n\nexport interface SearchResultsSolr {\n  facets: SearchResultFacets;\n  responseHeader: ResponseHeader;\n  response: Response;\n  highlighting: Highlighting;\n}\n\nexport interface Highlighting {\n  [key: string]: any;\n}\n\nexport interface Response {\n  numFound: number;\n  start: number;\n  numFoundExact: boolean;\n  docs: any[];\n}\n\nexport interface ResponseHeader {\n  status: number;\n  QTime: number;\n  params: Params;\n}\n\nexport interface Params {\n  'hl.snippets': string;\n  q: string;\n  'json.facet': string;\n  hl: string;\n  start: string;\n  'hl.fragsize': string;\n  'hl.usePhraseHighlighter': string;\n  'q.op': string;\n  queryTopic: string;\n  fq: string;\n  'hl.fl': string;\n  rows: string;\n}\n\nexport interface ResultTypesConfig {\n  all?: ResultType;\n  events?: ResultType;\n  documents?: ResultType;\n  persons?: ResultType;\n  places?: ResultType;\n  downloads?: ResultType;\n  [key: string]: ResultType | undefined;\n}\n\nexport interface ResultType {\n  name: string;\n  avatarIcon: string;\n  facets: FacetConfigSolr[];\n  sortingOptions: SortingOption[];\n  typeCriterias: ResultTypeCriteria[];\n}\n\nexport interface ResultTypeCriteria {\n  field: string;\n  value: string[];\n}\n\nexport interface ResultTypeData {\n  avatarToolTip: string;\n  avatarIcon: string;\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-f55929a0bb3cc6b413bf029c9148585f",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "returnType": "any",
                    "line": 44
                }
            ],
            "kind": 159,
            "methods": []
        },
        {
            "name": "MetaResultViewConfig",
            "id": "interface-MetaResultViewConfig-60bb7f8c050e1d0482483a1fefc19055",
            "file": "projects/amsui/src/lib/search-service/search.types.ts",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { MatFormFieldAppearance } from '@angular/material/form-field';\n\nexport interface NamedIcon {\n  icon: string;\n  name: string;\n  description?: string;\n}\nexport interface ResultEntry {\n  title: string;\n  description: string;\n  id?: string;\n  avatarImgSrc?: string;\n  avatarIcon?: string;\n  subTitles?: NamedIcon[];\n  tags?: string[];\n  imageSrc?: string;\n  actions?: NamedIcon[];\n  avatarToolTip?: string;\n}\nexport interface ResultEntryActionEvent {\n  actionName: string;\n  entry: ResultEntry;\n}\nexport type ResultViewType = 'grid' | 'list';\nexport interface SearchResultMeta {\n  numFound: number;\n  timeTaken: number;\n  keyword: string;\n  numShowed: number;\n  didYouMeanValue?: string;\n}\nexport type FacetType = 'single' | 'multi';\nexport interface Facet {\n  name: string;\n  screenName: string;\n  entries: FacetEntry[];\n  options: FacetOptions;\n}\nexport interface FacetOptions {\n  facetType?: FacetType;\n  enableSearch?: boolean;\n  icon?: string;\n  showMoreBehaviour?: boolean;\n  showMoreThreshold?: number;\n  collapsed?: boolean;\n  hideNumbers?: boolean;\n  showMoreOpened?: boolean;\n  [key: string]: boolean | number | FacetType | string | undefined;\n}\nexport interface FacetEntry {\n  name: string;\n  numberOfResults: number;\n  viewName: string;\n  selected?: boolean;\n}\nexport interface SelectedFacet {\n  facetName: string;\n  facetEntryName: string;\n}\nexport interface SortingOption {\n  value: string;\n  viewValue: string;\n  default?: boolean;\n  fieldOfResults?: string;\n}\nexport interface SuggestionParameter {\n  keyword: string;\n  numberOfSuggestions: number;\n}\n\nexport interface DefaultConfig {\n  searchFieldConfig: SearchFieldConfig;\n  searchResultMeta: SearchResultMeta;\n  facetOptions: FacetOptions;\n  highlightingActivated: boolean;\n  numberOfSuggestions: number;\n  showMoreWordLimit: number;\n  resultViewConfig: ResultViewConfig;\n  noResultsConfig: NoResultsConfig;\n  metaViewConfig: MetaResultViewConfig;\n}\n\nexport interface VisualFacetState {\n  facetName: string;\n  showMoreOpened: boolean;\n  collapsed: boolean;\n}\nexport interface SearchFieldConfig {\n  value?: string;\n  formFieldAppearance?: MatFormFieldAppearance;\n  addQueryToURLParams?: boolean;\n  disableAutocomplete?: boolean;\n  asyncSuggestionDataProvider?: (\n    input: SuggestionParameter\n  ) => Observable<string[]>;\n}\n\nexport interface FilterTab {\n  name: string;\n  viewName: string;\n  icon: string;\n}\n\nexport interface NoResultsConfig {\n  searchKeyword: string;\n  didYouMeanValue: string;\n  alternativeKeywords: string[];\n  alternativeResults: ResultEntry[];\n  contactMailAddress?: string;\n  contactPhoneNumber?: string;\n}\n\nexport interface MetaResultViewConfig {\n  sortingOptions?: SortingOption[];\n  resultViewTypes?: ResultViewType[];\n  selectedResultViewType?: ResultViewType;\n}\nexport interface ResultViewConfig extends MetaResultViewConfig {\n  filterTabs?: FilterTab[];\n}\n",
            "properties": [
                {
                    "name": "resultViewTypes",
                    "type": "ResultViewType[]",
                    "optional": true,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "selectedResultViewType",
                    "type": "ResultViewType",
                    "optional": true,
                    "description": "",
                    "line": 117
                },
                {
                    "name": "sortingOptions",
                    "type": "SortingOption[]",
                    "optional": true,
                    "description": "",
                    "line": 115
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "NamedIcon",
            "id": "interface-NamedIcon-60bb7f8c050e1d0482483a1fefc19055",
            "file": "projects/amsui/src/lib/search-service/search.types.ts",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { MatFormFieldAppearance } from '@angular/material/form-field';\n\nexport interface NamedIcon {\n  icon: string;\n  name: string;\n  description?: string;\n}\nexport interface ResultEntry {\n  title: string;\n  description: string;\n  id?: string;\n  avatarImgSrc?: string;\n  avatarIcon?: string;\n  subTitles?: NamedIcon[];\n  tags?: string[];\n  imageSrc?: string;\n  actions?: NamedIcon[];\n  avatarToolTip?: string;\n}\nexport interface ResultEntryActionEvent {\n  actionName: string;\n  entry: ResultEntry;\n}\nexport type ResultViewType = 'grid' | 'list';\nexport interface SearchResultMeta {\n  numFound: number;\n  timeTaken: number;\n  keyword: string;\n  numShowed: number;\n  didYouMeanValue?: string;\n}\nexport type FacetType = 'single' | 'multi';\nexport interface Facet {\n  name: string;\n  screenName: string;\n  entries: FacetEntry[];\n  options: FacetOptions;\n}\nexport interface FacetOptions {\n  facetType?: FacetType;\n  enableSearch?: boolean;\n  icon?: string;\n  showMoreBehaviour?: boolean;\n  showMoreThreshold?: number;\n  collapsed?: boolean;\n  hideNumbers?: boolean;\n  showMoreOpened?: boolean;\n  [key: string]: boolean | number | FacetType | string | undefined;\n}\nexport interface FacetEntry {\n  name: string;\n  numberOfResults: number;\n  viewName: string;\n  selected?: boolean;\n}\nexport interface SelectedFacet {\n  facetName: string;\n  facetEntryName: string;\n}\nexport interface SortingOption {\n  value: string;\n  viewValue: string;\n  default?: boolean;\n  fieldOfResults?: string;\n}\nexport interface SuggestionParameter {\n  keyword: string;\n  numberOfSuggestions: number;\n}\n\nexport interface DefaultConfig {\n  searchFieldConfig: SearchFieldConfig;\n  searchResultMeta: SearchResultMeta;\n  facetOptions: FacetOptions;\n  highlightingActivated: boolean;\n  numberOfSuggestions: number;\n  showMoreWordLimit: number;\n  resultViewConfig: ResultViewConfig;\n  noResultsConfig: NoResultsConfig;\n  metaViewConfig: MetaResultViewConfig;\n}\n\nexport interface VisualFacetState {\n  facetName: string;\n  showMoreOpened: boolean;\n  collapsed: boolean;\n}\nexport interface SearchFieldConfig {\n  value?: string;\n  formFieldAppearance?: MatFormFieldAppearance;\n  addQueryToURLParams?: boolean;\n  disableAutocomplete?: boolean;\n  asyncSuggestionDataProvider?: (\n    input: SuggestionParameter\n  ) => Observable<string[]>;\n}\n\nexport interface FilterTab {\n  name: string;\n  viewName: string;\n  icon: string;\n}\n\nexport interface NoResultsConfig {\n  searchKeyword: string;\n  didYouMeanValue: string;\n  alternativeKeywords: string[];\n  alternativeResults: ResultEntry[];\n  contactMailAddress?: string;\n  contactPhoneNumber?: string;\n}\n\nexport interface MetaResultViewConfig {\n  sortingOptions?: SortingOption[];\n  resultViewTypes?: ResultViewType[];\n  selectedResultViewType?: ResultViewType;\n}\nexport interface ResultViewConfig extends MetaResultViewConfig {\n  filterTabs?: FilterTab[];\n}\n",
            "properties": [
                {
                    "name": "description",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "icon",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "NoResultsConfig",
            "id": "interface-NoResultsConfig-60bb7f8c050e1d0482483a1fefc19055",
            "file": "projects/amsui/src/lib/search-service/search.types.ts",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { MatFormFieldAppearance } from '@angular/material/form-field';\n\nexport interface NamedIcon {\n  icon: string;\n  name: string;\n  description?: string;\n}\nexport interface ResultEntry {\n  title: string;\n  description: string;\n  id?: string;\n  avatarImgSrc?: string;\n  avatarIcon?: string;\n  subTitles?: NamedIcon[];\n  tags?: string[];\n  imageSrc?: string;\n  actions?: NamedIcon[];\n  avatarToolTip?: string;\n}\nexport interface ResultEntryActionEvent {\n  actionName: string;\n  entry: ResultEntry;\n}\nexport type ResultViewType = 'grid' | 'list';\nexport interface SearchResultMeta {\n  numFound: number;\n  timeTaken: number;\n  keyword: string;\n  numShowed: number;\n  didYouMeanValue?: string;\n}\nexport type FacetType = 'single' | 'multi';\nexport interface Facet {\n  name: string;\n  screenName: string;\n  entries: FacetEntry[];\n  options: FacetOptions;\n}\nexport interface FacetOptions {\n  facetType?: FacetType;\n  enableSearch?: boolean;\n  icon?: string;\n  showMoreBehaviour?: boolean;\n  showMoreThreshold?: number;\n  collapsed?: boolean;\n  hideNumbers?: boolean;\n  showMoreOpened?: boolean;\n  [key: string]: boolean | number | FacetType | string | undefined;\n}\nexport interface FacetEntry {\n  name: string;\n  numberOfResults: number;\n  viewName: string;\n  selected?: boolean;\n}\nexport interface SelectedFacet {\n  facetName: string;\n  facetEntryName: string;\n}\nexport interface SortingOption {\n  value: string;\n  viewValue: string;\n  default?: boolean;\n  fieldOfResults?: string;\n}\nexport interface SuggestionParameter {\n  keyword: string;\n  numberOfSuggestions: number;\n}\n\nexport interface DefaultConfig {\n  searchFieldConfig: SearchFieldConfig;\n  searchResultMeta: SearchResultMeta;\n  facetOptions: FacetOptions;\n  highlightingActivated: boolean;\n  numberOfSuggestions: number;\n  showMoreWordLimit: number;\n  resultViewConfig: ResultViewConfig;\n  noResultsConfig: NoResultsConfig;\n  metaViewConfig: MetaResultViewConfig;\n}\n\nexport interface VisualFacetState {\n  facetName: string;\n  showMoreOpened: boolean;\n  collapsed: boolean;\n}\nexport interface SearchFieldConfig {\n  value?: string;\n  formFieldAppearance?: MatFormFieldAppearance;\n  addQueryToURLParams?: boolean;\n  disableAutocomplete?: boolean;\n  asyncSuggestionDataProvider?: (\n    input: SuggestionParameter\n  ) => Observable<string[]>;\n}\n\nexport interface FilterTab {\n  name: string;\n  viewName: string;\n  icon: string;\n}\n\nexport interface NoResultsConfig {\n  searchKeyword: string;\n  didYouMeanValue: string;\n  alternativeKeywords: string[];\n  alternativeResults: ResultEntry[];\n  contactMailAddress?: string;\n  contactPhoneNumber?: string;\n}\n\nexport interface MetaResultViewConfig {\n  sortingOptions?: SortingOption[];\n  resultViewTypes?: ResultViewType[];\n  selectedResultViewType?: ResultViewType;\n}\nexport interface ResultViewConfig extends MetaResultViewConfig {\n  filterTabs?: FilterTab[];\n}\n",
            "properties": [
                {
                    "name": "alternativeKeywords",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 108
                },
                {
                    "name": "alternativeResults",
                    "type": "ResultEntry[]",
                    "optional": false,
                    "description": "",
                    "line": 109
                },
                {
                    "name": "contactMailAddress",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "contactPhoneNumber",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "didYouMeanValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "searchKeyword",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 106
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "NoResultsText",
            "id": "interface-NoResultsText-70f446d668263625b0bc601b8e3c7443",
            "file": "projects/amsui/src/lib/text.types.ts",
            "type": "interface",
            "sourceCode": "export interface FacetGroupText {\n  noPossibleFilters?: string;\n  openAllFacets?: string;\n  closeAllFacets?: string;\n  resetFacetSelection?: string;\n  filterResults?: string;\n}\nexport interface FacetText {\n  showMore?: string;\n  showLess?: string;\n  noResults?: string;\n  filterRemovalTooltip?: string;\n  placeHolderSearchFacet?: string;\n}\nexport interface NoResultsText {\n  tipsHeading?: string;\n  tips?: string[];\n  othersSearched?: string;\n  helpfulResults?: string;\n  feedbackSearch?: string;\n  simpleFeedbackSearch?: string;\n  contact?: string;\n}\nexport interface SearchResultText {\n  information?: string;\n  notFound?: string;\n}\nexport interface ResultTypeText {\n  list?: string;\n  grid?: string;\n}\nexport interface ResultEntryText {\n  showLess?: string;\n  showMore?: string;\n  showFewMore?: string;\n}\nexport interface SearchResultsWrapperText {\n  loadMoreButton?: string;\n  problemsLoadMore?: string;\n  placeholder?: string;\n}\nexport interface SearchFieldText {\n  placeholderLabel?: string;\n  searchButtonText?: string;\n}\n",
            "properties": [
                {
                    "name": "contact",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "feedbackSearch",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "helpfulResults",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "othersSearched",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "simpleFeedbackSearch",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "tips",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "tipsHeading",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Params",
            "id": "interface-Params-f55929a0bb3cc6b413bf029c9148585f",
            "file": "projects/amsui/src/lib/solr-service/solr.types.ts",
            "type": "interface",
            "sourceCode": "import { FacetOptions, SortingOption } from '../search-service/search.types';\n\nexport class FacetConfigSolr {\n  type = 'terms';\n  facetOptions: FacetOptions = {};\n  transformFunction?: (val: string) => any;\n  constructor(\n    public field: string,\n    public limit: number,\n    public screenName: string,\n    public name: string\n  ) {}\n  addFunctionality(\n    addons: FacetOptions,\n    transformFunction?: any\n  ): FacetConfigSolr {\n    for (const key of Object.keys(addons)) {\n      this.facetOptions[key] = addons[key];\n    }\n    this.transformFunction = transformFunction;\n    return this;\n  }\n}\n\nexport interface SearchResultFacetEntry {\n  val: string;\n  count: number;\n}\nexport interface SearchResultFacet {\n  buckets: SearchResultFacetEntry[];\n}\nexport interface SearchResultFacets {\n  count: number;\n  [key: string]: SearchResultFacet | number;\n}\n\nexport interface SearchResultsSolr {\n  facets: SearchResultFacets;\n  responseHeader: ResponseHeader;\n  response: Response;\n  highlighting: Highlighting;\n}\n\nexport interface Highlighting {\n  [key: string]: any;\n}\n\nexport interface Response {\n  numFound: number;\n  start: number;\n  numFoundExact: boolean;\n  docs: any[];\n}\n\nexport interface ResponseHeader {\n  status: number;\n  QTime: number;\n  params: Params;\n}\n\nexport interface Params {\n  'hl.snippets': string;\n  q: string;\n  'json.facet': string;\n  hl: string;\n  start: string;\n  'hl.fragsize': string;\n  'hl.usePhraseHighlighter': string;\n  'q.op': string;\n  queryTopic: string;\n  fq: string;\n  'hl.fl': string;\n  rows: string;\n}\n\nexport interface ResultTypesConfig {\n  all?: ResultType;\n  events?: ResultType;\n  documents?: ResultType;\n  persons?: ResultType;\n  places?: ResultType;\n  downloads?: ResultType;\n  [key: string]: ResultType | undefined;\n}\n\nexport interface ResultType {\n  name: string;\n  avatarIcon: string;\n  facets: FacetConfigSolr[];\n  sortingOptions: SortingOption[];\n  typeCriterias: ResultTypeCriteria[];\n}\n\nexport interface ResultTypeCriteria {\n  field: string;\n  value: string[];\n}\n\nexport interface ResultTypeData {\n  avatarToolTip: string;\n  avatarIcon: string;\n}\n",
            "properties": [
                {
                    "name": "fq",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "hl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "hl.fl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "hl.fragsize",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "hl.snippets",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "hl.usePhraseHighlighter",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "json.facet",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "q",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "q.op",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "queryTopic",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "rows",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "start",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 66
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Response",
            "id": "interface-Response-f55929a0bb3cc6b413bf029c9148585f",
            "file": "projects/amsui/src/lib/solr-service/solr.types.ts",
            "type": "interface",
            "sourceCode": "import { FacetOptions, SortingOption } from '../search-service/search.types';\n\nexport class FacetConfigSolr {\n  type = 'terms';\n  facetOptions: FacetOptions = {};\n  transformFunction?: (val: string) => any;\n  constructor(\n    public field: string,\n    public limit: number,\n    public screenName: string,\n    public name: string\n  ) {}\n  addFunctionality(\n    addons: FacetOptions,\n    transformFunction?: any\n  ): FacetConfigSolr {\n    for (const key of Object.keys(addons)) {\n      this.facetOptions[key] = addons[key];\n    }\n    this.transformFunction = transformFunction;\n    return this;\n  }\n}\n\nexport interface SearchResultFacetEntry {\n  val: string;\n  count: number;\n}\nexport interface SearchResultFacet {\n  buckets: SearchResultFacetEntry[];\n}\nexport interface SearchResultFacets {\n  count: number;\n  [key: string]: SearchResultFacet | number;\n}\n\nexport interface SearchResultsSolr {\n  facets: SearchResultFacets;\n  responseHeader: ResponseHeader;\n  response: Response;\n  highlighting: Highlighting;\n}\n\nexport interface Highlighting {\n  [key: string]: any;\n}\n\nexport interface Response {\n  numFound: number;\n  start: number;\n  numFoundExact: boolean;\n  docs: any[];\n}\n\nexport interface ResponseHeader {\n  status: number;\n  QTime: number;\n  params: Params;\n}\n\nexport interface Params {\n  'hl.snippets': string;\n  q: string;\n  'json.facet': string;\n  hl: string;\n  start: string;\n  'hl.fragsize': string;\n  'hl.usePhraseHighlighter': string;\n  'q.op': string;\n  queryTopic: string;\n  fq: string;\n  'hl.fl': string;\n  rows: string;\n}\n\nexport interface ResultTypesConfig {\n  all?: ResultType;\n  events?: ResultType;\n  documents?: ResultType;\n  persons?: ResultType;\n  places?: ResultType;\n  downloads?: ResultType;\n  [key: string]: ResultType | undefined;\n}\n\nexport interface ResultType {\n  name: string;\n  avatarIcon: string;\n  facets: FacetConfigSolr[];\n  sortingOptions: SortingOption[];\n  typeCriterias: ResultTypeCriteria[];\n}\n\nexport interface ResultTypeCriteria {\n  field: string;\n  value: string[];\n}\n\nexport interface ResultTypeData {\n  avatarToolTip: string;\n  avatarIcon: string;\n}\n",
            "properties": [
                {
                    "name": "docs",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "numFound",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "numFoundExact",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "start",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 50
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ResponseHeader",
            "id": "interface-ResponseHeader-f55929a0bb3cc6b413bf029c9148585f",
            "file": "projects/amsui/src/lib/solr-service/solr.types.ts",
            "type": "interface",
            "sourceCode": "import { FacetOptions, SortingOption } from '../search-service/search.types';\n\nexport class FacetConfigSolr {\n  type = 'terms';\n  facetOptions: FacetOptions = {};\n  transformFunction?: (val: string) => any;\n  constructor(\n    public field: string,\n    public limit: number,\n    public screenName: string,\n    public name: string\n  ) {}\n  addFunctionality(\n    addons: FacetOptions,\n    transformFunction?: any\n  ): FacetConfigSolr {\n    for (const key of Object.keys(addons)) {\n      this.facetOptions[key] = addons[key];\n    }\n    this.transformFunction = transformFunction;\n    return this;\n  }\n}\n\nexport interface SearchResultFacetEntry {\n  val: string;\n  count: number;\n}\nexport interface SearchResultFacet {\n  buckets: SearchResultFacetEntry[];\n}\nexport interface SearchResultFacets {\n  count: number;\n  [key: string]: SearchResultFacet | number;\n}\n\nexport interface SearchResultsSolr {\n  facets: SearchResultFacets;\n  responseHeader: ResponseHeader;\n  response: Response;\n  highlighting: Highlighting;\n}\n\nexport interface Highlighting {\n  [key: string]: any;\n}\n\nexport interface Response {\n  numFound: number;\n  start: number;\n  numFoundExact: boolean;\n  docs: any[];\n}\n\nexport interface ResponseHeader {\n  status: number;\n  QTime: number;\n  params: Params;\n}\n\nexport interface Params {\n  'hl.snippets': string;\n  q: string;\n  'json.facet': string;\n  hl: string;\n  start: string;\n  'hl.fragsize': string;\n  'hl.usePhraseHighlighter': string;\n  'q.op': string;\n  queryTopic: string;\n  fq: string;\n  'hl.fl': string;\n  rows: string;\n}\n\nexport interface ResultTypesConfig {\n  all?: ResultType;\n  events?: ResultType;\n  documents?: ResultType;\n  persons?: ResultType;\n  places?: ResultType;\n  downloads?: ResultType;\n  [key: string]: ResultType | undefined;\n}\n\nexport interface ResultType {\n  name: string;\n  avatarIcon: string;\n  facets: FacetConfigSolr[];\n  sortingOptions: SortingOption[];\n  typeCriterias: ResultTypeCriteria[];\n}\n\nexport interface ResultTypeCriteria {\n  field: string;\n  value: string[];\n}\n\nexport interface ResultTypeData {\n  avatarToolTip: string;\n  avatarIcon: string;\n}\n",
            "properties": [
                {
                    "name": "params",
                    "type": "Params",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "QTime",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "status",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 56
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ResultEntry",
            "id": "interface-ResultEntry-60bb7f8c050e1d0482483a1fefc19055",
            "file": "projects/amsui/src/lib/search-service/search.types.ts",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { MatFormFieldAppearance } from '@angular/material/form-field';\n\nexport interface NamedIcon {\n  icon: string;\n  name: string;\n  description?: string;\n}\nexport interface ResultEntry {\n  title: string;\n  description: string;\n  id?: string;\n  avatarImgSrc?: string;\n  avatarIcon?: string;\n  subTitles?: NamedIcon[];\n  tags?: string[];\n  imageSrc?: string;\n  actions?: NamedIcon[];\n  avatarToolTip?: string;\n}\nexport interface ResultEntryActionEvent {\n  actionName: string;\n  entry: ResultEntry;\n}\nexport type ResultViewType = 'grid' | 'list';\nexport interface SearchResultMeta {\n  numFound: number;\n  timeTaken: number;\n  keyword: string;\n  numShowed: number;\n  didYouMeanValue?: string;\n}\nexport type FacetType = 'single' | 'multi';\nexport interface Facet {\n  name: string;\n  screenName: string;\n  entries: FacetEntry[];\n  options: FacetOptions;\n}\nexport interface FacetOptions {\n  facetType?: FacetType;\n  enableSearch?: boolean;\n  icon?: string;\n  showMoreBehaviour?: boolean;\n  showMoreThreshold?: number;\n  collapsed?: boolean;\n  hideNumbers?: boolean;\n  showMoreOpened?: boolean;\n  [key: string]: boolean | number | FacetType | string | undefined;\n}\nexport interface FacetEntry {\n  name: string;\n  numberOfResults: number;\n  viewName: string;\n  selected?: boolean;\n}\nexport interface SelectedFacet {\n  facetName: string;\n  facetEntryName: string;\n}\nexport interface SortingOption {\n  value: string;\n  viewValue: string;\n  default?: boolean;\n  fieldOfResults?: string;\n}\nexport interface SuggestionParameter {\n  keyword: string;\n  numberOfSuggestions: number;\n}\n\nexport interface DefaultConfig {\n  searchFieldConfig: SearchFieldConfig;\n  searchResultMeta: SearchResultMeta;\n  facetOptions: FacetOptions;\n  highlightingActivated: boolean;\n  numberOfSuggestions: number;\n  showMoreWordLimit: number;\n  resultViewConfig: ResultViewConfig;\n  noResultsConfig: NoResultsConfig;\n  metaViewConfig: MetaResultViewConfig;\n}\n\nexport interface VisualFacetState {\n  facetName: string;\n  showMoreOpened: boolean;\n  collapsed: boolean;\n}\nexport interface SearchFieldConfig {\n  value?: string;\n  formFieldAppearance?: MatFormFieldAppearance;\n  addQueryToURLParams?: boolean;\n  disableAutocomplete?: boolean;\n  asyncSuggestionDataProvider?: (\n    input: SuggestionParameter\n  ) => Observable<string[]>;\n}\n\nexport interface FilterTab {\n  name: string;\n  viewName: string;\n  icon: string;\n}\n\nexport interface NoResultsConfig {\n  searchKeyword: string;\n  didYouMeanValue: string;\n  alternativeKeywords: string[];\n  alternativeResults: ResultEntry[];\n  contactMailAddress?: string;\n  contactPhoneNumber?: string;\n}\n\nexport interface MetaResultViewConfig {\n  sortingOptions?: SortingOption[];\n  resultViewTypes?: ResultViewType[];\n  selectedResultViewType?: ResultViewType;\n}\nexport interface ResultViewConfig extends MetaResultViewConfig {\n  filterTabs?: FilterTab[];\n}\n",
            "properties": [
                {
                    "name": "actions",
                    "type": "NamedIcon[]",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "avatarIcon",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "avatarImgSrc",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "avatarToolTip",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "imageSrc",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "subTitles",
                    "type": "NamedIcon[]",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "tags",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ResultEntryActionEvent",
            "id": "interface-ResultEntryActionEvent-60bb7f8c050e1d0482483a1fefc19055",
            "file": "projects/amsui/src/lib/search-service/search.types.ts",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { MatFormFieldAppearance } from '@angular/material/form-field';\n\nexport interface NamedIcon {\n  icon: string;\n  name: string;\n  description?: string;\n}\nexport interface ResultEntry {\n  title: string;\n  description: string;\n  id?: string;\n  avatarImgSrc?: string;\n  avatarIcon?: string;\n  subTitles?: NamedIcon[];\n  tags?: string[];\n  imageSrc?: string;\n  actions?: NamedIcon[];\n  avatarToolTip?: string;\n}\nexport interface ResultEntryActionEvent {\n  actionName: string;\n  entry: ResultEntry;\n}\nexport type ResultViewType = 'grid' | 'list';\nexport interface SearchResultMeta {\n  numFound: number;\n  timeTaken: number;\n  keyword: string;\n  numShowed: number;\n  didYouMeanValue?: string;\n}\nexport type FacetType = 'single' | 'multi';\nexport interface Facet {\n  name: string;\n  screenName: string;\n  entries: FacetEntry[];\n  options: FacetOptions;\n}\nexport interface FacetOptions {\n  facetType?: FacetType;\n  enableSearch?: boolean;\n  icon?: string;\n  showMoreBehaviour?: boolean;\n  showMoreThreshold?: number;\n  collapsed?: boolean;\n  hideNumbers?: boolean;\n  showMoreOpened?: boolean;\n  [key: string]: boolean | number | FacetType | string | undefined;\n}\nexport interface FacetEntry {\n  name: string;\n  numberOfResults: number;\n  viewName: string;\n  selected?: boolean;\n}\nexport interface SelectedFacet {\n  facetName: string;\n  facetEntryName: string;\n}\nexport interface SortingOption {\n  value: string;\n  viewValue: string;\n  default?: boolean;\n  fieldOfResults?: string;\n}\nexport interface SuggestionParameter {\n  keyword: string;\n  numberOfSuggestions: number;\n}\n\nexport interface DefaultConfig {\n  searchFieldConfig: SearchFieldConfig;\n  searchResultMeta: SearchResultMeta;\n  facetOptions: FacetOptions;\n  highlightingActivated: boolean;\n  numberOfSuggestions: number;\n  showMoreWordLimit: number;\n  resultViewConfig: ResultViewConfig;\n  noResultsConfig: NoResultsConfig;\n  metaViewConfig: MetaResultViewConfig;\n}\n\nexport interface VisualFacetState {\n  facetName: string;\n  showMoreOpened: boolean;\n  collapsed: boolean;\n}\nexport interface SearchFieldConfig {\n  value?: string;\n  formFieldAppearance?: MatFormFieldAppearance;\n  addQueryToURLParams?: boolean;\n  disableAutocomplete?: boolean;\n  asyncSuggestionDataProvider?: (\n    input: SuggestionParameter\n  ) => Observable<string[]>;\n}\n\nexport interface FilterTab {\n  name: string;\n  viewName: string;\n  icon: string;\n}\n\nexport interface NoResultsConfig {\n  searchKeyword: string;\n  didYouMeanValue: string;\n  alternativeKeywords: string[];\n  alternativeResults: ResultEntry[];\n  contactMailAddress?: string;\n  contactPhoneNumber?: string;\n}\n\nexport interface MetaResultViewConfig {\n  sortingOptions?: SortingOption[];\n  resultViewTypes?: ResultViewType[];\n  selectedResultViewType?: ResultViewType;\n}\nexport interface ResultViewConfig extends MetaResultViewConfig {\n  filterTabs?: FilterTab[];\n}\n",
            "properties": [
                {
                    "name": "actionName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "entry",
                    "type": "ResultEntry",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ResultEntryText",
            "id": "interface-ResultEntryText-70f446d668263625b0bc601b8e3c7443",
            "file": "projects/amsui/src/lib/text.types.ts",
            "type": "interface",
            "sourceCode": "export interface FacetGroupText {\n  noPossibleFilters?: string;\n  openAllFacets?: string;\n  closeAllFacets?: string;\n  resetFacetSelection?: string;\n  filterResults?: string;\n}\nexport interface FacetText {\n  showMore?: string;\n  showLess?: string;\n  noResults?: string;\n  filterRemovalTooltip?: string;\n  placeHolderSearchFacet?: string;\n}\nexport interface NoResultsText {\n  tipsHeading?: string;\n  tips?: string[];\n  othersSearched?: string;\n  helpfulResults?: string;\n  feedbackSearch?: string;\n  simpleFeedbackSearch?: string;\n  contact?: string;\n}\nexport interface SearchResultText {\n  information?: string;\n  notFound?: string;\n}\nexport interface ResultTypeText {\n  list?: string;\n  grid?: string;\n}\nexport interface ResultEntryText {\n  showLess?: string;\n  showMore?: string;\n  showFewMore?: string;\n}\nexport interface SearchResultsWrapperText {\n  loadMoreButton?: string;\n  problemsLoadMore?: string;\n  placeholder?: string;\n}\nexport interface SearchFieldText {\n  placeholderLabel?: string;\n  searchButtonText?: string;\n}\n",
            "properties": [
                {
                    "name": "showFewMore",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "showLess",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "showMore",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 34
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ResultType",
            "id": "interface-ResultType-f55929a0bb3cc6b413bf029c9148585f",
            "file": "projects/amsui/src/lib/solr-service/solr.types.ts",
            "type": "interface",
            "sourceCode": "import { FacetOptions, SortingOption } from '../search-service/search.types';\n\nexport class FacetConfigSolr {\n  type = 'terms';\n  facetOptions: FacetOptions = {};\n  transformFunction?: (val: string) => any;\n  constructor(\n    public field: string,\n    public limit: number,\n    public screenName: string,\n    public name: string\n  ) {}\n  addFunctionality(\n    addons: FacetOptions,\n    transformFunction?: any\n  ): FacetConfigSolr {\n    for (const key of Object.keys(addons)) {\n      this.facetOptions[key] = addons[key];\n    }\n    this.transformFunction = transformFunction;\n    return this;\n  }\n}\n\nexport interface SearchResultFacetEntry {\n  val: string;\n  count: number;\n}\nexport interface SearchResultFacet {\n  buckets: SearchResultFacetEntry[];\n}\nexport interface SearchResultFacets {\n  count: number;\n  [key: string]: SearchResultFacet | number;\n}\n\nexport interface SearchResultsSolr {\n  facets: SearchResultFacets;\n  responseHeader: ResponseHeader;\n  response: Response;\n  highlighting: Highlighting;\n}\n\nexport interface Highlighting {\n  [key: string]: any;\n}\n\nexport interface Response {\n  numFound: number;\n  start: number;\n  numFoundExact: boolean;\n  docs: any[];\n}\n\nexport interface ResponseHeader {\n  status: number;\n  QTime: number;\n  params: Params;\n}\n\nexport interface Params {\n  'hl.snippets': string;\n  q: string;\n  'json.facet': string;\n  hl: string;\n  start: string;\n  'hl.fragsize': string;\n  'hl.usePhraseHighlighter': string;\n  'q.op': string;\n  queryTopic: string;\n  fq: string;\n  'hl.fl': string;\n  rows: string;\n}\n\nexport interface ResultTypesConfig {\n  all?: ResultType;\n  events?: ResultType;\n  documents?: ResultType;\n  persons?: ResultType;\n  places?: ResultType;\n  downloads?: ResultType;\n  [key: string]: ResultType | undefined;\n}\n\nexport interface ResultType {\n  name: string;\n  avatarIcon: string;\n  facets: FacetConfigSolr[];\n  sortingOptions: SortingOption[];\n  typeCriterias: ResultTypeCriteria[];\n}\n\nexport interface ResultTypeCriteria {\n  field: string;\n  value: string[];\n}\n\nexport interface ResultTypeData {\n  avatarToolTip: string;\n  avatarIcon: string;\n}\n",
            "properties": [
                {
                    "name": "avatarIcon",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "facets",
                    "type": "FacetConfigSolr[]",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "sortingOptions",
                    "type": "SortingOption[]",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "typeCriterias",
                    "type": "ResultTypeCriteria[]",
                    "optional": false,
                    "description": "",
                    "line": 91
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ResultTypeCriteria",
            "id": "interface-ResultTypeCriteria-f55929a0bb3cc6b413bf029c9148585f",
            "file": "projects/amsui/src/lib/solr-service/solr.types.ts",
            "type": "interface",
            "sourceCode": "import { FacetOptions, SortingOption } from '../search-service/search.types';\n\nexport class FacetConfigSolr {\n  type = 'terms';\n  facetOptions: FacetOptions = {};\n  transformFunction?: (val: string) => any;\n  constructor(\n    public field: string,\n    public limit: number,\n    public screenName: string,\n    public name: string\n  ) {}\n  addFunctionality(\n    addons: FacetOptions,\n    transformFunction?: any\n  ): FacetConfigSolr {\n    for (const key of Object.keys(addons)) {\n      this.facetOptions[key] = addons[key];\n    }\n    this.transformFunction = transformFunction;\n    return this;\n  }\n}\n\nexport interface SearchResultFacetEntry {\n  val: string;\n  count: number;\n}\nexport interface SearchResultFacet {\n  buckets: SearchResultFacetEntry[];\n}\nexport interface SearchResultFacets {\n  count: number;\n  [key: string]: SearchResultFacet | number;\n}\n\nexport interface SearchResultsSolr {\n  facets: SearchResultFacets;\n  responseHeader: ResponseHeader;\n  response: Response;\n  highlighting: Highlighting;\n}\n\nexport interface Highlighting {\n  [key: string]: any;\n}\n\nexport interface Response {\n  numFound: number;\n  start: number;\n  numFoundExact: boolean;\n  docs: any[];\n}\n\nexport interface ResponseHeader {\n  status: number;\n  QTime: number;\n  params: Params;\n}\n\nexport interface Params {\n  'hl.snippets': string;\n  q: string;\n  'json.facet': string;\n  hl: string;\n  start: string;\n  'hl.fragsize': string;\n  'hl.usePhraseHighlighter': string;\n  'q.op': string;\n  queryTopic: string;\n  fq: string;\n  'hl.fl': string;\n  rows: string;\n}\n\nexport interface ResultTypesConfig {\n  all?: ResultType;\n  events?: ResultType;\n  documents?: ResultType;\n  persons?: ResultType;\n  places?: ResultType;\n  downloads?: ResultType;\n  [key: string]: ResultType | undefined;\n}\n\nexport interface ResultType {\n  name: string;\n  avatarIcon: string;\n  facets: FacetConfigSolr[];\n  sortingOptions: SortingOption[];\n  typeCriterias: ResultTypeCriteria[];\n}\n\nexport interface ResultTypeCriteria {\n  field: string;\n  value: string[];\n}\n\nexport interface ResultTypeData {\n  avatarToolTip: string;\n  avatarIcon: string;\n}\n",
            "properties": [
                {
                    "name": "field",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "value",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 96
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ResultTypeData",
            "id": "interface-ResultTypeData-f55929a0bb3cc6b413bf029c9148585f",
            "file": "projects/amsui/src/lib/solr-service/solr.types.ts",
            "type": "interface",
            "sourceCode": "import { FacetOptions, SortingOption } from '../search-service/search.types';\n\nexport class FacetConfigSolr {\n  type = 'terms';\n  facetOptions: FacetOptions = {};\n  transformFunction?: (val: string) => any;\n  constructor(\n    public field: string,\n    public limit: number,\n    public screenName: string,\n    public name: string\n  ) {}\n  addFunctionality(\n    addons: FacetOptions,\n    transformFunction?: any\n  ): FacetConfigSolr {\n    for (const key of Object.keys(addons)) {\n      this.facetOptions[key] = addons[key];\n    }\n    this.transformFunction = transformFunction;\n    return this;\n  }\n}\n\nexport interface SearchResultFacetEntry {\n  val: string;\n  count: number;\n}\nexport interface SearchResultFacet {\n  buckets: SearchResultFacetEntry[];\n}\nexport interface SearchResultFacets {\n  count: number;\n  [key: string]: SearchResultFacet | number;\n}\n\nexport interface SearchResultsSolr {\n  facets: SearchResultFacets;\n  responseHeader: ResponseHeader;\n  response: Response;\n  highlighting: Highlighting;\n}\n\nexport interface Highlighting {\n  [key: string]: any;\n}\n\nexport interface Response {\n  numFound: number;\n  start: number;\n  numFoundExact: boolean;\n  docs: any[];\n}\n\nexport interface ResponseHeader {\n  status: number;\n  QTime: number;\n  params: Params;\n}\n\nexport interface Params {\n  'hl.snippets': string;\n  q: string;\n  'json.facet': string;\n  hl: string;\n  start: string;\n  'hl.fragsize': string;\n  'hl.usePhraseHighlighter': string;\n  'q.op': string;\n  queryTopic: string;\n  fq: string;\n  'hl.fl': string;\n  rows: string;\n}\n\nexport interface ResultTypesConfig {\n  all?: ResultType;\n  events?: ResultType;\n  documents?: ResultType;\n  persons?: ResultType;\n  places?: ResultType;\n  downloads?: ResultType;\n  [key: string]: ResultType | undefined;\n}\n\nexport interface ResultType {\n  name: string;\n  avatarIcon: string;\n  facets: FacetConfigSolr[];\n  sortingOptions: SortingOption[];\n  typeCriterias: ResultTypeCriteria[];\n}\n\nexport interface ResultTypeCriteria {\n  field: string;\n  value: string[];\n}\n\nexport interface ResultTypeData {\n  avatarToolTip: string;\n  avatarIcon: string;\n}\n",
            "properties": [
                {
                    "name": "avatarIcon",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "avatarToolTip",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 100
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ResultTypesConfig",
            "id": "interface-ResultTypesConfig-f55929a0bb3cc6b413bf029c9148585f",
            "file": "projects/amsui/src/lib/solr-service/solr.types.ts",
            "type": "interface",
            "sourceCode": "import { FacetOptions, SortingOption } from '../search-service/search.types';\n\nexport class FacetConfigSolr {\n  type = 'terms';\n  facetOptions: FacetOptions = {};\n  transformFunction?: (val: string) => any;\n  constructor(\n    public field: string,\n    public limit: number,\n    public screenName: string,\n    public name: string\n  ) {}\n  addFunctionality(\n    addons: FacetOptions,\n    transformFunction?: any\n  ): FacetConfigSolr {\n    for (const key of Object.keys(addons)) {\n      this.facetOptions[key] = addons[key];\n    }\n    this.transformFunction = transformFunction;\n    return this;\n  }\n}\n\nexport interface SearchResultFacetEntry {\n  val: string;\n  count: number;\n}\nexport interface SearchResultFacet {\n  buckets: SearchResultFacetEntry[];\n}\nexport interface SearchResultFacets {\n  count: number;\n  [key: string]: SearchResultFacet | number;\n}\n\nexport interface SearchResultsSolr {\n  facets: SearchResultFacets;\n  responseHeader: ResponseHeader;\n  response: Response;\n  highlighting: Highlighting;\n}\n\nexport interface Highlighting {\n  [key: string]: any;\n}\n\nexport interface Response {\n  numFound: number;\n  start: number;\n  numFoundExact: boolean;\n  docs: any[];\n}\n\nexport interface ResponseHeader {\n  status: number;\n  QTime: number;\n  params: Params;\n}\n\nexport interface Params {\n  'hl.snippets': string;\n  q: string;\n  'json.facet': string;\n  hl: string;\n  start: string;\n  'hl.fragsize': string;\n  'hl.usePhraseHighlighter': string;\n  'q.op': string;\n  queryTopic: string;\n  fq: string;\n  'hl.fl': string;\n  rows: string;\n}\n\nexport interface ResultTypesConfig {\n  all?: ResultType;\n  events?: ResultType;\n  documents?: ResultType;\n  persons?: ResultType;\n  places?: ResultType;\n  downloads?: ResultType;\n  [key: string]: ResultType | undefined;\n}\n\nexport interface ResultType {\n  name: string;\n  avatarIcon: string;\n  facets: FacetConfigSolr[];\n  sortingOptions: SortingOption[];\n  typeCriterias: ResultTypeCriteria[];\n}\n\nexport interface ResultTypeCriteria {\n  field: string;\n  value: string[];\n}\n\nexport interface ResultTypeData {\n  avatarToolTip: string;\n  avatarIcon: string;\n}\n",
            "properties": [
                {
                    "name": "all",
                    "type": "ResultType",
                    "optional": true,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "documents",
                    "type": "ResultType",
                    "optional": true,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "downloads",
                    "type": "ResultType",
                    "optional": true,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "events",
                    "type": "ResultType",
                    "optional": true,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "persons",
                    "type": "ResultType",
                    "optional": true,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "places",
                    "type": "ResultType",
                    "optional": true,
                    "description": "",
                    "line": 81
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-f55929a0bb3cc6b413bf029c9148585f",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "returnType": "ResultType | undefined",
                    "line": 82
                }
            ],
            "kind": 159,
            "methods": []
        },
        {
            "name": "ResultTypeText",
            "id": "interface-ResultTypeText-70f446d668263625b0bc601b8e3c7443",
            "file": "projects/amsui/src/lib/text.types.ts",
            "type": "interface",
            "sourceCode": "export interface FacetGroupText {\n  noPossibleFilters?: string;\n  openAllFacets?: string;\n  closeAllFacets?: string;\n  resetFacetSelection?: string;\n  filterResults?: string;\n}\nexport interface FacetText {\n  showMore?: string;\n  showLess?: string;\n  noResults?: string;\n  filterRemovalTooltip?: string;\n  placeHolderSearchFacet?: string;\n}\nexport interface NoResultsText {\n  tipsHeading?: string;\n  tips?: string[];\n  othersSearched?: string;\n  helpfulResults?: string;\n  feedbackSearch?: string;\n  simpleFeedbackSearch?: string;\n  contact?: string;\n}\nexport interface SearchResultText {\n  information?: string;\n  notFound?: string;\n}\nexport interface ResultTypeText {\n  list?: string;\n  grid?: string;\n}\nexport interface ResultEntryText {\n  showLess?: string;\n  showMore?: string;\n  showFewMore?: string;\n}\nexport interface SearchResultsWrapperText {\n  loadMoreButton?: string;\n  problemsLoadMore?: string;\n  placeholder?: string;\n}\nexport interface SearchFieldText {\n  placeholderLabel?: string;\n  searchButtonText?: string;\n}\n",
            "properties": [
                {
                    "name": "grid",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "list",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ResultViewConfig",
            "id": "interface-ResultViewConfig-60bb7f8c050e1d0482483a1fefc19055",
            "file": "projects/amsui/src/lib/search-service/search.types.ts",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { MatFormFieldAppearance } from '@angular/material/form-field';\n\nexport interface NamedIcon {\n  icon: string;\n  name: string;\n  description?: string;\n}\nexport interface ResultEntry {\n  title: string;\n  description: string;\n  id?: string;\n  avatarImgSrc?: string;\n  avatarIcon?: string;\n  subTitles?: NamedIcon[];\n  tags?: string[];\n  imageSrc?: string;\n  actions?: NamedIcon[];\n  avatarToolTip?: string;\n}\nexport interface ResultEntryActionEvent {\n  actionName: string;\n  entry: ResultEntry;\n}\nexport type ResultViewType = 'grid' | 'list';\nexport interface SearchResultMeta {\n  numFound: number;\n  timeTaken: number;\n  keyword: string;\n  numShowed: number;\n  didYouMeanValue?: string;\n}\nexport type FacetType = 'single' | 'multi';\nexport interface Facet {\n  name: string;\n  screenName: string;\n  entries: FacetEntry[];\n  options: FacetOptions;\n}\nexport interface FacetOptions {\n  facetType?: FacetType;\n  enableSearch?: boolean;\n  icon?: string;\n  showMoreBehaviour?: boolean;\n  showMoreThreshold?: number;\n  collapsed?: boolean;\n  hideNumbers?: boolean;\n  showMoreOpened?: boolean;\n  [key: string]: boolean | number | FacetType | string | undefined;\n}\nexport interface FacetEntry {\n  name: string;\n  numberOfResults: number;\n  viewName: string;\n  selected?: boolean;\n}\nexport interface SelectedFacet {\n  facetName: string;\n  facetEntryName: string;\n}\nexport interface SortingOption {\n  value: string;\n  viewValue: string;\n  default?: boolean;\n  fieldOfResults?: string;\n}\nexport interface SuggestionParameter {\n  keyword: string;\n  numberOfSuggestions: number;\n}\n\nexport interface DefaultConfig {\n  searchFieldConfig: SearchFieldConfig;\n  searchResultMeta: SearchResultMeta;\n  facetOptions: FacetOptions;\n  highlightingActivated: boolean;\n  numberOfSuggestions: number;\n  showMoreWordLimit: number;\n  resultViewConfig: ResultViewConfig;\n  noResultsConfig: NoResultsConfig;\n  metaViewConfig: MetaResultViewConfig;\n}\n\nexport interface VisualFacetState {\n  facetName: string;\n  showMoreOpened: boolean;\n  collapsed: boolean;\n}\nexport interface SearchFieldConfig {\n  value?: string;\n  formFieldAppearance?: MatFormFieldAppearance;\n  addQueryToURLParams?: boolean;\n  disableAutocomplete?: boolean;\n  asyncSuggestionDataProvider?: (\n    input: SuggestionParameter\n  ) => Observable<string[]>;\n}\n\nexport interface FilterTab {\n  name: string;\n  viewName: string;\n  icon: string;\n}\n\nexport interface NoResultsConfig {\n  searchKeyword: string;\n  didYouMeanValue: string;\n  alternativeKeywords: string[];\n  alternativeResults: ResultEntry[];\n  contactMailAddress?: string;\n  contactPhoneNumber?: string;\n}\n\nexport interface MetaResultViewConfig {\n  sortingOptions?: SortingOption[];\n  resultViewTypes?: ResultViewType[];\n  selectedResultViewType?: ResultViewType;\n}\nexport interface ResultViewConfig extends MetaResultViewConfig {\n  filterTabs?: FilterTab[];\n}\n",
            "properties": [
                {
                    "name": "filterTabs",
                    "type": "FilterTab[]",
                    "optional": true,
                    "description": "",
                    "line": 120
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "MetaResultViewConfig"
        },
        {
            "name": "SearchFieldConfig",
            "id": "interface-SearchFieldConfig-60bb7f8c050e1d0482483a1fefc19055",
            "file": "projects/amsui/src/lib/search-service/search.types.ts",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { MatFormFieldAppearance } from '@angular/material/form-field';\n\nexport interface NamedIcon {\n  icon: string;\n  name: string;\n  description?: string;\n}\nexport interface ResultEntry {\n  title: string;\n  description: string;\n  id?: string;\n  avatarImgSrc?: string;\n  avatarIcon?: string;\n  subTitles?: NamedIcon[];\n  tags?: string[];\n  imageSrc?: string;\n  actions?: NamedIcon[];\n  avatarToolTip?: string;\n}\nexport interface ResultEntryActionEvent {\n  actionName: string;\n  entry: ResultEntry;\n}\nexport type ResultViewType = 'grid' | 'list';\nexport interface SearchResultMeta {\n  numFound: number;\n  timeTaken: number;\n  keyword: string;\n  numShowed: number;\n  didYouMeanValue?: string;\n}\nexport type FacetType = 'single' | 'multi';\nexport interface Facet {\n  name: string;\n  screenName: string;\n  entries: FacetEntry[];\n  options: FacetOptions;\n}\nexport interface FacetOptions {\n  facetType?: FacetType;\n  enableSearch?: boolean;\n  icon?: string;\n  showMoreBehaviour?: boolean;\n  showMoreThreshold?: number;\n  collapsed?: boolean;\n  hideNumbers?: boolean;\n  showMoreOpened?: boolean;\n  [key: string]: boolean | number | FacetType | string | undefined;\n}\nexport interface FacetEntry {\n  name: string;\n  numberOfResults: number;\n  viewName: string;\n  selected?: boolean;\n}\nexport interface SelectedFacet {\n  facetName: string;\n  facetEntryName: string;\n}\nexport interface SortingOption {\n  value: string;\n  viewValue: string;\n  default?: boolean;\n  fieldOfResults?: string;\n}\nexport interface SuggestionParameter {\n  keyword: string;\n  numberOfSuggestions: number;\n}\n\nexport interface DefaultConfig {\n  searchFieldConfig: SearchFieldConfig;\n  searchResultMeta: SearchResultMeta;\n  facetOptions: FacetOptions;\n  highlightingActivated: boolean;\n  numberOfSuggestions: number;\n  showMoreWordLimit: number;\n  resultViewConfig: ResultViewConfig;\n  noResultsConfig: NoResultsConfig;\n  metaViewConfig: MetaResultViewConfig;\n}\n\nexport interface VisualFacetState {\n  facetName: string;\n  showMoreOpened: boolean;\n  collapsed: boolean;\n}\nexport interface SearchFieldConfig {\n  value?: string;\n  formFieldAppearance?: MatFormFieldAppearance;\n  addQueryToURLParams?: boolean;\n  disableAutocomplete?: boolean;\n  asyncSuggestionDataProvider?: (\n    input: SuggestionParameter\n  ) => Observable<string[]>;\n}\n\nexport interface FilterTab {\n  name: string;\n  viewName: string;\n  icon: string;\n}\n\nexport interface NoResultsConfig {\n  searchKeyword: string;\n  didYouMeanValue: string;\n  alternativeKeywords: string[];\n  alternativeResults: ResultEntry[];\n  contactMailAddress?: string;\n  contactPhoneNumber?: string;\n}\n\nexport interface MetaResultViewConfig {\n  sortingOptions?: SortingOption[];\n  resultViewTypes?: ResultViewType[];\n  selectedResultViewType?: ResultViewType;\n}\nexport interface ResultViewConfig extends MetaResultViewConfig {\n  filterTabs?: FilterTab[];\n}\n",
            "properties": [
                {
                    "name": "addQueryToURLParams",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "asyncSuggestionDataProvider",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "disableAutocomplete",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "formFieldAppearance",
                    "type": "MatFormFieldAppearance",
                    "optional": true,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 90
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SearchFieldText",
            "id": "interface-SearchFieldText-70f446d668263625b0bc601b8e3c7443",
            "file": "projects/amsui/src/lib/text.types.ts",
            "type": "interface",
            "sourceCode": "export interface FacetGroupText {\n  noPossibleFilters?: string;\n  openAllFacets?: string;\n  closeAllFacets?: string;\n  resetFacetSelection?: string;\n  filterResults?: string;\n}\nexport interface FacetText {\n  showMore?: string;\n  showLess?: string;\n  noResults?: string;\n  filterRemovalTooltip?: string;\n  placeHolderSearchFacet?: string;\n}\nexport interface NoResultsText {\n  tipsHeading?: string;\n  tips?: string[];\n  othersSearched?: string;\n  helpfulResults?: string;\n  feedbackSearch?: string;\n  simpleFeedbackSearch?: string;\n  contact?: string;\n}\nexport interface SearchResultText {\n  information?: string;\n  notFound?: string;\n}\nexport interface ResultTypeText {\n  list?: string;\n  grid?: string;\n}\nexport interface ResultEntryText {\n  showLess?: string;\n  showMore?: string;\n  showFewMore?: string;\n}\nexport interface SearchResultsWrapperText {\n  loadMoreButton?: string;\n  problemsLoadMore?: string;\n  placeholder?: string;\n}\nexport interface SearchFieldText {\n  placeholderLabel?: string;\n  searchButtonText?: string;\n}\n",
            "properties": [
                {
                    "name": "placeholderLabel",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "searchButtonText",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 44
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SearchResultFacet",
            "id": "interface-SearchResultFacet-f55929a0bb3cc6b413bf029c9148585f",
            "file": "projects/amsui/src/lib/solr-service/solr.types.ts",
            "type": "interface",
            "sourceCode": "import { FacetOptions, SortingOption } from '../search-service/search.types';\n\nexport class FacetConfigSolr {\n  type = 'terms';\n  facetOptions: FacetOptions = {};\n  transformFunction?: (val: string) => any;\n  constructor(\n    public field: string,\n    public limit: number,\n    public screenName: string,\n    public name: string\n  ) {}\n  addFunctionality(\n    addons: FacetOptions,\n    transformFunction?: any\n  ): FacetConfigSolr {\n    for (const key of Object.keys(addons)) {\n      this.facetOptions[key] = addons[key];\n    }\n    this.transformFunction = transformFunction;\n    return this;\n  }\n}\n\nexport interface SearchResultFacetEntry {\n  val: string;\n  count: number;\n}\nexport interface SearchResultFacet {\n  buckets: SearchResultFacetEntry[];\n}\nexport interface SearchResultFacets {\n  count: number;\n  [key: string]: SearchResultFacet | number;\n}\n\nexport interface SearchResultsSolr {\n  facets: SearchResultFacets;\n  responseHeader: ResponseHeader;\n  response: Response;\n  highlighting: Highlighting;\n}\n\nexport interface Highlighting {\n  [key: string]: any;\n}\n\nexport interface Response {\n  numFound: number;\n  start: number;\n  numFoundExact: boolean;\n  docs: any[];\n}\n\nexport interface ResponseHeader {\n  status: number;\n  QTime: number;\n  params: Params;\n}\n\nexport interface Params {\n  'hl.snippets': string;\n  q: string;\n  'json.facet': string;\n  hl: string;\n  start: string;\n  'hl.fragsize': string;\n  'hl.usePhraseHighlighter': string;\n  'q.op': string;\n  queryTopic: string;\n  fq: string;\n  'hl.fl': string;\n  rows: string;\n}\n\nexport interface ResultTypesConfig {\n  all?: ResultType;\n  events?: ResultType;\n  documents?: ResultType;\n  persons?: ResultType;\n  places?: ResultType;\n  downloads?: ResultType;\n  [key: string]: ResultType | undefined;\n}\n\nexport interface ResultType {\n  name: string;\n  avatarIcon: string;\n  facets: FacetConfigSolr[];\n  sortingOptions: SortingOption[];\n  typeCriterias: ResultTypeCriteria[];\n}\n\nexport interface ResultTypeCriteria {\n  field: string;\n  value: string[];\n}\n\nexport interface ResultTypeData {\n  avatarToolTip: string;\n  avatarIcon: string;\n}\n",
            "properties": [
                {
                    "name": "buckets",
                    "type": "SearchResultFacetEntry[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SearchResultFacetEntry",
            "id": "interface-SearchResultFacetEntry-f55929a0bb3cc6b413bf029c9148585f",
            "file": "projects/amsui/src/lib/solr-service/solr.types.ts",
            "type": "interface",
            "sourceCode": "import { FacetOptions, SortingOption } from '../search-service/search.types';\n\nexport class FacetConfigSolr {\n  type = 'terms';\n  facetOptions: FacetOptions = {};\n  transformFunction?: (val: string) => any;\n  constructor(\n    public field: string,\n    public limit: number,\n    public screenName: string,\n    public name: string\n  ) {}\n  addFunctionality(\n    addons: FacetOptions,\n    transformFunction?: any\n  ): FacetConfigSolr {\n    for (const key of Object.keys(addons)) {\n      this.facetOptions[key] = addons[key];\n    }\n    this.transformFunction = transformFunction;\n    return this;\n  }\n}\n\nexport interface SearchResultFacetEntry {\n  val: string;\n  count: number;\n}\nexport interface SearchResultFacet {\n  buckets: SearchResultFacetEntry[];\n}\nexport interface SearchResultFacets {\n  count: number;\n  [key: string]: SearchResultFacet | number;\n}\n\nexport interface SearchResultsSolr {\n  facets: SearchResultFacets;\n  responseHeader: ResponseHeader;\n  response: Response;\n  highlighting: Highlighting;\n}\n\nexport interface Highlighting {\n  [key: string]: any;\n}\n\nexport interface Response {\n  numFound: number;\n  start: number;\n  numFoundExact: boolean;\n  docs: any[];\n}\n\nexport interface ResponseHeader {\n  status: number;\n  QTime: number;\n  params: Params;\n}\n\nexport interface Params {\n  'hl.snippets': string;\n  q: string;\n  'json.facet': string;\n  hl: string;\n  start: string;\n  'hl.fragsize': string;\n  'hl.usePhraseHighlighter': string;\n  'q.op': string;\n  queryTopic: string;\n  fq: string;\n  'hl.fl': string;\n  rows: string;\n}\n\nexport interface ResultTypesConfig {\n  all?: ResultType;\n  events?: ResultType;\n  documents?: ResultType;\n  persons?: ResultType;\n  places?: ResultType;\n  downloads?: ResultType;\n  [key: string]: ResultType | undefined;\n}\n\nexport interface ResultType {\n  name: string;\n  avatarIcon: string;\n  facets: FacetConfigSolr[];\n  sortingOptions: SortingOption[];\n  typeCriterias: ResultTypeCriteria[];\n}\n\nexport interface ResultTypeCriteria {\n  field: string;\n  value: string[];\n}\n\nexport interface ResultTypeData {\n  avatarToolTip: string;\n  avatarIcon: string;\n}\n",
            "properties": [
                {
                    "name": "count",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "val",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SearchResultFacets",
            "id": "interface-SearchResultFacets-f55929a0bb3cc6b413bf029c9148585f",
            "file": "projects/amsui/src/lib/solr-service/solr.types.ts",
            "type": "interface",
            "sourceCode": "import { FacetOptions, SortingOption } from '../search-service/search.types';\n\nexport class FacetConfigSolr {\n  type = 'terms';\n  facetOptions: FacetOptions = {};\n  transformFunction?: (val: string) => any;\n  constructor(\n    public field: string,\n    public limit: number,\n    public screenName: string,\n    public name: string\n  ) {}\n  addFunctionality(\n    addons: FacetOptions,\n    transformFunction?: any\n  ): FacetConfigSolr {\n    for (const key of Object.keys(addons)) {\n      this.facetOptions[key] = addons[key];\n    }\n    this.transformFunction = transformFunction;\n    return this;\n  }\n}\n\nexport interface SearchResultFacetEntry {\n  val: string;\n  count: number;\n}\nexport interface SearchResultFacet {\n  buckets: SearchResultFacetEntry[];\n}\nexport interface SearchResultFacets {\n  count: number;\n  [key: string]: SearchResultFacet | number;\n}\n\nexport interface SearchResultsSolr {\n  facets: SearchResultFacets;\n  responseHeader: ResponseHeader;\n  response: Response;\n  highlighting: Highlighting;\n}\n\nexport interface Highlighting {\n  [key: string]: any;\n}\n\nexport interface Response {\n  numFound: number;\n  start: number;\n  numFoundExact: boolean;\n  docs: any[];\n}\n\nexport interface ResponseHeader {\n  status: number;\n  QTime: number;\n  params: Params;\n}\n\nexport interface Params {\n  'hl.snippets': string;\n  q: string;\n  'json.facet': string;\n  hl: string;\n  start: string;\n  'hl.fragsize': string;\n  'hl.usePhraseHighlighter': string;\n  'q.op': string;\n  queryTopic: string;\n  fq: string;\n  'hl.fl': string;\n  rows: string;\n}\n\nexport interface ResultTypesConfig {\n  all?: ResultType;\n  events?: ResultType;\n  documents?: ResultType;\n  persons?: ResultType;\n  places?: ResultType;\n  downloads?: ResultType;\n  [key: string]: ResultType | undefined;\n}\n\nexport interface ResultType {\n  name: string;\n  avatarIcon: string;\n  facets: FacetConfigSolr[];\n  sortingOptions: SortingOption[];\n  typeCriterias: ResultTypeCriteria[];\n}\n\nexport interface ResultTypeCriteria {\n  field: string;\n  value: string[];\n}\n\nexport interface ResultTypeData {\n  avatarToolTip: string;\n  avatarIcon: string;\n}\n",
            "properties": [
                {
                    "name": "count",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-f55929a0bb3cc6b413bf029c9148585f",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "returnType": "SearchResultFacet | number",
                    "line": 33
                }
            ],
            "kind": 159,
            "methods": []
        },
        {
            "name": "SearchResultMeta",
            "id": "interface-SearchResultMeta-60bb7f8c050e1d0482483a1fefc19055",
            "file": "projects/amsui/src/lib/search-service/search.types.ts",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { MatFormFieldAppearance } from '@angular/material/form-field';\n\nexport interface NamedIcon {\n  icon: string;\n  name: string;\n  description?: string;\n}\nexport interface ResultEntry {\n  title: string;\n  description: string;\n  id?: string;\n  avatarImgSrc?: string;\n  avatarIcon?: string;\n  subTitles?: NamedIcon[];\n  tags?: string[];\n  imageSrc?: string;\n  actions?: NamedIcon[];\n  avatarToolTip?: string;\n}\nexport interface ResultEntryActionEvent {\n  actionName: string;\n  entry: ResultEntry;\n}\nexport type ResultViewType = 'grid' | 'list';\nexport interface SearchResultMeta {\n  numFound: number;\n  timeTaken: number;\n  keyword: string;\n  numShowed: number;\n  didYouMeanValue?: string;\n}\nexport type FacetType = 'single' | 'multi';\nexport interface Facet {\n  name: string;\n  screenName: string;\n  entries: FacetEntry[];\n  options: FacetOptions;\n}\nexport interface FacetOptions {\n  facetType?: FacetType;\n  enableSearch?: boolean;\n  icon?: string;\n  showMoreBehaviour?: boolean;\n  showMoreThreshold?: number;\n  collapsed?: boolean;\n  hideNumbers?: boolean;\n  showMoreOpened?: boolean;\n  [key: string]: boolean | number | FacetType | string | undefined;\n}\nexport interface FacetEntry {\n  name: string;\n  numberOfResults: number;\n  viewName: string;\n  selected?: boolean;\n}\nexport interface SelectedFacet {\n  facetName: string;\n  facetEntryName: string;\n}\nexport interface SortingOption {\n  value: string;\n  viewValue: string;\n  default?: boolean;\n  fieldOfResults?: string;\n}\nexport interface SuggestionParameter {\n  keyword: string;\n  numberOfSuggestions: number;\n}\n\nexport interface DefaultConfig {\n  searchFieldConfig: SearchFieldConfig;\n  searchResultMeta: SearchResultMeta;\n  facetOptions: FacetOptions;\n  highlightingActivated: boolean;\n  numberOfSuggestions: number;\n  showMoreWordLimit: number;\n  resultViewConfig: ResultViewConfig;\n  noResultsConfig: NoResultsConfig;\n  metaViewConfig: MetaResultViewConfig;\n}\n\nexport interface VisualFacetState {\n  facetName: string;\n  showMoreOpened: boolean;\n  collapsed: boolean;\n}\nexport interface SearchFieldConfig {\n  value?: string;\n  formFieldAppearance?: MatFormFieldAppearance;\n  addQueryToURLParams?: boolean;\n  disableAutocomplete?: boolean;\n  asyncSuggestionDataProvider?: (\n    input: SuggestionParameter\n  ) => Observable<string[]>;\n}\n\nexport interface FilterTab {\n  name: string;\n  viewName: string;\n  icon: string;\n}\n\nexport interface NoResultsConfig {\n  searchKeyword: string;\n  didYouMeanValue: string;\n  alternativeKeywords: string[];\n  alternativeResults: ResultEntry[];\n  contactMailAddress?: string;\n  contactPhoneNumber?: string;\n}\n\nexport interface MetaResultViewConfig {\n  sortingOptions?: SortingOption[];\n  resultViewTypes?: ResultViewType[];\n  selectedResultViewType?: ResultViewType;\n}\nexport interface ResultViewConfig extends MetaResultViewConfig {\n  filterTabs?: FilterTab[];\n}\n",
            "properties": [
                {
                    "name": "didYouMeanValue",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "keyword",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "numFound",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "numShowed",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "timeTaken",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SearchResultsSolr",
            "id": "interface-SearchResultsSolr-f55929a0bb3cc6b413bf029c9148585f",
            "file": "projects/amsui/src/lib/solr-service/solr.types.ts",
            "type": "interface",
            "sourceCode": "import { FacetOptions, SortingOption } from '../search-service/search.types';\n\nexport class FacetConfigSolr {\n  type = 'terms';\n  facetOptions: FacetOptions = {};\n  transformFunction?: (val: string) => any;\n  constructor(\n    public field: string,\n    public limit: number,\n    public screenName: string,\n    public name: string\n  ) {}\n  addFunctionality(\n    addons: FacetOptions,\n    transformFunction?: any\n  ): FacetConfigSolr {\n    for (const key of Object.keys(addons)) {\n      this.facetOptions[key] = addons[key];\n    }\n    this.transformFunction = transformFunction;\n    return this;\n  }\n}\n\nexport interface SearchResultFacetEntry {\n  val: string;\n  count: number;\n}\nexport interface SearchResultFacet {\n  buckets: SearchResultFacetEntry[];\n}\nexport interface SearchResultFacets {\n  count: number;\n  [key: string]: SearchResultFacet | number;\n}\n\nexport interface SearchResultsSolr {\n  facets: SearchResultFacets;\n  responseHeader: ResponseHeader;\n  response: Response;\n  highlighting: Highlighting;\n}\n\nexport interface Highlighting {\n  [key: string]: any;\n}\n\nexport interface Response {\n  numFound: number;\n  start: number;\n  numFoundExact: boolean;\n  docs: any[];\n}\n\nexport interface ResponseHeader {\n  status: number;\n  QTime: number;\n  params: Params;\n}\n\nexport interface Params {\n  'hl.snippets': string;\n  q: string;\n  'json.facet': string;\n  hl: string;\n  start: string;\n  'hl.fragsize': string;\n  'hl.usePhraseHighlighter': string;\n  'q.op': string;\n  queryTopic: string;\n  fq: string;\n  'hl.fl': string;\n  rows: string;\n}\n\nexport interface ResultTypesConfig {\n  all?: ResultType;\n  events?: ResultType;\n  documents?: ResultType;\n  persons?: ResultType;\n  places?: ResultType;\n  downloads?: ResultType;\n  [key: string]: ResultType | undefined;\n}\n\nexport interface ResultType {\n  name: string;\n  avatarIcon: string;\n  facets: FacetConfigSolr[];\n  sortingOptions: SortingOption[];\n  typeCriterias: ResultTypeCriteria[];\n}\n\nexport interface ResultTypeCriteria {\n  field: string;\n  value: string[];\n}\n\nexport interface ResultTypeData {\n  avatarToolTip: string;\n  avatarIcon: string;\n}\n",
            "properties": [
                {
                    "name": "facets",
                    "type": "SearchResultFacets",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "highlighting",
                    "type": "Highlighting",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "response",
                    "type": "Response",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "responseHeader",
                    "type": "ResponseHeader",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SearchResultsWrapperText",
            "id": "interface-SearchResultsWrapperText-70f446d668263625b0bc601b8e3c7443",
            "file": "projects/amsui/src/lib/text.types.ts",
            "type": "interface",
            "sourceCode": "export interface FacetGroupText {\n  noPossibleFilters?: string;\n  openAllFacets?: string;\n  closeAllFacets?: string;\n  resetFacetSelection?: string;\n  filterResults?: string;\n}\nexport interface FacetText {\n  showMore?: string;\n  showLess?: string;\n  noResults?: string;\n  filterRemovalTooltip?: string;\n  placeHolderSearchFacet?: string;\n}\nexport interface NoResultsText {\n  tipsHeading?: string;\n  tips?: string[];\n  othersSearched?: string;\n  helpfulResults?: string;\n  feedbackSearch?: string;\n  simpleFeedbackSearch?: string;\n  contact?: string;\n}\nexport interface SearchResultText {\n  information?: string;\n  notFound?: string;\n}\nexport interface ResultTypeText {\n  list?: string;\n  grid?: string;\n}\nexport interface ResultEntryText {\n  showLess?: string;\n  showMore?: string;\n  showFewMore?: string;\n}\nexport interface SearchResultsWrapperText {\n  loadMoreButton?: string;\n  problemsLoadMore?: string;\n  placeholder?: string;\n}\nexport interface SearchFieldText {\n  placeholderLabel?: string;\n  searchButtonText?: string;\n}\n",
            "properties": [
                {
                    "name": "loadMoreButton",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "problemsLoadMore",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 39
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SearchResultText",
            "id": "interface-SearchResultText-70f446d668263625b0bc601b8e3c7443",
            "file": "projects/amsui/src/lib/text.types.ts",
            "type": "interface",
            "sourceCode": "export interface FacetGroupText {\n  noPossibleFilters?: string;\n  openAllFacets?: string;\n  closeAllFacets?: string;\n  resetFacetSelection?: string;\n  filterResults?: string;\n}\nexport interface FacetText {\n  showMore?: string;\n  showLess?: string;\n  noResults?: string;\n  filterRemovalTooltip?: string;\n  placeHolderSearchFacet?: string;\n}\nexport interface NoResultsText {\n  tipsHeading?: string;\n  tips?: string[];\n  othersSearched?: string;\n  helpfulResults?: string;\n  feedbackSearch?: string;\n  simpleFeedbackSearch?: string;\n  contact?: string;\n}\nexport interface SearchResultText {\n  information?: string;\n  notFound?: string;\n}\nexport interface ResultTypeText {\n  list?: string;\n  grid?: string;\n}\nexport interface ResultEntryText {\n  showLess?: string;\n  showMore?: string;\n  showFewMore?: string;\n}\nexport interface SearchResultsWrapperText {\n  loadMoreButton?: string;\n  problemsLoadMore?: string;\n  placeholder?: string;\n}\nexport interface SearchFieldText {\n  placeholderLabel?: string;\n  searchButtonText?: string;\n}\n",
            "properties": [
                {
                    "name": "information",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "notFound",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SelectedFacet",
            "id": "interface-SelectedFacet-60bb7f8c050e1d0482483a1fefc19055",
            "file": "projects/amsui/src/lib/search-service/search.types.ts",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { MatFormFieldAppearance } from '@angular/material/form-field';\n\nexport interface NamedIcon {\n  icon: string;\n  name: string;\n  description?: string;\n}\nexport interface ResultEntry {\n  title: string;\n  description: string;\n  id?: string;\n  avatarImgSrc?: string;\n  avatarIcon?: string;\n  subTitles?: NamedIcon[];\n  tags?: string[];\n  imageSrc?: string;\n  actions?: NamedIcon[];\n  avatarToolTip?: string;\n}\nexport interface ResultEntryActionEvent {\n  actionName: string;\n  entry: ResultEntry;\n}\nexport type ResultViewType = 'grid' | 'list';\nexport interface SearchResultMeta {\n  numFound: number;\n  timeTaken: number;\n  keyword: string;\n  numShowed: number;\n  didYouMeanValue?: string;\n}\nexport type FacetType = 'single' | 'multi';\nexport interface Facet {\n  name: string;\n  screenName: string;\n  entries: FacetEntry[];\n  options: FacetOptions;\n}\nexport interface FacetOptions {\n  facetType?: FacetType;\n  enableSearch?: boolean;\n  icon?: string;\n  showMoreBehaviour?: boolean;\n  showMoreThreshold?: number;\n  collapsed?: boolean;\n  hideNumbers?: boolean;\n  showMoreOpened?: boolean;\n  [key: string]: boolean | number | FacetType | string | undefined;\n}\nexport interface FacetEntry {\n  name: string;\n  numberOfResults: number;\n  viewName: string;\n  selected?: boolean;\n}\nexport interface SelectedFacet {\n  facetName: string;\n  facetEntryName: string;\n}\nexport interface SortingOption {\n  value: string;\n  viewValue: string;\n  default?: boolean;\n  fieldOfResults?: string;\n}\nexport interface SuggestionParameter {\n  keyword: string;\n  numberOfSuggestions: number;\n}\n\nexport interface DefaultConfig {\n  searchFieldConfig: SearchFieldConfig;\n  searchResultMeta: SearchResultMeta;\n  facetOptions: FacetOptions;\n  highlightingActivated: boolean;\n  numberOfSuggestions: number;\n  showMoreWordLimit: number;\n  resultViewConfig: ResultViewConfig;\n  noResultsConfig: NoResultsConfig;\n  metaViewConfig: MetaResultViewConfig;\n}\n\nexport interface VisualFacetState {\n  facetName: string;\n  showMoreOpened: boolean;\n  collapsed: boolean;\n}\nexport interface SearchFieldConfig {\n  value?: string;\n  formFieldAppearance?: MatFormFieldAppearance;\n  addQueryToURLParams?: boolean;\n  disableAutocomplete?: boolean;\n  asyncSuggestionDataProvider?: (\n    input: SuggestionParameter\n  ) => Observable<string[]>;\n}\n\nexport interface FilterTab {\n  name: string;\n  viewName: string;\n  icon: string;\n}\n\nexport interface NoResultsConfig {\n  searchKeyword: string;\n  didYouMeanValue: string;\n  alternativeKeywords: string[];\n  alternativeResults: ResultEntry[];\n  contactMailAddress?: string;\n  contactPhoneNumber?: string;\n}\n\nexport interface MetaResultViewConfig {\n  sortingOptions?: SortingOption[];\n  resultViewTypes?: ResultViewType[];\n  selectedResultViewType?: ResultViewType;\n}\nexport interface ResultViewConfig extends MetaResultViewConfig {\n  filterTabs?: FilterTab[];\n}\n",
            "properties": [
                {
                    "name": "facetEntryName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "facetName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SortingOption",
            "id": "interface-SortingOption-60bb7f8c050e1d0482483a1fefc19055",
            "file": "projects/amsui/src/lib/search-service/search.types.ts",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { MatFormFieldAppearance } from '@angular/material/form-field';\n\nexport interface NamedIcon {\n  icon: string;\n  name: string;\n  description?: string;\n}\nexport interface ResultEntry {\n  title: string;\n  description: string;\n  id?: string;\n  avatarImgSrc?: string;\n  avatarIcon?: string;\n  subTitles?: NamedIcon[];\n  tags?: string[];\n  imageSrc?: string;\n  actions?: NamedIcon[];\n  avatarToolTip?: string;\n}\nexport interface ResultEntryActionEvent {\n  actionName: string;\n  entry: ResultEntry;\n}\nexport type ResultViewType = 'grid' | 'list';\nexport interface SearchResultMeta {\n  numFound: number;\n  timeTaken: number;\n  keyword: string;\n  numShowed: number;\n  didYouMeanValue?: string;\n}\nexport type FacetType = 'single' | 'multi';\nexport interface Facet {\n  name: string;\n  screenName: string;\n  entries: FacetEntry[];\n  options: FacetOptions;\n}\nexport interface FacetOptions {\n  facetType?: FacetType;\n  enableSearch?: boolean;\n  icon?: string;\n  showMoreBehaviour?: boolean;\n  showMoreThreshold?: number;\n  collapsed?: boolean;\n  hideNumbers?: boolean;\n  showMoreOpened?: boolean;\n  [key: string]: boolean | number | FacetType | string | undefined;\n}\nexport interface FacetEntry {\n  name: string;\n  numberOfResults: number;\n  viewName: string;\n  selected?: boolean;\n}\nexport interface SelectedFacet {\n  facetName: string;\n  facetEntryName: string;\n}\nexport interface SortingOption {\n  value: string;\n  viewValue: string;\n  default?: boolean;\n  fieldOfResults?: string;\n}\nexport interface SuggestionParameter {\n  keyword: string;\n  numberOfSuggestions: number;\n}\n\nexport interface DefaultConfig {\n  searchFieldConfig: SearchFieldConfig;\n  searchResultMeta: SearchResultMeta;\n  facetOptions: FacetOptions;\n  highlightingActivated: boolean;\n  numberOfSuggestions: number;\n  showMoreWordLimit: number;\n  resultViewConfig: ResultViewConfig;\n  noResultsConfig: NoResultsConfig;\n  metaViewConfig: MetaResultViewConfig;\n}\n\nexport interface VisualFacetState {\n  facetName: string;\n  showMoreOpened: boolean;\n  collapsed: boolean;\n}\nexport interface SearchFieldConfig {\n  value?: string;\n  formFieldAppearance?: MatFormFieldAppearance;\n  addQueryToURLParams?: boolean;\n  disableAutocomplete?: boolean;\n  asyncSuggestionDataProvider?: (\n    input: SuggestionParameter\n  ) => Observable<string[]>;\n}\n\nexport interface FilterTab {\n  name: string;\n  viewName: string;\n  icon: string;\n}\n\nexport interface NoResultsConfig {\n  searchKeyword: string;\n  didYouMeanValue: string;\n  alternativeKeywords: string[];\n  alternativeResults: ResultEntry[];\n  contactMailAddress?: string;\n  contactPhoneNumber?: string;\n}\n\nexport interface MetaResultViewConfig {\n  sortingOptions?: SortingOption[];\n  resultViewTypes?: ResultViewType[];\n  selectedResultViewType?: ResultViewType;\n}\nexport interface ResultViewConfig extends MetaResultViewConfig {\n  filterTabs?: FilterTab[];\n}\n",
            "properties": [
                {
                    "name": "default",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "fieldOfResults",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "viewValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SuggestionParameter",
            "id": "interface-SuggestionParameter-60bb7f8c050e1d0482483a1fefc19055",
            "file": "projects/amsui/src/lib/search-service/search.types.ts",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { MatFormFieldAppearance } from '@angular/material/form-field';\n\nexport interface NamedIcon {\n  icon: string;\n  name: string;\n  description?: string;\n}\nexport interface ResultEntry {\n  title: string;\n  description: string;\n  id?: string;\n  avatarImgSrc?: string;\n  avatarIcon?: string;\n  subTitles?: NamedIcon[];\n  tags?: string[];\n  imageSrc?: string;\n  actions?: NamedIcon[];\n  avatarToolTip?: string;\n}\nexport interface ResultEntryActionEvent {\n  actionName: string;\n  entry: ResultEntry;\n}\nexport type ResultViewType = 'grid' | 'list';\nexport interface SearchResultMeta {\n  numFound: number;\n  timeTaken: number;\n  keyword: string;\n  numShowed: number;\n  didYouMeanValue?: string;\n}\nexport type FacetType = 'single' | 'multi';\nexport interface Facet {\n  name: string;\n  screenName: string;\n  entries: FacetEntry[];\n  options: FacetOptions;\n}\nexport interface FacetOptions {\n  facetType?: FacetType;\n  enableSearch?: boolean;\n  icon?: string;\n  showMoreBehaviour?: boolean;\n  showMoreThreshold?: number;\n  collapsed?: boolean;\n  hideNumbers?: boolean;\n  showMoreOpened?: boolean;\n  [key: string]: boolean | number | FacetType | string | undefined;\n}\nexport interface FacetEntry {\n  name: string;\n  numberOfResults: number;\n  viewName: string;\n  selected?: boolean;\n}\nexport interface SelectedFacet {\n  facetName: string;\n  facetEntryName: string;\n}\nexport interface SortingOption {\n  value: string;\n  viewValue: string;\n  default?: boolean;\n  fieldOfResults?: string;\n}\nexport interface SuggestionParameter {\n  keyword: string;\n  numberOfSuggestions: number;\n}\n\nexport interface DefaultConfig {\n  searchFieldConfig: SearchFieldConfig;\n  searchResultMeta: SearchResultMeta;\n  facetOptions: FacetOptions;\n  highlightingActivated: boolean;\n  numberOfSuggestions: number;\n  showMoreWordLimit: number;\n  resultViewConfig: ResultViewConfig;\n  noResultsConfig: NoResultsConfig;\n  metaViewConfig: MetaResultViewConfig;\n}\n\nexport interface VisualFacetState {\n  facetName: string;\n  showMoreOpened: boolean;\n  collapsed: boolean;\n}\nexport interface SearchFieldConfig {\n  value?: string;\n  formFieldAppearance?: MatFormFieldAppearance;\n  addQueryToURLParams?: boolean;\n  disableAutocomplete?: boolean;\n  asyncSuggestionDataProvider?: (\n    input: SuggestionParameter\n  ) => Observable<string[]>;\n}\n\nexport interface FilterTab {\n  name: string;\n  viewName: string;\n  icon: string;\n}\n\nexport interface NoResultsConfig {\n  searchKeyword: string;\n  didYouMeanValue: string;\n  alternativeKeywords: string[];\n  alternativeResults: ResultEntry[];\n  contactMailAddress?: string;\n  contactPhoneNumber?: string;\n}\n\nexport interface MetaResultViewConfig {\n  sortingOptions?: SortingOption[];\n  resultViewTypes?: ResultViewType[];\n  selectedResultViewType?: ResultViewType;\n}\nexport interface ResultViewConfig extends MetaResultViewConfig {\n  filterTabs?: FilterTab[];\n}\n",
            "properties": [
                {
                    "name": "keyword",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "numberOfSuggestions",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "VisualFacetState",
            "id": "interface-VisualFacetState-60bb7f8c050e1d0482483a1fefc19055",
            "file": "projects/amsui/src/lib/search-service/search.types.ts",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { MatFormFieldAppearance } from '@angular/material/form-field';\n\nexport interface NamedIcon {\n  icon: string;\n  name: string;\n  description?: string;\n}\nexport interface ResultEntry {\n  title: string;\n  description: string;\n  id?: string;\n  avatarImgSrc?: string;\n  avatarIcon?: string;\n  subTitles?: NamedIcon[];\n  tags?: string[];\n  imageSrc?: string;\n  actions?: NamedIcon[];\n  avatarToolTip?: string;\n}\nexport interface ResultEntryActionEvent {\n  actionName: string;\n  entry: ResultEntry;\n}\nexport type ResultViewType = 'grid' | 'list';\nexport interface SearchResultMeta {\n  numFound: number;\n  timeTaken: number;\n  keyword: string;\n  numShowed: number;\n  didYouMeanValue?: string;\n}\nexport type FacetType = 'single' | 'multi';\nexport interface Facet {\n  name: string;\n  screenName: string;\n  entries: FacetEntry[];\n  options: FacetOptions;\n}\nexport interface FacetOptions {\n  facetType?: FacetType;\n  enableSearch?: boolean;\n  icon?: string;\n  showMoreBehaviour?: boolean;\n  showMoreThreshold?: number;\n  collapsed?: boolean;\n  hideNumbers?: boolean;\n  showMoreOpened?: boolean;\n  [key: string]: boolean | number | FacetType | string | undefined;\n}\nexport interface FacetEntry {\n  name: string;\n  numberOfResults: number;\n  viewName: string;\n  selected?: boolean;\n}\nexport interface SelectedFacet {\n  facetName: string;\n  facetEntryName: string;\n}\nexport interface SortingOption {\n  value: string;\n  viewValue: string;\n  default?: boolean;\n  fieldOfResults?: string;\n}\nexport interface SuggestionParameter {\n  keyword: string;\n  numberOfSuggestions: number;\n}\n\nexport interface DefaultConfig {\n  searchFieldConfig: SearchFieldConfig;\n  searchResultMeta: SearchResultMeta;\n  facetOptions: FacetOptions;\n  highlightingActivated: boolean;\n  numberOfSuggestions: number;\n  showMoreWordLimit: number;\n  resultViewConfig: ResultViewConfig;\n  noResultsConfig: NoResultsConfig;\n  metaViewConfig: MetaResultViewConfig;\n}\n\nexport interface VisualFacetState {\n  facetName: string;\n  showMoreOpened: boolean;\n  collapsed: boolean;\n}\nexport interface SearchFieldConfig {\n  value?: string;\n  formFieldAppearance?: MatFormFieldAppearance;\n  addQueryToURLParams?: boolean;\n  disableAutocomplete?: boolean;\n  asyncSuggestionDataProvider?: (\n    input: SuggestionParameter\n  ) => Observable<string[]>;\n}\n\nexport interface FilterTab {\n  name: string;\n  viewName: string;\n  icon: string;\n}\n\nexport interface NoResultsConfig {\n  searchKeyword: string;\n  didYouMeanValue: string;\n  alternativeKeywords: string[];\n  alternativeResults: ResultEntry[];\n  contactMailAddress?: string;\n  contactPhoneNumber?: string;\n}\n\nexport interface MetaResultViewConfig {\n  sortingOptions?: SortingOption[];\n  resultViewTypes?: ResultViewType[];\n  selectedResultViewType?: ResultViewType;\n}\nexport interface ResultViewConfig extends MetaResultViewConfig {\n  filterTabs?: FilterTab[];\n}\n",
            "properties": [
                {
                    "name": "collapsed",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "facetName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "showMoreOpened",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 86
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "SearchService",
            "id": "injectable-SearchService-a0b3f0f740487e82a63f160ba2e01c5b",
            "file": "projects/amsui/src/lib/search-service/search.service.ts",
            "properties": [
                {
                    "name": "alternativeKeywordsSubject",
                    "defaultValue": "new BehaviorSubject<string[]>(\n    []\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "alternativeResultsSubject",
                    "defaultValue": "new BehaviorSubject<\n    ResultEntry[]\n  >([])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "facetsSubject",
                    "defaultValue": "new BehaviorSubject<Facet[]>([])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "internalSelectedFacets",
                    "defaultValue": "[]",
                    "type": "SelectedFacet[]",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "internalselectedFilters",
                    "defaultValue": "[]",
                    "type": "ResultTypeCriteria[]",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "overlayElementRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "overlayRef",
                    "type": "OverlayRef",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "searchResultMetaSubject",
                    "defaultValue": "new BehaviorSubject<SearchResultMeta>(\n    defaultConfig.searchResultMeta\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "searchResultsSubject",
                    "defaultValue": "new BehaviorSubject<ResultEntry[]>(\n    []\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        112,
                        132
                    ]
                }
            ],
            "methods": [
                {
                    "name": "initOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115
                },
                {
                    "name": "resetSearchResults",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111
                },
                {
                    "name": "setLoadMoreResults",
                    "args": [
                        {
                            "name": "searchResults",
                            "type": "ResultEntry[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "jsdoctags": [
                        {
                            "name": "searchResults",
                            "type": "ResultEntry[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startLoading",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104
                },
                {
                    "name": "stopLoading",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108
                },
                {
                    "name": "toggleSelectedFacet",
                    "args": [
                        {
                            "name": "selectedFacet",
                            "type": "SelectedFacet"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "selectedFacet",
                            "type": "SelectedFacet",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { ElementRef, Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport {\n  Facet,\n  ResultEntry,\n  SearchResultMeta,\n  SelectedFacet,\n} from './search.types';\nimport {\n  ConnectionPositionPair,\n  Overlay,\n  OverlayRef,\n} from '@angular/cdk/overlay';\nimport { OverlayLoaderComponent } from '../overlay-loader/overlay-loader.component';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ResultTypeCriteria } from '../solr-service/solr.types';\nimport { defaultConfig } from '../default.config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchService {\n  private readonly searchResultsSubject = new BehaviorSubject<ResultEntry[]>(\n    []\n  );\n  private readonly searchResultMetaSubject = new BehaviorSubject<SearchResultMeta>(\n    defaultConfig.searchResultMeta\n  );\n  private readonly facetsSubject = new BehaviorSubject<Facet[]>([]);\n  private readonly alternativeKeywordsSubject = new BehaviorSubject<string[]>(\n    []\n  );\n  private readonly alternativeResultsSubject = new BehaviorSubject<\n    ResultEntry[]\n  >([]);\n  private internalSelectedFacets: SelectedFacet[] = [];\n  private internalselectedFilters: ResultTypeCriteria[] = [];\n  private overlayRef!: OverlayRef;\n  private overlayElementRef!: ElementRef;\n\n  constructor(private readonly overlay: Overlay) {}\n\n  get searchResults$(): Observable<ResultEntry[]> {\n    return this.searchResultsSubject.asObservable();\n  }\n  set searchResults(searchResults: ResultEntry[]) {\n    this.searchResultsSubject.next(searchResults);\n  }\n  get searchResultMeta$(): Observable<SearchResultMeta> {\n    return this.searchResultMetaSubject.asObservable();\n  }\n  set searchResultMeta(searchResultMeta: SearchResultMeta) {\n    this.searchResultMetaSubject.next(searchResultMeta);\n  }\n  get facets$(): Observable<Facet[]> {\n    return this.facetsSubject.asObservable();\n  }\n  set facets(facets: Facet[]) {\n    this.facetsSubject.next(facets);\n  }\n  get selectedFacets(): SelectedFacet[] {\n    return this.internalSelectedFacets;\n  }\n  set selectedFacets(selectedFacets: SelectedFacet[]) {\n    this.internalSelectedFacets = selectedFacets;\n  }\n  get selectedFilters(): ResultTypeCriteria[] {\n    return this.internalselectedFilters;\n  }\n  set selectedFilters(selectedFilters: ResultTypeCriteria[]) {\n    this.internalselectedFilters = selectedFilters;\n  }\n  get overlayElement(): ElementRef {\n    return this.overlayElementRef;\n  }\n  set overlayElement(overlayElement: ElementRef) {\n    this.overlayElementRef = overlayElement;\n  }\n  get alternativeKeywords$(): Observable<string[]> {\n    return this.alternativeKeywordsSubject.asObservable();\n  }\n  set alternativeKeywords(alternativeKeywords: string[]) {\n    this.alternativeKeywordsSubject.next(alternativeKeywords);\n  }\n  get alternativeResults$(): Observable<ResultEntry[]> {\n    return this.alternativeResultsSubject.asObservable();\n  }\n  set alternativeResults(alternativeResults: ResultEntry[]) {\n    this.alternativeResultsSubject.next(alternativeResults);\n  }\n\n  toggleSelectedFacet(selectedFacet: SelectedFacet): void {\n    const indexOfFacet = this.internalSelectedFacets.findIndex(\n      (facet) =>\n        facet.facetEntryName === selectedFacet.facetEntryName &&\n        facet.facetName === selectedFacet.facetName\n    );\n    if (indexOfFacet >= 0) {\n      this.internalSelectedFacets.splice(indexOfFacet, 1);\n    } else {\n      this.internalSelectedFacets.push(selectedFacet);\n    }\n  }\n  startLoading(): void {\n    this.initOverlay();\n    this.overlayRef.attach(new ComponentPortal(OverlayLoaderComponent));\n  }\n  stopLoading(): void {\n    this.overlayRef.dispose();\n  }\n  resetSearchResults(): void {\n    this.searchResults = [];\n    this.searchResultMeta = defaultConfig.searchResultMeta;\n  }\n  initOverlay(): void {\n    if (this.overlayElementRef) {\n      this.overlayRef = this.overlay.create({\n        positionStrategy: this.overlay\n          .position()\n          .flexibleConnectedTo(this.overlayElementRef)\n          .withPositions([\n            new ConnectionPositionPair(\n              { originX: 'start', originY: 'top' },\n              { overlayX: 'start', overlayY: 'top' }\n            ),\n          ]),\n        scrollStrategy: this.overlay.scrollStrategies.block(),\n        hasBackdrop: true,\n        disposeOnNavigation: true,\n        panelClass: 'modal',\n        backdropClass: 'modal-backdrop',\n      });\n    } else {\n      this.overlayRef = this.overlay.create({\n        positionStrategy: this.overlay.position().global(),\n        scrollStrategy: this.overlay.scrollStrategies.block(),\n        hasBackdrop: true,\n        disposeOnNavigation: true,\n        panelClass: 'modal',\n        backdropClass: 'modal-backdrop',\n      });\n    }\n  }\n  setLoadMoreResults(searchResults: ResultEntry[]): void {\n    this.searchResultsSubject.next(\n      this.searchResultsSubject.getValue().concat(searchResults)\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "overlay",
                        "type": "Overlay"
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "searchResults$": {
                    "name": "searchResults$",
                    "getSignature": {
                        "name": "searchResults$",
                        "type": "",
                        "returnType": "Observable<ResultEntry[]>",
                        "line": 43
                    }
                },
                "searchResults": {
                    "name": "searchResults",
                    "setSignature": {
                        "name": "searchResults",
                        "type": "void",
                        "args": [
                            {
                                "name": "searchResults",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 46,
                        "jsdoctags": [
                            {
                                "name": "searchResults",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "searchResultMeta$": {
                    "name": "searchResultMeta$",
                    "getSignature": {
                        "name": "searchResultMeta$",
                        "type": "",
                        "returnType": "Observable<SearchResultMeta>",
                        "line": 49
                    }
                },
                "searchResultMeta": {
                    "name": "searchResultMeta",
                    "setSignature": {
                        "name": "searchResultMeta",
                        "type": "void",
                        "args": [
                            {
                                "name": "searchResultMeta",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 52,
                        "jsdoctags": [
                            {
                                "name": "searchResultMeta",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "facets$": {
                    "name": "facets$",
                    "getSignature": {
                        "name": "facets$",
                        "type": "",
                        "returnType": "Observable<Facet[]>",
                        "line": 55
                    }
                },
                "facets": {
                    "name": "facets",
                    "setSignature": {
                        "name": "facets",
                        "type": "void",
                        "args": [
                            {
                                "name": "facets",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 58,
                        "jsdoctags": [
                            {
                                "name": "facets",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "selectedFacets": {
                    "name": "selectedFacets",
                    "setSignature": {
                        "name": "selectedFacets",
                        "type": "void",
                        "args": [
                            {
                                "name": "selectedFacets",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 64,
                        "jsdoctags": [
                            {
                                "name": "selectedFacets",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "selectedFacets",
                        "type": "[]",
                        "returnType": "SelectedFacet[]",
                        "line": 61
                    }
                },
                "selectedFilters": {
                    "name": "selectedFilters",
                    "setSignature": {
                        "name": "selectedFilters",
                        "type": "void",
                        "args": [
                            {
                                "name": "selectedFilters",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 70,
                        "jsdoctags": [
                            {
                                "name": "selectedFilters",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "selectedFilters",
                        "type": "[]",
                        "returnType": "ResultTypeCriteria[]",
                        "line": 67
                    }
                },
                "overlayElement": {
                    "name": "overlayElement",
                    "setSignature": {
                        "name": "overlayElement",
                        "type": "void",
                        "args": [
                            {
                                "name": "overlayElement",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 76,
                        "jsdoctags": [
                            {
                                "name": "overlayElement",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "overlayElement",
                        "type": "",
                        "returnType": "ElementRef",
                        "line": 73
                    }
                },
                "alternativeKeywords$": {
                    "name": "alternativeKeywords$",
                    "getSignature": {
                        "name": "alternativeKeywords$",
                        "type": "",
                        "returnType": "Observable<string[]>",
                        "line": 79
                    }
                },
                "alternativeKeywords": {
                    "name": "alternativeKeywords",
                    "setSignature": {
                        "name": "alternativeKeywords",
                        "type": "void",
                        "args": [
                            {
                                "name": "alternativeKeywords",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 82,
                        "jsdoctags": [
                            {
                                "name": "alternativeKeywords",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "alternativeResults$": {
                    "name": "alternativeResults$",
                    "getSignature": {
                        "name": "alternativeResults$",
                        "type": "",
                        "returnType": "Observable<ResultEntry[]>",
                        "line": 85
                    }
                },
                "alternativeResults": {
                    "name": "alternativeResults",
                    "setSignature": {
                        "name": "alternativeResults",
                        "type": "void",
                        "args": [
                            {
                                "name": "alternativeResults",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 88,
                        "jsdoctags": [
                            {
                                "name": "alternativeResults",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "SolrService",
            "id": "injectable-SolrService-67aaa0cdba190f879e43e1c5dab4ed8e",
            "file": "projects/amsui/src/lib/solr-service/solr.service.ts",
            "properties": [
                {
                    "name": "facetsConfig",
                    "defaultValue": "[]",
                    "type": "FacetConfigSolr[]",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "filterViews",
                    "defaultValue": "[]",
                    "type": "FilterTab[]",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "highlightFields",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "lastSearchResults",
                    "defaultValue": "[]",
                    "type": "ResultEntry[]",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "numberOfResults",
                    "defaultValue": "20",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "numOfFound",
                    "defaultValue": "-1",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "offset",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "requestDebounceTime",
                    "defaultValue": "500",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "resultTypesConfig",
                    "defaultValue": "{}",
                    "type": "ResultTypesConfig",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "searchResults$",
                    "type": "Observable<SearchResultsSolr | null>",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "searchResultsSubscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "selectedFacets",
                    "defaultValue": "[]",
                    "type": "SelectedFacet[]",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "solrSearchURL",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "solrSuggestURL",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "suggestions",
                    "defaultValue": "[\n    'Wissen',\n    'Wissensmanagement',\n    'Wissensmanager',\n    'Wissensträger',\n    'Wissenstransfer',\n    'Mein Wissen',\n    'Unser Wissen',\n    'Dein Wissen',\n    'Besserwisser',\n    'Natural Language Processing',\n    'NLP',\n    'Management',\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        113
                    ]
                }
            ],
            "methods": [
                {
                    "name": "adjustParamsToChangedFilter",
                    "args": [
                        {
                            "name": "filterName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "jsdoctags": [
                        {
                            "name": "filterName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkIfType",
                    "args": [
                        {
                            "name": "doc",
                            "type": "any"
                        },
                        {
                            "name": "typeName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 369,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "doc",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "typeName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "escapeSolrQuery",
                    "args": [
                        {
                            "name": "query",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 247,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "facetConfigToObject",
                    "args": [
                        {
                            "name": "facetsConfig",
                            "type": "FacetConfigSolr[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 382,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "facetsConfig",
                            "type": "FacetConfigSolr[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fakeAlternativePopularKeywords",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 332,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "fakeAlternativeResults",
                    "args": [],
                    "optional": false,
                    "returnType": "ResultEntry[]",
                    "typeParameters": [],
                    "line": 335,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "fakeDidYouMean",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 415,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "fakeSearchSuggestions",
                    "args": [
                        {
                            "name": "input",
                            "type": "SuggestionParameter"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string[]>",
                    "typeParameters": [],
                    "line": 88,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "SuggestionParameter",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFiltersForView",
                    "args": [],
                    "optional": false,
                    "returnType": "FilterTab[]",
                    "typeParameters": [],
                    "line": 106
                },
                {
                    "name": "getHighlightedField",
                    "args": [
                        {
                            "name": "doc",
                            "type": "any"
                        },
                        {
                            "name": "highlights",
                            "type": "Highlighting"
                        },
                        {
                            "name": "field",
                            "type": "string"
                        },
                        {
                            "name": "docKey",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 124,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "doc",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "highlights",
                            "type": "Highlighting",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "field",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "docKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSearchSuggestions",
                    "args": [
                        {
                            "name": "input",
                            "type": "SuggestionParameter"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string[]>",
                    "typeParameters": [],
                    "line": 339,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "SuggestionParameter",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSolrParams",
                    "args": [
                        {
                            "name": "keyword",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpParams",
                    "typeParameters": [],
                    "line": 143,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "keyword",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSortingOptions",
                    "args": [
                        {
                            "name": "filterName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "SortingOption[]",
                    "typeParameters": [],
                    "line": 102,
                    "jsdoctags": [
                        {
                            "name": "filterName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadMore",
                    "args": [
                        {
                            "name": "keyword",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "jsdoctags": [
                        {
                            "name": "keyword",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69
                },
                {
                    "name": "search",
                    "args": [
                        {
                            "name": "keyword",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "jsdoctags": [
                        {
                            "name": "keyword",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchSolrRequest",
                    "args": [
                        {
                            "name": "keyword",
                            "type": "string"
                        },
                        {
                            "name": "loadMoreRequest",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<SearchResultsSolr | null>",
                    "typeParameters": [],
                    "line": 210,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "keyword",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "loadMoreRequest",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transformFacets",
                    "args": [
                        {
                            "name": "searchResultFacets",
                            "type": "SearchResultFacets"
                        }
                    ],
                    "optional": false,
                    "returnType": "Facet[]",
                    "typeParameters": [],
                    "line": 251,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "searchResultFacets",
                            "type": "SearchResultFacets",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transformSearchResults",
                    "args": [
                        {
                            "name": "docs",
                            "type": "any[]"
                        },
                        {
                            "name": "highlights",
                            "type": "Highlighting"
                        }
                    ],
                    "optional": false,
                    "returnType": "ResultEntry[]",
                    "typeParameters": [],
                    "line": 64,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "docs",
                            "type": "any[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "highlights",
                            "type": "Highlighting",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transformSearchResultsMetaInformation",
                    "args": [
                        {
                            "name": "searchResultsSolr",
                            "type": "SearchResultsSolr"
                        }
                    ],
                    "optional": false,
                    "returnType": "SearchResultMeta",
                    "typeParameters": [],
                    "line": 234,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "searchResultsSolr",
                            "type": "SearchResultsSolr",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transformSolrResponse",
                    "args": [
                        {
                            "name": "loadMoreRequest",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 290,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "loadMoreRequest",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "typeData",
                    "args": [
                        {
                            "name": "typeName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "ResultTypeData",
                    "typeParameters": [],
                    "line": 361,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "typeName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, OnDestroy } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { catchError, delay, map, timeout } from 'rxjs/operators';\nimport { Observable, of, Subscription } from 'rxjs';\nimport {\n  FacetConfigSolr,\n  Highlighting,\n  ResultTypeData,\n  ResultTypesConfig,\n  SearchResultFacet,\n  SearchResultFacets,\n  SearchResultsSolr,\n} from './solr.types';\nimport {\n  Facet,\n  FacetEntry,\n  FilterTab,\n  ResultEntry,\n  SearchResultMeta,\n  SelectedFacet,\n  SortingOption,\n  SuggestionParameter,\n} from '../search-service/search.types';\nimport { SearchService } from '../search-service/search.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class SolrService implements OnDestroy {\n  protected filterViews: FilterTab[] = [];\n  protected resultTypesConfig: ResultTypesConfig = {};\n  protected searchResults$!: Observable<SearchResultsSolr | null>;\n  protected searchResultsSubscription!: Subscription;\n  protected solrSearchURL = '';\n  protected solrSuggestURL = '';\n  protected numOfFound = -1;\n  protected requestDebounceTime = 500;\n  protected numberOfResults = 20;\n  protected offset = 0;\n  protected highlightFields: string[] = [];\n  protected facetsConfig: FacetConfigSolr[] = [];\n  protected selectedFacets: SelectedFacet[] = [];\n  protected lastSearchResults: ResultEntry[] = [];\n  protected suggestions = [\n    'Wissen',\n    'Wissensmanagement',\n    'Wissensmanager',\n    'Wissensträger',\n    'Wissenstransfer',\n    'Mein Wissen',\n    'Unser Wissen',\n    'Dein Wissen',\n    'Besserwisser',\n    'Natural Language Processing',\n    'NLP',\n    'Management',\n  ];\n\n  protected constructor(\n    protected readonly http: HttpClient,\n    protected readonly searchService: SearchService\n  ) {}\n\n  protected abstract transformSearchResults(\n    docs: any[],\n    highlights: Highlighting\n  ): ResultEntry[];\n\n  ngOnDestroy(): void {\n    this.searchResultsSubscription.unsubscribe();\n  }\n\n  search(keyword: string): void {\n    this.searchService.resetSearchResults();\n    this.offset = 0;\n    this.searchResults$ = this.searchSolrRequest(keyword);\n    this.transformSolrResponse();\n  }\n\n  loadMore(keyword: string): void {\n    if (this.numOfFound > this.offset + this.numberOfResults) {\n      this.offset += this.numberOfResults;\n      this.searchResults$ = this.searchSolrRequest(keyword, true);\n      this.transformSolrResponse(true);\n    }\n  }\n\n  fakeSearchSuggestions(input: SuggestionParameter): Observable<string[]> {\n    const filteredSuggestions = this.suggestions\n      .filter((option) =>\n        option.toLowerCase().includes(input.keyword.toLowerCase())\n      )\n      .slice(0, input.numberOfSuggestions);\n    return of(filteredSuggestions).pipe(delay(300));\n  }\n  adjustParamsToChangedFilter(filterName: string): void {\n    this.facetsConfig = this.resultTypesConfig?.[filterName]?.facets || [];\n    this.searchService.selectedFilters =\n      this.resultTypesConfig?.[filterName]?.typeCriterias || [];\n  }\n\n  getSortingOptions(filterName: string): SortingOption[] {\n    return this.resultTypesConfig?.[filterName]?.sortingOptions || [];\n  }\n\n  getFiltersForView(): FilterTab[] {\n    if (this.filterViews.length <= 0) {\n      const filterViews: FilterTab[] = [];\n      for (const key of Object.keys(this.resultTypesConfig)) {\n        const filterObject = this.resultTypesConfig[key];\n        if (filterObject) {\n          filterViews.push({\n            name: key,\n            viewName: filterObject.name,\n            icon: filterObject.avatarIcon,\n          });\n        }\n      }\n      this.filterViews = filterViews;\n    }\n    return this.filterViews;\n  }\n\n  protected getHighlightedField(\n    doc: any,\n    highlights: Highlighting,\n    field: string,\n    docKey: string\n  ): string {\n    if (highlights && highlights[docKey] && highlights[docKey][field]) {\n      const highlightedField = highlights[docKey][field];\n      if (Array.isArray(highlightedField)) {\n        return highlightedField.join('');\n      }\n      return highlightedField;\n    }\n    if (Array.isArray(doc[field])) {\n      return doc[field].join('');\n    }\n    return doc[field];\n  }\n\n  protected getSolrParams(keyword: string): HttpParams {\n    const facetConfigObject = this.facetConfigToObject(this.facetsConfig);\n    const selectedFacetsMap = new Map();\n    this.searchService.selectedFacets.forEach((facet) => {\n      const facetConfig = this.facetsConfig.filter(\n        (facetConfigElement) => facetConfigElement.name === facet.facetName\n      )[0];\n      let facetName = facetConfigObject[facet.facetName].field;\n      if (facetConfig?.facetOptions?.facetType === 'multi') {\n        facetName = `{!tag=tag${facetConfigObject[facet.facetName].field}}${\n          facetConfigObject[facet.facetName].field\n        }`;\n      }\n      if (selectedFacetsMap.has(facetName)) {\n        selectedFacetsMap.set(facetName, [\n          ...selectedFacetsMap.get(facetName),\n          `${this.escapeSolrQuery(facet.facetEntryName)}`,\n        ]);\n      } else {\n        selectedFacetsMap.set(facetName, [\n          `${this.escapeSolrQuery(facet.facetEntryName)}`,\n        ]);\n      }\n    });\n    const filterQueryElementsForParam = [];\n    for (const filter of this.searchService.selectedFilters) {\n      if (filter.value.length > 1) {\n        filterQueryElementsForParam.push(\n          `${filter.field}:(${filter.value.join(' OR ')})`\n        );\n      } else {\n        filterQueryElementsForParam.push(`${filter.field}:${filter.value}`);\n      }\n    }\n    for (const [key, value] of selectedFacetsMap) {\n      if (value.length > 1) {\n        filterQueryElementsForParam.push(`${key}:(${value.join(' OR ')})`);\n      } else {\n        filterQueryElementsForParam.push(`${key}:${value}`);\n      }\n    }\n\n    const params = {\n      q: keyword,\n      'q.op': 'AND',\n      'json.facet': JSON.stringify(facetConfigObject),\n      rows: this.numberOfResults,\n      start: this.offset,\n      hl: true,\n      queryTopic: keyword,\n      'hl.fl': this.highlightFields,\n      'hl.fragsize': -1,\n      'hl.snippets': 10,\n      'hl.usePhraseHighlighter': true,\n      output: 'json',\n    };\n    let httpParams = new HttpParams();\n    filterQueryElementsForParam.forEach(\n      (filter) => (httpParams = httpParams.append('fq', filter))\n    );\n    for (const key of Object.keys(params)) {\n      // @ts-ignore\n      httpParams = httpParams.set(key, params[key]);\n    }\n    return httpParams;\n  }\n\n  protected searchSolrRequest(\n    keyword: string,\n    loadMoreRequest = false\n  ): Observable<SearchResultsSolr | null> {\n    if (!loadMoreRequest) {\n      this.searchService.startLoading();\n    }\n    this.searchResults$ = this.http\n      .get<SearchResultsSolr>(this.solrSearchURL, {\n        params: this.getSolrParams(keyword),\n      })\n      .pipe(\n        delay(this.requestDebounceTime),\n        timeout(10000),\n        catchError(() => {\n          if (!loadMoreRequest) {\n            this.searchService.stopLoading();\n          }\n          return of(null);\n        })\n      );\n    return this.searchResults$;\n  }\n\n  protected transformSearchResultsMetaInformation(\n    searchResultsSolr: SearchResultsSolr\n  ): SearchResultMeta {\n    return {\n      keyword: searchResultsSolr.responseHeader.params.q,\n      numFound: searchResultsSolr.response.numFound,\n      timeTaken:\n        this.requestDebounceTime + searchResultsSolr.responseHeader.QTime,\n      didYouMeanValue: this.fakeDidYouMean(),\n      numShowed: this.offset + this.numberOfResults,\n    } as SearchResultMeta;\n  }\n\n  protected escapeSolrQuery(query: string): string {\n    return query.replace(/([!*+\\-&|()\\[\\]{}^~?:'\" ])/g, `\\\\$1`);\n  }\n\n  protected transformFacets(searchResultFacets: SearchResultFacets): Facet[] {\n    const transformedFacets: Facet[] = [];\n    if (searchResultFacets) {\n      for (const key of Object.keys(searchResultFacets)) {\n        const facetConfig = this.facetsConfig.filter(\n          (facet) => facet.name === key\n        )[0];\n        if (!key.startsWith('count')) {\n          const buckets = (searchResultFacets[key] as SearchResultFacet)\n            .buckets;\n          if (buckets.length > 0) {\n            const facetEntries = [];\n            for (const item of buckets) {\n              facetEntries.push({\n                name: item.val,\n                viewName: !facetConfig.transformFunction\n                  ? item.val\n                  : facetConfig.transformFunction(item.val),\n                numberOfResults: item.count,\n                selected: this.searchService.selectedFacets.some((facet) => {\n                  return (\n                    facet.facetName === key && facet.facetEntryName === item.val\n                  );\n                }),\n              } as FacetEntry);\n            }\n            transformedFacets.push({\n              name: key,\n              screenName: facetConfig.screenName,\n              entries: facetEntries,\n              options: facetConfig.facetOptions,\n            });\n          }\n        }\n      }\n    }\n    return transformedFacets;\n  }\n\n  protected transformSolrResponse(loadMoreRequest = false): void {\n    if (this.searchResults$) {\n      this.searchResultsSubscription = this.searchResults$.subscribe(\n        (searchResults) => {\n          if (searchResults) {\n            this.numOfFound = searchResults.response.numFound;\n            this.searchService.facets = this.transformFacets(\n              searchResults.facets\n            );\n            this.searchService.searchResultMeta = this.transformSearchResultsMetaInformation(\n              searchResults\n            );\n            const results = this.transformSearchResults(\n              searchResults.response.docs,\n              searchResults.highlighting\n            );\n            if (this.offset > 0) {\n              this.searchService.setLoadMoreResults(results);\n            } else {\n              this.searchService.searchResults = results;\n              if (results.length > 0) {\n                this.lastSearchResults = results;\n              }\n            }\n            this.searchService.alternativeResults = this.fakeAlternativeResults();\n            this.searchService.alternativeKeywords = this.fakeAlternativePopularKeywords();\n          }\n        },\n        () => {\n          if (!loadMoreRequest) {\n            this.searchService.stopLoading();\n          }\n        },\n        () => {\n          if (!loadMoreRequest) {\n            this.searchService.stopLoading();\n          }\n        }\n      );\n    }\n  }\n\n  protected fakeAlternativePopularKeywords(): string[] {\n    return this.suggestions;\n  }\n  protected fakeAlternativeResults(): ResultEntry[] {\n    return this.lastSearchResults;\n  }\n\n  getSearchSuggestions(input: SuggestionParameter): Observable<string[]> {\n    const params = new HttpParams()\n      .set('rows', String(input.numberOfSuggestions))\n      .set('q', input.keyword);\n    return this.http\n      .get<any>(this.solrSuggestURL, {\n        params,\n      })\n      .pipe(\n        timeout(10000),\n        delay(300),\n        catchError(() => {\n          return of(null);\n        }),\n        map((response) => {\n          return response?.suggest?.contentSuggester[input.keyword]?.suggestions\n            .map((suggestion: any) => suggestion.payload)\n            .slice(0, input.numberOfSuggestions);\n        })\n      );\n  }\n\n  protected typeData(typeName: string): ResultTypeData {\n    const typeObject = this.resultTypesConfig[typeName];\n    return {\n      avatarToolTip: typeObject?.name || '',\n      avatarIcon: typeObject?.avatarIcon || '',\n    };\n  }\n\n  protected checkIfType(doc: any, typeName: string): boolean {\n    const typeObject = this.resultTypesConfig[typeName];\n    if (!typeObject) {\n      return false;\n    }\n    for (const typeCriteria of typeObject.typeCriterias) {\n      if (!typeCriteria.value.includes(doc[typeCriteria.field])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private facetConfigToObject(\n    facetsConfig: FacetConfigSolr[]\n  ): {\n    [key: string]: {\n      type: string;\n      field: string;\n      limit: number;\n      domain?: { excludeTags: string };\n    };\n  } {\n    const facetObjectMap: {\n      [key: string]: {\n        type: string;\n        field: string;\n        limit: number;\n        domain?: { excludeTags: string };\n      };\n    } = {};\n    facetsConfig.forEach((facet) => {\n      facetObjectMap[facet.name] = {\n        type: facet.type,\n        field: facet.field,\n        limit: facet.limit,\n      };\n      if (facet?.facetOptions?.facetType === 'multi') {\n        facetObjectMap[facet.name].domain = {\n          excludeTags: `tag${facet.field}`,\n        };\n      }\n    });\n    return facetObjectMap;\n  }\n\n  private fakeDidYouMean(): string {\n    return Math.random() < 0.5 ? 'Management' : '';\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "searchService",
                        "type": "SearchService"
                    }
                ],
                "line": 57,
                "modifierKind": [
                    113
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "searchService",
                        "type": "SearchService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-ee2067dfb1c303f41003aea7d82d51e0",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FacetConfigSolr",
            "id": "class-FacetConfigSolr-f55929a0bb3cc6b413bf029c9148585f",
            "file": "projects/amsui/src/lib/solr-service/solr.types.ts",
            "type": "class",
            "sourceCode": "import { FacetOptions, SortingOption } from '../search-service/search.types';\n\nexport class FacetConfigSolr {\n  type = 'terms';\n  facetOptions: FacetOptions = {};\n  transformFunction?: (val: string) => any;\n  constructor(\n    public field: string,\n    public limit: number,\n    public screenName: string,\n    public name: string\n  ) {}\n  addFunctionality(\n    addons: FacetOptions,\n    transformFunction?: any\n  ): FacetConfigSolr {\n    for (const key of Object.keys(addons)) {\n      this.facetOptions[key] = addons[key];\n    }\n    this.transformFunction = transformFunction;\n    return this;\n  }\n}\n\nexport interface SearchResultFacetEntry {\n  val: string;\n  count: number;\n}\nexport interface SearchResultFacet {\n  buckets: SearchResultFacetEntry[];\n}\nexport interface SearchResultFacets {\n  count: number;\n  [key: string]: SearchResultFacet | number;\n}\n\nexport interface SearchResultsSolr {\n  facets: SearchResultFacets;\n  responseHeader: ResponseHeader;\n  response: Response;\n  highlighting: Highlighting;\n}\n\nexport interface Highlighting {\n  [key: string]: any;\n}\n\nexport interface Response {\n  numFound: number;\n  start: number;\n  numFoundExact: boolean;\n  docs: any[];\n}\n\nexport interface ResponseHeader {\n  status: number;\n  QTime: number;\n  params: Params;\n}\n\nexport interface Params {\n  'hl.snippets': string;\n  q: string;\n  'json.facet': string;\n  hl: string;\n  start: string;\n  'hl.fragsize': string;\n  'hl.usePhraseHighlighter': string;\n  'q.op': string;\n  queryTopic: string;\n  fq: string;\n  'hl.fl': string;\n  rows: string;\n}\n\nexport interface ResultTypesConfig {\n  all?: ResultType;\n  events?: ResultType;\n  documents?: ResultType;\n  persons?: ResultType;\n  places?: ResultType;\n  downloads?: ResultType;\n  [key: string]: ResultType | undefined;\n}\n\nexport interface ResultType {\n  name: string;\n  avatarIcon: string;\n  facets: FacetConfigSolr[];\n  sortingOptions: SortingOption[];\n  typeCriterias: ResultTypeCriteria[];\n}\n\nexport interface ResultTypeCriteria {\n  field: string;\n  value: string[];\n}\n\nexport interface ResultTypeData {\n  avatarToolTip: string;\n  avatarIcon: string;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "field",
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "type": "number"
                    },
                    {
                        "name": "screenName",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "field",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "limit",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenName",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "facetOptions",
                    "defaultValue": "{}",
                    "type": "FacetOptions",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "field",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "limit",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "screenName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "transformFunction",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "type",
                    "defaultValue": "'terms'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "addFunctionality",
                    "args": [
                        {
                            "name": "addons",
                            "type": "FacetOptions"
                        },
                        {
                            "name": "transformFunction",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "FacetConfigSolr",
                    "typeParameters": [],
                    "line": 13,
                    "jsdoctags": [
                        {
                            "name": "addons",
                            "type": "FacetOptions",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "transformFunction",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-c322808ba5f3e9fd4fe56becba3fd525",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "origin",
                    "type": "CdkOverlayOrigin",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "CdkOverlayOrigin"
                        }
                    ]
                },
                {
                    "name": "searchFieldConfig",
                    "defaultValue": "{\n    asyncSuggestionDataProvider: this.fakeSearchSuggestions.bind(this),\n  }",
                    "type": "SearchFieldConfig",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "searchKeyword",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "title",
                    "defaultValue": "'Angular Material Search UI - AMSUI'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "fakeSearchSuggestions",
                    "args": [
                        {
                            "name": "input",
                            "type": "SuggestionParameter"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string[]>",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "SuggestionParameter",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSearchEvent",
                    "args": [
                        {
                            "name": "searchKeyword",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "jsdoctags": [
                        {
                            "name": "searchKeyword",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ViewChild } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { SuggestionParameter, SearchFieldConfig } from '@redlink/amsui';\nimport { CdkOverlayOrigin } from '@angular/cdk/overlay';\nimport { TranslateService } from '@ngx-translate/core';\nimport { delay } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  @ViewChild(CdkOverlayOrigin) origin!: CdkOverlayOrigin;\n  title = 'Angular Material Search UI - AMSUI';\n  searchKeyword = '';\n  searchFieldConfig: SearchFieldConfig = {\n    asyncSuggestionDataProvider: this.fakeSearchSuggestions.bind(this),\n  };\n\n  constructor(private readonly translateService: TranslateService) {\n    this.translateService.setDefaultLang('de');\n    this.translateService.use('en');\n  }\n\n  handleSearchEvent(searchKeyword: string): void {\n    this.searchKeyword = searchKeyword;\n    alert('You searched for ' + searchKeyword);\n  }\n  fakeSearchSuggestions(input: SuggestionParameter): Observable<string[]> {\n    const filteredSuggestions = [\n      'Knowledge',\n      'Knowledge management',\n      'Knowledge officer',\n      'My knowledge',\n      'Your knowledge',\n      'Your knowledge',\n      'Natural Language Processing',\n      'NLP',\n      'Management',\n      'Solr',\n      'Amsui',\n    ]\n      .filter((option) =>\n        option.toLowerCase().includes(input.keyword.toLowerCase())\n      )\n      .slice(0, input.numberOfSuggestions);\n    return of(filteredSuggestions).pipe(delay(300));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translateService",
                        "type": "TranslateService"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<amsui-search-field\n  [config]=\"searchFieldConfig\"\n  (searchEvent)=\"handleSearchEvent($event)\"\n></amsui-search-field>\n"
        },
        {
            "name": "DidYouMeanComponent",
            "id": "component-DidYouMeanComponent-b0948edb0b5a34cdcdebd95c4bb51fe3",
            "file": "projects/amsui/src/lib/search-result-meta/did-you-mean/did-you-mean.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amsui-did-you-mean",
            "styleUrls": [
                "./did-you-mean.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./did-you-mean.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "didYouMeanText",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "line": 9
                }
            ],
            "outputsClass": [
                {
                    "name": "didYouMeanEvent",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "didYouMeanClick",
                    "args": [
                        {
                            "name": "didYouMeanValue",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "didYouMeanValue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Output, EventEmitter, Input } from '@angular/core';\n\n@Component({\n  selector: 'amsui-did-you-mean',\n  templateUrl: './did-you-mean.component.html',\n  styleUrls: ['./did-you-mean.component.scss'],\n})\nexport class DidYouMeanComponent {\n  @Input() value = '';\n  @Input() didYouMeanText?: string;\n  @Output() didYouMeanEvent = new EventEmitter<string>();\n\n  constructor() {}\n\n  didYouMeanClick(didYouMeanValue: string): void {\n    this.didYouMeanEvent.emit(didYouMeanValue);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "p.did-you-mean {\n  margin: 0;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./did-you-mean.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "templateData": "<p class=\"did-you-mean\" *ngIf=\"value\">\n  {{ didYouMeanText ? didYouMeanText : (\"didYouMean.text\" | translate) }}\n  <a class=\"underline-link\" (click)=\"didYouMeanClick(value)\">{{ value }}</a>\n</p>\n"
        },
        {
            "name": "FacetComponent",
            "id": "component-FacetComponent-00e46f777febd7ff7096fe7262cbb506",
            "file": "projects/amsui/src/lib/facets/facet/facet.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amsui-facet",
            "styleUrls": [
                "./facet.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./facet.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "addToURLParams",
                    "defaultValue": "true",
                    "description": "<p>Let you decide if the search query is inserted into the URL params</p>\n",
                    "line": 22
                },
                {
                    "name": "facetText",
                    "line": 33,
                    "type": "FacetText"
                },
                {
                    "name": "inputFacet",
                    "line": 23,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "facetSelectedEvent",
                    "defaultValue": "new EventEmitter<SelectedFacet>()",
                    "line": 35,
                    "type": "EventEmitter"
                },
                {
                    "name": "facetVisualStateChange",
                    "defaultValue": "new EventEmitter<VisualFacetState>()",
                    "line": 37,
                    "type": "EventEmitter"
                },
                {
                    "name": "unselectAll",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 36,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "facet",
                    "type": "Facet",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "searchEntries",
                    "defaultValue": "[]",
                    "type": "FacetEntry[]",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "searchValue",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [
                {
                    "name": "checkSearchOccurrence",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 115
                },
                {
                    "name": "facetSelected",
                    "args": [
                        {
                            "name": "facetEntry",
                            "type": "FacetEntry"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "jsdoctags": [
                        {
                            "name": "facetEntry",
                            "type": "FacetEntry",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFacetEntries",
                    "args": [],
                    "optional": false,
                    "returnType": "FacetEntry[]",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "getNumberOfSelectedEntries",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 111
                },
                {
                    "name": "getSingleFacetEntryText",
                    "args": [
                        {
                            "name": "facetEntry",
                            "type": "FacetEntry"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 126,
                    "jsdoctags": [
                        {
                            "name": "facetEntry",
                            "type": "FacetEntry",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleClickOnCard",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchValueChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104
                },
                {
                    "name": "sortViaSelectionAndNumberOfResultsAndName",
                    "args": [
                        {
                            "name": "entries",
                            "type": "FacetEntry[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "FacetEntry[]",
                    "typeParameters": [],
                    "line": 132,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "entries",
                            "type": "FacetEntry[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "visualStateChange",
                    "args": [
                        {
                            "name": "showMoreOpened",
                            "type": "boolean | undefined"
                        },
                        {
                            "name": "collapsed",
                            "type": "boolean | undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "jsdoctags": [
                        {
                            "name": "showMoreOpened",
                            "type": "boolean | undefined",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collapsed",
                            "type": "boolean | undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport type {\n  Facet,\n  FacetEntry,\n  FacetOptions,\n  SelectedFacet,\n  VisualFacetState,\n} from '../../search-service/search.types';\nimport { defaultConfig } from '../../default.config';\nimport { handleFacetQueryParam } from '../../search-params.util';\nimport type { FacetText } from '../../text.types';\n\n@Component({\n  selector: 'amsui-facet',\n  templateUrl: './facet.component.html',\n  styleUrls: ['./facet.component.scss'],\n})\nexport class FacetComponent {\n  /**\n   * Let you decide if the search query is inserted into the URL params\n   */\n  @Input() addToURLParams = true;\n  @Input() set inputFacet(facet: Facet) {\n    const options: FacetOptions = {\n      ...defaultConfig.facetOptions,\n      ...facet.options,\n    };\n    facet.entries = this.sortViaSelectionAndNumberOfResultsAndName(\n      facet.entries\n    );\n    this.facet = { ...facet, options };\n  }\n  @Input() facetText?: FacetText;\n\n  @Output() facetSelectedEvent = new EventEmitter<SelectedFacet>();\n  @Output() unselectAll = new EventEmitter<string>();\n  @Output() facetVisualStateChange = new EventEmitter<VisualFacetState>();\n  facet!: Facet;\n  searchEntries: FacetEntry[] = [];\n  searchValue = '';\n\n  constructor() {}\n\n  getFacetEntries(): FacetEntry[] {\n    if (this.searchValue !== '') {\n      return this.searchEntries;\n    }\n    if (this.facet.options.facetType === 'single') {\n      const selectedEntriesSingleFacet = this.facet.entries.filter(\n        (entry) => entry.selected\n      );\n      if (selectedEntriesSingleFacet.length > 0) {\n        return selectedEntriesSingleFacet;\n      }\n    }\n    if (\n      this.facet.options.showMoreBehaviour &&\n      this.facet.options.showMoreThreshold &&\n      this.facet.entries.length > this.facet.options.showMoreThreshold &&\n      !this.facet.options.showMoreOpened\n    ) {\n      return this.facet.entries.slice(0, this.facet.options.showMoreThreshold);\n    }\n    return this.facet.entries;\n  }\n\n  facetSelected(facetEntry: FacetEntry): void {\n    if (this.addToURLParams) {\n      handleFacetQueryParam(this.facet.name, facetEntry.name);\n    }\n    this.facet.entries = this.sortViaSelectionAndNumberOfResultsAndName(\n      this.facet.entries.map((entry) => {\n        if (entry.name === facetEntry.name) {\n          entry.selected = !entry.selected;\n        }\n        return entry;\n      })\n    );\n    this.facetSelectedEvent.emit({\n      facetName: this.facet.name,\n      facetEntryName: facetEntry.name,\n    });\n  }\n  visualStateChange(\n    showMoreOpened: boolean | undefined,\n    collapsed: boolean | undefined\n  ): void {\n    this.facet.options.showMoreOpened = showMoreOpened || false;\n    this.facet.options.collapsed = collapsed || false;\n    this.facetVisualStateChange.emit({\n      facetName: this.facet.name,\n      showMoreOpened: this.facet.options.showMoreOpened,\n      collapsed: this.facet.options.collapsed,\n    });\n  }\n\n  handleClickOnCard($event: any): void {\n    if ($event.target.nodeName === 'MAT-CARD') {\n      $event.preventDefault();\n      $event.target.children[0].children[0].click();\n    }\n  }\n\n  searchValueChanged(): void {\n    this.searchEntries = this.facet.entries.filter(\n      (facet) =>\n        facet.name.toLowerCase().indexOf(this.searchValue.toLowerCase()) !== -1\n    );\n  }\n\n  getNumberOfSelectedEntries(): number {\n    return this.facet.entries.filter((entry) => entry.selected).length;\n  }\n\n  checkSearchOccurrence(): boolean {\n    if (this.facet.options.enableSearch) {\n      return !(\n        (this.getNumberOfSelectedEntries() > 0 &&\n          this.facet.options.facetType === 'single') ||\n        this.facet.entries.length === 1\n      );\n    }\n    return false;\n  }\n\n  getSingleFacetEntryText(facetEntry: FacetEntry): string {\n    return this.facet.options.hideNumbers\n      ? facetEntry.viewName\n      : `${facetEntry.viewName} (${facetEntry.numberOfResults})`;\n  }\n\n  private sortViaSelectionAndNumberOfResultsAndName(\n    entries: FacetEntry[]\n  ): FacetEntry[] {\n    if (entries.length > 0) {\n      return entries.sort((a, b) => {\n        if (getSortImportance(a) < getSortImportance(b)) {\n          return 1;\n        }\n        if (getSortImportance(a) > getSortImportance(b)) {\n          return -1;\n        }\n\n        if (a.numberOfResults < b.numberOfResults) {\n          return 1;\n        }\n        if (a.numberOfResults > b.numberOfResults) {\n          return -1;\n        }\n        if (a.name > b.name) {\n          return 1;\n        }\n        return -1;\n      });\n    }\n    return entries;\n  }\n}\n\nfunction getSortImportance(entry: FacetEntry): number {\n  return entry.selected ? 1 : 0;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-expansion-panel {\n  margin: 5px 10px;\n  mat-expansion-panel-header {\n    border-bottom-right-radius: 0;\n    border-bottom-left-radius: 0;\n    font-weight: bold;\n    box-shadow: 0px -1px 0px inset lightgrey;\n    mat-panel-title {\n      display: flex;\n      align-items: center;\n      mat-icon {\n        margin-right: 1px;\n      }\n      .facet-header-badge {\n        margin-top: 10px;\n        margin-bottom: 10px;\n      }\n    }\n  }\n  ::ng-deep .mat-expansion-panel-body {\n    padding: 0 10px 10px;\n    margin-top: 5px;\n  }\n  .facet-body {\n    .facet-search {\n      margin-top: 5px;\n      margin-bottom: -15px;\n      .facet-search-field {\n        width: 100%;\n      }\n    }\n    .facet-entries {\n      .facet-entry-single {\n        button {\n          width: 100%;\n          font-weight: normal;\n          padding-right: 3px;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          white-space: nowrap;\n          text-align: left;\n          mat-icon {\n            font-size: 16px;\n            position: absolute;\n            right: 3px;\n            top: 11px;\n          }\n          &:hover {\n            background: var(--primary-color);\n            color: white;\n          }\n        }\n        .single-selected {\n          color: var(--primary-color);\n          .single-text {\n            max-width: 90%;\n            display: inline-block;\n            text-overflow: ellipsis;\n            white-space: nowrap;\n            overflow: hidden;\n          }\n        }\n      }\n    }\n    mat-card.facet-entry {\n      border: none;\n      text-align: left;\n      box-shadow: none;\n      padding: 6px 16px;\n      cursor: pointer;\n\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      &:hover {\n        background: var(--primary-color);\n        color: white;\n      }\n      mat-checkbox {\n        max-width: 100%;\n        ::ng-deep .mat-checkbox-layout {\n          max-width: 100%;\n        }\n        ::ng-deep .mat-checkbox-label {\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n      }\n    }\n    .facet-entry-show-more {\n      border: none;\n      box-shadow: none;\n    }\n    mat-card.no-results:hover {\n      background: none;\n      color: inherit;\n      cursor: default;\n    }\n  }\n}\n",
                    "styleUrl": "./facet.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 40
            },
            "accessors": {
                "inputFacet": {
                    "name": "inputFacet",
                    "setSignature": {
                        "name": "inputFacet",
                        "type": "void",
                        "args": [
                            {
                                "name": "facet",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 23,
                        "jsdoctags": [
                            {
                                "name": "facet",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<mat-expansion-panel\n  *ngIf=\"facet && facet.entries.length > 0\"\n  [expanded]=\"!facet.options.collapsed\"\n  (opened)=\"visualStateChange(facet.options.showMoreOpened, false)\"\n  (closed)=\"visualStateChange(facet.options.showMoreOpened, true)\"\n>\n  <mat-expansion-panel-header>\n    <mat-panel-title>\n      <mat-icon *ngIf=\"facet.options.icon\">{{ facet.options.icon }}</mat-icon>\n      <span\n        [matBadge]=\"getNumberOfSelectedEntries()\"\n        [matBadgeHidden]=\"\n          !facet.options.collapsed || getNumberOfSelectedEntries() === 0\n        \"\n        [matBadgeOverlap]=\"false\"\n        [matBadgeSize]=\"'small'\"\n        matBadgePosition=\"after\"\n        matBadgeColor=\"primary\"\n        class=\"facet-header-badge\"\n        >{{ facet.screenName }}\n      </span>\n    </mat-panel-title>\n  </mat-expansion-panel-header>\n  <div class=\"facet-body\">\n    <div class=\"facet-search\" *ngIf=\"checkSearchOccurrence()\">\n      <mat-form-field class=\"facet-search-field\">\n        <label>\n          <input\n            matInput\n            type=\"text\"\n            placeholder=\"{{\n              facetText?.placeHolderSearchFacet\n                ? facetText.placeHolderSearchFacet\n                : ('facets.facet.placeHolderSearchFacet'\n                  | translate: { facetName: facet.screenName })\n            }}\"\n            [(ngModel)]=\"searchValue\"\n            (ngModelChange)=\"searchValueChanged()\"\n          />\n        </label>\n      </mat-form-field>\n    </div>\n    <div class=\"facet-entries\">\n      <div\n        class=\"facet-entry-single\"\n        *ngIf=\"facet.options.facetType === 'single'\"\n      >\n        <button\n          mat-button\n          [ngClass]=\"{ 'single-selected': facetEntry.selected }\"\n          (click)=\"facetSelected(facetEntry)\"\n          matTooltip=\"{{\n            facetText?.filterRemovalTooltip\n              ? facetText.filterRemovalTooltip\n              : ('facets.facet.filterRemovalTooltip'\n                | translate: { facetEntryName: facetEntry.viewName })\n          }}\"\n          [matTooltipDisabled]=\"!facetEntry.selected\"\n          *ngFor=\"let facetEntry of getFacetEntries()\"\n        >\n          <span class=\"single-text\">{{\n            getSingleFacetEntryText(facetEntry)\n          }}</span>\n          <mat-icon *ngIf=\"facetEntry.selected\">clear</mat-icon>\n        </button>\n      </div>\n      <ng-container *ngIf=\"facet.options.facetType === 'multi'\">\n        <mat-card\n          (click)=\"handleClickOnCard($event)\"\n          *ngFor=\"let facetEntry of getFacetEntries()\"\n          class=\"facet-entry\"\n        >\n          <mat-checkbox\n            (change)=\"facetSelected(facetEntry)\"\n            [checked]=\"facetEntry.selected!\"\n            color=\"primary\"\n          >\n            <span class=\"facet-entry-label\">\n              {{ facetEntry.viewName }}\n              <span *ngIf=\"!facet.options.hideNumbers\"\n                >({{ facetEntry.numberOfResults }})</span\n              >\n            </span>\n          </mat-checkbox>\n        </mat-card>\n      </ng-container>\n    </div>\n    <div>\n      <mat-card\n        class=\"facet-entry-show-more\"\n        *ngIf=\"\n          facet.options.showMoreBehaviour &&\n          facet.options.showMoreThreshold &&\n          facet.entries.length > facet.options.showMoreThreshold &&\n          searchValue === '' &&\n          ((facet.options.facetType === 'single' &&\n            getNumberOfSelectedEntries() === 0) ||\n            facet.options.facetType === 'multi')\n        \"\n      >\n        <button\n          mat-raised-button\n          color=\"accent\"\n          *ngIf=\"!facet.options.showMoreOpened\"\n          (click)=\"visualStateChange(true, facet.options.collapsed)\"\n        >\n          {{\n            facetText?.showMore\n              ? facetText.showMore\n              : (\"facets.facet.showMore\" | translate)\n          }}\n        </button>\n        <button\n          mat-raised-button\n          color=\"accent\"\n          *ngIf=\"facet.options.showMoreOpened\"\n          (click)=\"visualStateChange(false, facet.options.collapsed)\"\n        >\n          {{\n            facetText?.showLess\n              ? facetText.showLess\n              : (\"facets.facet.showLess\" | translate)\n          }}\n        </button>\n      </mat-card>\n      <mat-card\n        class=\"facet-entry no-results\"\n        *ngIf=\"searchValue !== '' && searchEntries.length === 0\"\n      >\n        {{\n          facetText?.noResults\n            ? facetText.noResults\n            : (\"facets.facet.noResults\" | translate)\n        }}\n      </mat-card>\n    </div>\n  </div>\n</mat-expansion-panel>\n"
        },
        {
            "name": "FacetGroupComponent",
            "id": "component-FacetGroupComponent-352f31f3d2844b95f17e4d2fd8df2bfe",
            "file": "projects/amsui/src/lib/facets/facet-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amsui-facet-group",
            "styleUrls": [
                "./facet-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./facet-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "facetGroupText",
                    "line": 26,
                    "type": "FacetGroupText"
                },
                {
                    "name": "facets",
                    "defaultValue": "[]",
                    "line": 25,
                    "type": "Facet[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "facetSelectedEvent",
                    "defaultValue": "new EventEmitter<SelectedFacet>()",
                    "line": 27,
                    "type": "EventEmitter"
                },
                {
                    "name": "resetFacetsEvent",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 28,
                    "type": "EventEmitter"
                },
                {
                    "name": "unselectOneFacet",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 29,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "accordion",
                    "type": "MatAccordion",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatAccordion"
                        }
                    ]
                },
                {
                    "name": "openPanels",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "selectedFacets",
                    "defaultValue": "[]",
                    "type": "SelectedFacet[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "visualStateFacets",
                    "defaultValue": "[]",
                    "type": "VisualFacetState[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "checkIfAnyFacetIsSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "facetSelected",
                    "args": [
                        {
                            "name": "selectedFacet",
                            "type": "SelectedFacet"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "selectedFacet",
                            "type": "SelectedFacet",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFacetAndVisualAdaptions",
                    "args": [
                        {
                            "name": "facet",
                            "type": "Facet"
                        }
                    ],
                    "optional": false,
                    "returnType": "Facet",
                    "typeParameters": [],
                    "line": 113,
                    "jsdoctags": [
                        {
                            "name": "facet",
                            "type": "Facet",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getToolTipUnfoldButton",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 89
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetFacets",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66
                },
                {
                    "name": "saveVisualState",
                    "args": [
                        {
                            "name": "visualFacetState",
                            "type": "VisualFacetState"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "jsdoctags": [
                        {
                            "name": "visualFacetState",
                            "type": "VisualFacetState",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleUnfoldButton",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84
                },
                {
                    "name": "unselectAllForOneFacet",
                    "args": [
                        {
                            "name": "facetName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "jsdoctags": [
                        {
                            "name": "facetName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { MatAccordion } from '@angular/material/expansion';\nimport {\n  Facet,\n  SelectedFacet,\n  VisualFacetState,\n} from '../search-service/search.types';\nimport { TranslateService } from '@ngx-translate/core';\nimport type { FacetGroupText } from '../text.types';\n\n@Component({\n  selector: 'amsui-facet-group',\n  templateUrl: './facet-group.component.html',\n  styleUrls: ['./facet-group.component.scss'],\n})\nexport class FacetGroupComponent implements OnChanges {\n  @Input() facets: Facet[] = [];\n  @Input() facetGroupText?: FacetGroupText;\n  @Output() facetSelectedEvent = new EventEmitter<SelectedFacet>();\n  @Output() resetFacetsEvent = new EventEmitter<void>();\n  @Output() unselectOneFacet = new EventEmitter<string>();\n  @ViewChild(MatAccordion) accordion!: MatAccordion;\n  selectedFacets: SelectedFacet[] = [];\n  visualStateFacets: VisualFacetState[] = [];\n  openPanels = false;\n\n  constructor(private readonly translateService: TranslateService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.facets && !this.checkIfAnyFacetIsSelected()) {\n      this.selectedFacets = [];\n      this.visualStateFacets = [];\n    }\n  }\n\n  checkIfAnyFacetIsSelected(): boolean {\n    return (\n      this.facets.filter((facet) => {\n        return facet.entries.some((facetEntry) => facetEntry.selected);\n      }).length > 0\n    );\n  }\n\n  facetSelected(selectedFacet: SelectedFacet): void {\n    const indexOfFacet = this.selectedFacets.findIndex(\n      (facet) =>\n        facet.facetEntryName === selectedFacet.facetEntryName &&\n        facet.facetName === selectedFacet.facetName\n    );\n    if (indexOfFacet >= 0) {\n      this.selectedFacets.splice(indexOfFacet, 1);\n    } else {\n      this.selectedFacets.push(selectedFacet);\n    }\n    this.facetSelectedEvent.emit(selectedFacet);\n  }\n\n  resetFacets(): void {\n    this.openPanels = false;\n    this.selectedFacets = [];\n    this.resetFacetsEvent.emit();\n    this.visualStateFacets = [];\n    this.facets = this.facets.map((facet) => ({\n      ...facet,\n      entries: facet.entries.map((facetEntry) => ({\n        ...facetEntry,\n        selected: false,\n      })),\n    }));\n  }\n\n  unselectAllForOneFacet(facetName: string): void {\n    this.unselectOneFacet.emit(facetName);\n  }\n\n  toggleUnfoldButton(): void {\n    this.openPanels ? this.accordion.openAll() : this.accordion.closeAll();\n    this.openPanels = !this.openPanels;\n  }\n\n  getToolTipUnfoldButton(): string {\n    if (this.facetGroupText?.closeAllFacets) {\n      return this.facetGroupText.closeAllFacets;\n    }\n    let transKey = 'facets.closeAllFacets';\n    if (this.openPanels) {\n      if (this.facetGroupText?.openAllFacets) {\n        return this.facetGroupText.openAllFacets;\n      }\n      transKey = 'facets.openAllFacets';\n    }\n    return this.translateService.instant(transKey);\n  }\n\n  saveVisualState(visualFacetState: VisualFacetState): void {\n    const indexOfFacet = this.visualStateFacets.findIndex(\n      (facet) => facet.facetName === visualFacetState.facetName\n    );\n    if (indexOfFacet >= 0) {\n      this.visualStateFacets[indexOfFacet] = visualFacetState;\n    } else {\n      this.visualStateFacets.push(visualFacetState);\n    }\n  }\n  getFacetAndVisualAdaptions(facet: Facet): Facet {\n    const indexOfFacet = this.visualStateFacets.findIndex(\n      (facetVisual) => facetVisual.facetName === facet.name\n    );\n    if (indexOfFacet >= 0) {\n      facet.options.showMoreOpened = this.visualStateFacets[\n        indexOfFacet\n      ].showMoreOpened;\n      facet.options.collapsed = this.visualStateFacets[indexOfFacet].collapsed;\n    }\n    return facet;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".facet-header {\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  padding: 1em;\n  .filter-icon {\n    margin: 8px;\n  }\n  .facet-heading {\n    display: flex;\n    align-items: center;\n  }\n}\n.no-filters {\n  min-width: 100%;\n  text-align: center;\n  white-space: normal;\n}\n",
                    "styleUrl": "./facet-group.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translateService",
                        "type": "TranslateService"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<mat-accordion multi>\n  <div class=\"facet-header\">\n    <mat-icon class=\"filter-icon\" *ngIf=\"selectedFacets.length === 0\"\n      >filter_alt</mat-icon\n    >\n    <button\n      *ngIf=\"selectedFacets.length > 0\"\n      mat-icon-button\n      color=\"primary\"\n      matTooltip=\"{{\n        facetGroupText?.resetFacetSelection\n          ? facetGroupText.resetFacetSelection\n          : ('facets.resetFacetSelection' | translate)\n      }}\"\n      (click)=\"resetFacets()\"\n    >\n      <mat-icon>clear</mat-icon>\n    </button>\n    <div class=\"facet-heading\">\n      {{\n        facetGroupText?.filterResults\n          ? facetGroupText.filterResults\n          : (\"facets.filterResults\" | translate)\n      }}\n    </div>\n    <button\n      mat-icon-button\n      color=\"primary\"\n      [matTooltip]=\"getToolTipUnfoldButton()\"\n      (click)=\"toggleUnfoldButton()\"\n      [disabled]=\"facets.length === 0\"\n    >\n      <mat-icon>{{ openPanels ? \"unfold_more\" : \"unfold_less\" }}</mat-icon>\n    </button>\n  </div>\n  <ng-container *ngFor=\"let facet of facets\">\n    <amsui-facet\n      [inputFacet]=\"getFacetAndVisualAdaptions(facet)\"\n      (facetSelectedEvent)=\"facetSelected($event)\"\n      (unselectAll)=\"unselectAllForOneFacet($event)\"\n      (facetVisualStateChange)=\"saveVisualState($event)\"\n    ></amsui-facet>\n  </ng-container>\n  <p class=\"no-filters\" *ngIf=\"facets.length === 0\">\n    {{\n      facetGroupText?.noPossibleFilters\n        ? facetGroupText.noPossibleFilters\n        : (\"facets.noPossibleFilters\" | translate)\n    }}\n  </p>\n</mat-accordion>\n"
        },
        {
            "name": "NoResultsComponent",
            "id": "component-NoResultsComponent-5354df755fc0104eddaa34cd2baeb2d5",
            "file": "projects/amsui/src/lib/no-results/no-results.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amsui-no-results",
            "styleUrls": [
                "./no-results.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./no-results.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "defaultValue": "defaultConfig.noResultsConfig",
                    "line": 13,
                    "type": "NoResultsConfig"
                },
                {
                    "name": "noResultsText",
                    "line": 14,
                    "type": "NoResultsText"
                }
            ],
            "outputsClass": [
                {
                    "name": "didYouMeanEvent",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 15,
                    "type": "EventEmitter"
                },
                {
                    "name": "resultActionClicked",
                    "defaultValue": "new EventEmitter<ResultEntryActionEvent>()",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "didYouMeanClick",
                    "args": [
                        {
                            "name": "didYouMean",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "didYouMean",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitResultActionClicked",
                    "args": [
                        {
                            "name": "resultEntryAction",
                            "type": "ResultEntryActionEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "resultEntryAction",
                            "type": "ResultEntryActionEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPhoneNumberWithoutSpaces",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "greaterNumberOfSearchKeyword",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport type { NoResultsConfig } from '../search-service/search.types';\nimport { defaultConfig } from '../default.config';\nimport { ResultEntryActionEvent } from '../search-service/search.types';\nimport type { NoResultsText } from '../text.types';\n\n@Component({\n  selector: 'amsui-no-results',\n  templateUrl: './no-results.component.html',\n  styleUrls: ['./no-results.component.scss'],\n})\nexport class NoResultsComponent {\n  @Input() config: NoResultsConfig = defaultConfig.noResultsConfig;\n  @Input() noResultsText?: NoResultsText;\n  @Output() didYouMeanEvent = new EventEmitter<string>();\n  @Output() resultActionClicked = new EventEmitter<ResultEntryActionEvent>();\n\n  constructor() {}\n\n  greaterNumberOfSearchKeyword(): boolean {\n    return this.config.searchKeyword.split(' ').length > 1;\n  }\n\n  didYouMeanClick(didYouMean: string): void {\n    this.didYouMeanEvent.emit(didYouMean);\n  }\n\n  getPhoneNumberWithoutSpaces(): string {\n    return this.config.contactPhoneNumber?.replace(/\\s/g, '') || '';\n  }\n\n  emitResultActionClicked(resultEntryAction: ResultEntryActionEvent): void {\n    this.resultActionClicked.emit(resultEntryAction);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".no-results-container {\n  padding: 15px 50px;\n  hr {\n    margin: 40px;\n  }\n  .other-suggestions {\n    .link-container {\n      .underline-link {\n        margin: 0 10px;\n        line-height: 2;\n      }\n    }\n  }\n  .help {\n    text-align: center;\n    .help-actions {\n      display: flex;\n      justify-content: space-evenly;\n      align-items: center;\n      margin: 40px;\n    }\n  }\n}\n",
                    "styleUrl": "./no-results.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 16
            },
            "templateData": "<div class=\"no-results-container\">\n  <amsui-did-you-mean\n    (didYouMeanEvent)=\"didYouMeanClick(config.didYouMeanValue)\"\n    [value]=\"config.didYouMeanValue\"\n  ></amsui-did-you-mean>\n  <p\n    *ngIf=\"config.searchKeyword\"\n    [innerHTML]=\"\n      noResultsText?.feedbackSearch\n        ? noResultsText.feedbackSearch\n        : ('noResults.feedbackSearch'\n          | translate: { searchKeyword: config.searchKeyword })\n    \"\n  ></p>\n  <p\n    *ngIf=\"!config.searchKeyword\"\n    [innerHTML]=\"\n      noResultsText?.simpleFeedbackSearch\n        ? noResultsText.simpleFeedbackSearch\n        : ('noResults.simpleFeedbackSearch' | translate)\n    \"\n  ></p>\n\n  <div class=\"search-tips\">\n    <hr />\n    <p>\n      {{\n        noResultsText?.tipsHeading\n          ? noResultsText.tipsHeading\n          : (\"noResults.tips.maybeHelp\" | translate)\n      }}\n    </p>\n    <ul *ngIf=\"noResultsText?.tips\">\n      <li *ngFor=\"let tip of noResultsText.tips\">{{ tip }}</li>\n    </ul>\n    <ul *ngIf=\"!noResultsText?.tips || noResultsText.tips.length === 0\">\n      <li>{{ \"noResults.tips.correctSpelling\" | translate }}</li>\n      <li>{{ \"noResults.tips.differentKeywords\" | translate }}</li>\n      <li>{{ \"noResults.tips.generalKeywords\" | translate }}</li>\n      <li *ngIf=\"greaterNumberOfSearchKeyword()\">\n        {{ \"noResults.tips.lessKeywords\" | translate }}\n      </li>\n    </ul>\n  </div>\n\n  <div class=\"other-suggestions\" *ngIf=\"config.alternativeKeywords.length > 0\">\n    <hr />\n    <p>\n      {{\n        noResultsText?.othersSearched\n          ? noResultsText.othersSearched\n          : (\"noResults.othersSearched\" | translate)\n      }}\n    </p>\n    <div class=\"link-container\">\n      <span *ngFor=\"let keyword of config.alternativeKeywords; let i = index\">\n        <a class=\"underline-link\" (click)=\"didYouMeanClick(keyword)\">{{\n          keyword\n        }}</a>\n        <span *ngIf=\"i < config.alternativeKeywords.length - 1\">|</span>\n      </span>\n    </div>\n  </div>\n\n  <div\n    class=\"help\"\n    *ngIf=\"config.contactPhoneNumber || config.contactMailAddress\"\n  >\n    <hr />\n    <p>\n      {{\n        noResultsText?.contact\n          ? noResultsText.contact\n          : (\"noResults.contact\" | translate)\n      }}\n    </p>\n    <div class=\"help-actions\">\n      <div *ngIf=\"config.contactMailAddress\">\n        <a\n          mat-fab\n          [href]=\"\n            'mailto:' +\n            config.contactMailAddress +\n            '?subject=Problems with search results'\n          \"\n        >\n          <mat-icon>mail</mat-icon>\n        </a>\n        <p>{{ config.contactMailAddress }}</p>\n      </div>\n      <div *ngIf=\"config.contactPhoneNumber\">\n        <a mat-fab [href]=\"'tel:' + getPhoneNumberWithoutSpaces()\">\n          <mat-icon>phone</mat-icon>\n        </a>\n        <p>{{ config.contactPhoneNumber }}</p>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"other-suggestions\" *ngIf=\"config.alternativeResults.length > 0\">\n    <hr />\n    <p>\n      {{\n        noResultsText?.helpfulResults\n          ? noResultsText.helpfulResults\n          : (\"noResults.helpfulResults\" | translate)\n      }}\n    </p>\n    <amsui-results\n      [results]=\"config.alternativeResults\"\n      [resultType]=\"'grid'\"\n      [highlightingActivated]=\"false\"\n      (resultActionClicked)=\"emitResultActionClicked($event)\"\n    >\n    </amsui-results>\n  </div>\n</div>\n"
        },
        {
            "name": "OverlayLoaderComponent",
            "id": "component-OverlayLoaderComponent-bc700fb707e3d9c6563f5118d23754ad",
            "file": "projects/amsui/src/lib/overlay-loader/overlay-loader.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amsui-overlay-loader",
            "styleUrls": [
                "./overlay-loader.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./overlay-loader.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'amsui-overlay-loader',\n  templateUrl: './overlay-loader.component.html',\n  styleUrls: ['./overlay-loader.component.scss'],\n})\nexport class OverlayLoaderComponent {\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".loading-overlay {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background: rgb(0 0 0 / 30%);\n  z-index: 10;\n}\n",
                    "styleUrl": "./overlay-loader.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "templateData": "<div class=\"loading-overlay\">\n  <mat-progress-spinner\n    mode=\"indeterminate\"\n    color=\"primary\"\n  ></mat-progress-spinner>\n</div>\n"
        },
        {
            "name": "ResultEntryComponent",
            "id": "component-ResultEntryComponent-caa99fafd4d97e503ba968c7001ddf05",
            "file": "projects/amsui/src/lib/results/result-entry/result-entry.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amsui-result-entry",
            "styleUrls": [
                "./result-entry.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./result-entry.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "entry",
                    "line": 26,
                    "type": "ResultEntry"
                },
                {
                    "name": "highlightingActivated",
                    "defaultValue": "defaultConfig.highlightingActivated",
                    "line": 28
                },
                {
                    "name": "resultEntryText",
                    "line": 29,
                    "type": "ResultEntryText"
                },
                {
                    "name": "showMoreWordLimit",
                    "defaultValue": "defaultConfig.showMoreWordLimit",
                    "line": 27
                }
            ],
            "outputsClass": [
                {
                    "name": "actionClicked",
                    "defaultValue": "new EventEmitter<ResultEntryActionEvent>()",
                    "line": 30,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "showMoreContent",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "showMoreWordLimitThreshold",
                    "defaultValue": "50",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "showMoreWords",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "checkIfNeedShowMore",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 98
                },
                {
                    "name": "emitActionEvent",
                    "args": [
                        {
                            "name": "actionName",
                            "type": "string"
                        },
                        {
                            "name": "evt",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "jsdoctags": [
                        {
                            "name": "actionName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "evt",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEntryDescription",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 78
                },
                {
                    "name": "getShowMoreButtonDescription",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 113
                },
                {
                    "name": "getWordsNumber",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 106
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleHighlighting",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\nimport type {\n  ResultEntry,\n  ResultEntryActionEvent,\n} from '../../search-service/search.types';\nimport { defaultConfig } from '../../default.config';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Observable, of } from 'rxjs';\nimport type { ResultEntryText } from '../../text.types';\n\n@Component({\n  selector: 'amsui-result-entry',\n  templateUrl: './result-entry.component.html',\n  styleUrls: ['./result-entry.component.scss'],\n})\nexport class ResultEntryComponent implements AfterViewInit, OnChanges {\n  @Input() entry!: ResultEntry;\n  @Input() showMoreWordLimit = defaultConfig.showMoreWordLimit;\n  @Input() highlightingActivated = defaultConfig.highlightingActivated;\n  @Input() resultEntryText?: ResultEntryText;\n  @Output() actionClicked = new EventEmitter<ResultEntryActionEvent>();\n  showMoreContent = false;\n  showMoreWords!: number;\n  showMoreWordLimitThreshold = 50;\n  constructor(\n    private readonly elRef: ElementRef,\n    private readonly translateService: TranslateService\n  ) {}\n\n  ngAfterViewInit(): void {\n    this.toggleHighlighting();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.highlightingActivated) {\n      this.toggleHighlighting();\n    }\n  }\n\n  emitActionEvent(actionName: string, evt?: any): void {\n    if (actionName !== 'cardClick') {\n      this.actionClicked.emit({ actionName, entry: this.entry });\n    } else if (\n      evt &&\n      !evt.path.some(\n        (element: any) =>\n          element.tagName === 'BUTTON' &&\n          element.classList.contains('show-more-text')\n      )\n    ) {\n      this.actionClicked.emit({ actionName, entry: this.entry });\n    }\n  }\n\n  private toggleHighlighting(): void {\n    this.elRef.nativeElement\n      .querySelectorAll('em')\n      .forEach((node: HTMLElement) => {\n        if (this.highlightingActivated) {\n          node.classList.add('highlight');\n          node.classList.remove('no-highlight');\n        } else {\n          node.classList.add('no-highlight');\n          node.classList.remove('highlight');\n        }\n      });\n  }\n\n  getEntryDescription(): string {\n    let desc = '';\n    if (this.entry.description) {\n      if (this.showMoreContent || !this.checkIfNeedShowMore()) {\n        desc = this.entry.description;\n      } else {\n        const words = this.entry.description.trim().split(/\\s+/);\n        this.showMoreWords = words.slice(\n          this.showMoreWordLimit + this.showMoreWordLimitThreshold + 1\n        ).length;\n        desc =\n          words\n            .slice(0, this.showMoreWordLimit + this.showMoreWordLimitThreshold)\n            .join(' ') + '...';\n      }\n    }\n    this.toggleHighlighting();\n    return desc;\n  }\n\n  checkIfNeedShowMore(): boolean {\n    return (\n      typeof this.entry.description !== 'undefined' &&\n      this.entry.description !== '' &&\n      this.entry.description.split(' ').length > this.showMoreWordLimit\n    );\n  }\n\n  getWordsNumber(): number {\n    if (Math.round(this.showMoreWords / 50) * 50 === 0) {\n      return 50;\n    }\n    return Math.round(this.showMoreWords / 50) * 50;\n  }\n\n  getShowMoreButtonDescription(): Observable<string> {\n    if (!this.showMoreContent) {\n      const numberOfWords = this.getWordsNumber();\n      if (numberOfWords <= 50) {\n        return this.resultEntryText?.showFewMore\n          ? of(this.resultEntryText.showFewMore)\n          : this.translateService.get('searchResultEntry.showFewMore');\n      }\n      return this.resultEntryText?.showMore\n        ? of(this.resultEntryText.showMore)\n        : this.translateService.get('searchResultEntry.showMore', {\n            showMoreWords: numberOfWords,\n          });\n    }\n    return this.resultEntryText?.showLess\n      ? of(this.resultEntryText.showLess)\n      : this.translateService.get('searchResultEntry.showLess');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  box-sizing: border-box;\n  .result-entry {\n    box-sizing: border-box;\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    .mat-card-image {\n      object-fit: cover;\n      max-height: 350px;\n    }\n    mat-chip {\n      height: auto;\n      width: min-content;\n      white-space: nowrap;\n    }\n    .subtitle-container {\n      display: flex;\n      align-items: center;\n      flex-wrap: wrap;\n      mat-icon {\n        margin-right: 5px;\n        &:not(:first-child) {\n          margin-left: 10px;\n        }\n      }\n    }\n    mat-card-content {\n      overflow: hidden;\n      text-wrap: none;\n      text-overflow: ellipsis;\n    }\n    mat-card-actions {\n      display: flex;\n      flex: 1 0 auto;\n      align-items: flex-end;\n    }\n    mat-icon.mat-card-avatar {\n      width: 40px;\n      height: 40px;\n      font-size: 40px;\n      color: var(--accent-color);\n    }\n    .show-more-text {\n      margin-top: -70px;\n      background: rgb(255, 255, 255);\n      background: linear-gradient(\n        rgba(255, 255, 255, 0.1) 0%,\n        rgba(255, 255, 255, 0.3) 10%,\n        rgba(255, 255, 255, 0.5) 20%,\n        rgba(255, 255, 255, 0.8) 30%,\n        rgba(255, 255, 255, 1) 100%\n      );\n      text-align: center;\n      padding: 10px 25px;\n      backdrop-filter: blur(1px);\n    }\n    .show-more-open {\n      margin-top: -10px;\n      padding: 10px;\n    }\n  }\n}\n",
                    "styleUrl": "./result-entry.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "OnChanges"
            ],
            "templateData": "<mat-card\n  class=\"result-entry\"\n  (click)=\"!entry.actions ? emitActionEvent('cardClick', $event) : ''\"\n  *ngIf=\"entry.title || entry.description\"\n>\n  <mat-card-header>\n    <img\n      *ngIf=\"entry.avatarImgSrc\"\n      mat-card-avatar\n      matTooltip=\"{{ entry.avatarToolTip! | translate }}\"\n      [src]=\"entry.avatarImgSrc\"\n      [alt]=\"entry.title\"\n    />\n    <mat-icon\n      *ngIf=\"entry.avatarIcon\"\n      matTooltip=\"{{ entry.avatarToolTip! | translate }}\"\n      mat-card-avatar\n      >{{ entry.avatarIcon }}</mat-icon\n    >\n    <mat-card-title [innerHTML]=\"entry.title\"></mat-card-title>\n    <mat-card-subtitle>\n      <div class=\"subtitle-container\">\n        <ng-container *ngFor=\"let subTitle of entry.subTitles\">\n          <mat-icon>{{ subTitle.icon }}</mat-icon>\n          {{ subTitle.description! | translate }}\n        </ng-container>\n      </div>\n    </mat-card-subtitle>\n  </mat-card-header>\n  <img\n    *ngIf=\"entry.imageSrc\"\n    mat-card-image\n    [src]=\"entry.imageSrc\"\n    [alt]=\"entry.title\"\n  />\n  <mat-card-content>\n    <mat-chip-list>\n      <mat-chip *ngFor=\"let tag of entry.tags\">\n        {{ tag | translate }}\n      </mat-chip>\n    </mat-chip-list>\n    <p [innerHTML]=\"getEntryDescription()\"></p>\n  </mat-card-content>\n  <button\n    *ngIf=\"checkIfNeedShowMore()\"\n    (click)=\"showMoreContent = !showMoreContent\"\n    [class.show-more-open]=\"showMoreContent\"\n    mat-button\n    class=\"show-more-text\"\n    color=\"primary\"\n  >\n    {{ getShowMoreButtonDescription() | async }}\n  </button>\n  <mat-card-actions>\n    <button\n      *ngFor=\"let action of entry.actions\"\n      mat-icon-button\n      [matTooltip]=\"action.description ? (action.description | translate) : ''\"\n      (click)=\"emitActionEvent(action.name)\"\n    >\n      <mat-icon>{{ action.icon }}</mat-icon>\n    </button>\n  </mat-card-actions>\n</mat-card>\n"
        },
        {
            "name": "ResultsComponent",
            "id": "component-ResultsComponent-c392b11a648cc56fb6b8f7556a052f0b",
            "file": "projects/amsui/src/lib/results/results.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amsui-results",
            "styleUrls": [
                "./results.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./results.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "highlightingActivated",
                    "defaultValue": "defaultConfig.highlightingActivated",
                    "line": 17
                },
                {
                    "name": "results",
                    "defaultValue": "[]",
                    "line": 15,
                    "type": "ResultEntry[]"
                },
                {
                    "name": "resultType",
                    "line": 16,
                    "type": "ResultViewType"
                }
            ],
            "outputsClass": [
                {
                    "name": "resultActionClicked",
                    "defaultValue": "new EventEmitter<ResultEntryActionEvent>()",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "emitActionEvent",
                    "args": [
                        {
                            "name": "resultEntryAction",
                            "type": "ResultEntryActionEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "resultEntryAction",
                            "type": "ResultEntryActionEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport type {\n  ResultEntry,\n  ResultEntryActionEvent,\n  ResultViewType,\n} from '../search-service/search.types';\nimport { defaultConfig } from '../default.config';\n\n@Component({\n  selector: 'amsui-results',\n  templateUrl: './results.component.html',\n  styleUrls: ['./results.component.scss'],\n})\nexport class ResultsComponent {\n  @Input() results: ResultEntry[] = [];\n  @Input() resultType!: ResultViewType;\n  @Input() highlightingActivated = defaultConfig.highlightingActivated;\n  @Output() resultActionClicked = new EventEmitter<ResultEntryActionEvent>();\n\n  constructor() {}\n\n  emitActionEvent(resultEntryAction: ResultEntryActionEvent): void {\n    this.resultActionClicked.emit(resultEntryAction);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../styles/breakpoints\";\n\n.search-results {\n  margin: 20px;\n  display: grid;\n  grid-row-gap: 20px;\n  grid-column-gap: 20px;\n}\n.search-results-grid {\n  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));\n}\n.search-results-list {\n  grid-template-columns: minmax(0, 1fr);\n}\n\n@media screen and (max-width: $mobile) {\n  .search-results {\n    margin: 0;\n  }\n}\n",
                    "styleUrl": "./results.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 18
            },
            "templateData": "<div\n  class=\"search-results\"\n  [ngClass]=\"{\n    'search-results-grid': resultType === 'grid',\n    'search-results-list': resultType === 'list'\n  }\"\n>\n  <ng-container\n    *ngFor=\"let entry of results\">\n    <amsui-result-entry\n      *ngIf=\"entry.title || entry.description\"\n      [entry]=\"entry\"\n      [highlightingActivated]=\"highlightingActivated\"\n      (actionClicked)=\"emitActionEvent($event)\"\n    ></amsui-result-entry>\n\n  </ng-container>\n</div>\n"
        },
        {
            "name": "ResultTypeComponent",
            "id": "component-ResultTypeComponent-01b26c0a665eda2debbfb1ad3983268b",
            "file": "projects/amsui/src/lib/search-result-meta/result-type/result-type.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amsui-result-type",
            "styleUrls": [
                "./result-type.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./result-type.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 11
                },
                {
                    "name": "resultTypes",
                    "defaultValue": "[]",
                    "line": 14,
                    "type": "ResultViewType[]"
                },
                {
                    "name": "resultTypeText",
                    "line": 13,
                    "type": "ResultTypeText"
                },
                {
                    "name": "selectedResultType",
                    "line": 12,
                    "type": "ResultViewType"
                }
            ],
            "outputsClass": [
                {
                    "name": "resultViewTypeChanged",
                    "defaultValue": "new EventEmitter<ResultViewType>()",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "emitResultViewTypeChange",
                    "args": [
                        {
                            "name": "resultViewType",
                            "type": "ResultViewType"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "resultViewType",
                            "type": "ResultViewType",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport type { ResultViewType } from '../../search-service/search.types';\nimport type { ResultTypeText } from '../../text.types';\n\n@Component({\n  selector: 'amsui-result-type',\n  templateUrl: './result-type.component.html',\n  styleUrls: ['./result-type.component.scss'],\n})\nexport class ResultTypeComponent {\n  @Input() disabled = false;\n  @Input() selectedResultType!: ResultViewType;\n  @Input() resultTypeText?: ResultTypeText;\n  @Input() resultTypes: ResultViewType[] = [];\n  @Output() resultViewTypeChanged = new EventEmitter<ResultViewType>();\n\n  constructor() {}\n\n  emitResultViewTypeChange(resultViewType: ResultViewType): void {\n    this.resultViewTypeChanged.emit(resultViewType);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-button-toggle-group {\n  margin-right: 10px;\n  height: 40px;\n  align-items: center;\n}\n",
                    "styleUrl": "./result-type.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 15
            },
            "templateData": "<mat-button-toggle-group\n  #group=\"matButtonToggleGroup\"\n  [disabled]=\"disabled\"\n  (valueChange)=\"emitResultViewTypeChange($event)\"\n  *ngIf=\"resultTypes.length > 1\"\n>\n  <mat-button-toggle\n    *ngIf=\"resultTypes.includes('grid')\"\n    [checked]=\"selectedResultType === 'grid'\"\n    [matTooltip]=\"\n      resultTypeText?.grid\n        ? resultTypeText.grid\n        : ('resultType.grid' | translate)\n    \"\n    [aria-label]=\"'resultType.gridAria' | translate\"\n    value=\"grid\"\n  >\n    <mat-icon>view_module</mat-icon>\n  </mat-button-toggle>\n  <mat-button-toggle\n    *ngIf=\"resultTypes.includes('list')\"\n    [checked]=\"selectedResultType === 'list'\"\n    [matTooltip]=\"\n      resultTypeText?.list\n        ? resultTypeText.list\n        : ('resultType.list' | translate)\n    \"\n    [aria-label]=\"'resultType.listAria' | translate\"\n    value=\"list\"\n  >\n    <mat-icon>view_list</mat-icon>\n  </mat-button-toggle>\n</mat-button-toggle-group>\n"
        },
        {
            "name": "SearchFieldComponent",
            "id": "component-SearchFieldComponent-c11c3b5564790dc1e2de06418319d358",
            "file": "projects/amsui/src/lib/search-field/search-field.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amsui-search-field",
            "styleUrls": [
                "./search-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "line": 33,
                    "type": ""
                },
                {
                    "name": "searchFieldText",
                    "line": 40,
                    "type": "SearchFieldText"
                }
            ],
            "outputsClass": [
                {
                    "name": "inputEvent",
                    "defaultValue": "new EventEmitter<SuggestionParameter>()",
                    "line": 42,
                    "type": "EventEmitter"
                },
                {
                    "name": "searchEvent",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "autocomplete",
                    "type": "MatAutocompleteTrigger",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatAutocompleteTrigger"
                        }
                    ]
                },
                {
                    "name": "breakpointSubscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "defaultValueForDropDownMode",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "filteredSuggestions$",
                    "defaultValue": "of([])",
                    "type": "Observable<string[]>",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "isMobile",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "isTablet",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "numberOfSuggestions",
                    "defaultValue": "defaultConfig.numberOfSuggestions",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "searchControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "searchFieldConfig",
                    "defaultValue": "defaultConfig.searchFieldConfig",
                    "type": "SearchFieldConfig",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "searchQueryParamKey",
                    "defaultValue": "'q'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkValueInput",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearSearchValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162
                },
                {
                    "name": "closePanelIfEmpty",
                    "args": [
                        {
                            "name": "keyword",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "keyword",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitInputEvent",
                    "args": [
                        {
                            "name": "keyword",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "keyword",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormattedOption",
                    "args": [
                        {
                            "name": "option",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 127,
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66
                },
                {
                    "name": "onOptionActivated",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setOptionAsSearchValue",
                    "args": [
                        {
                            "name": "option",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102
                },
                {
                    "name": "startSearchWithEnter",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startSearchWithOptionClick",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { debounceTime, finalize, switchMap, tap } from 'rxjs/operators';\nimport { Observable, of, Subscription } from 'rxjs';\nimport { EventEmitter } from '@angular/core';\nimport { BreakpointObserver } from '@angular/cdk/layout';\nimport { Breakpoints } from '../breakpoints';\nimport { MatAutocompleteTrigger } from '@angular/material/autocomplete';\nimport type {\n  SearchFieldConfig,\n  SuggestionParameter,\n} from '../search-service/search.types';\nimport { defaultConfig } from '../default.config';\nimport {\n  getSearchKeywordFromURL,\n  resetToQueryParam,\n} from '../search-params.util';\nimport type { SearchFieldText } from '../text.types';\n\n@Component({\n  selector: 'amsui-search-field',\n  templateUrl: './search-field.component.html',\n  styleUrls: ['./search-field.component.scss'],\n})\nexport class SearchFieldComponent implements OnInit, OnDestroy {\n  @Input() set config(config: SearchFieldConfig) {\n    this.searchFieldConfig = {\n      ...this.searchFieldConfig,\n      ...config,\n    };\n    this.checkValueInput(this.searchFieldConfig.value);\n  }\n  @Input() searchFieldText?: SearchFieldText;\n  @Output() searchEvent = new EventEmitter<string>();\n  @Output() inputEvent = new EventEmitter<SuggestionParameter>();\n  @ViewChild(MatAutocompleteTrigger) autocomplete!: MatAutocompleteTrigger;\n  searchControl = new FormControl();\n  filteredSuggestions$: Observable<string[]> = of([]);\n  isMobile = false;\n  isTablet = false;\n  isLoading = false;\n  numberOfSuggestions = defaultConfig.numberOfSuggestions;\n  defaultValueForDropDownMode = '';\n  searchFieldConfig: SearchFieldConfig = defaultConfig.searchFieldConfig;\n  private searchQueryParamKey = 'q';\n  private breakpointSubscription!: Subscription;\n\n  constructor(private readonly breakpointObserver: BreakpointObserver) {\n    if (this.searchFieldConfig.addQueryToURLParams) {\n      this.searchControl.setValue(\n        getSearchKeywordFromURL(\n          window.location.search,\n          this.searchQueryParamKey\n        )\n      );\n    }\n  }\n\n  ngOnInit(): void {\n    if (\n      this.searchFieldConfig.asyncSuggestionDataProvider &&\n      !this.searchFieldConfig.disableAutocomplete\n    ) {\n      this.filteredSuggestions$ = this.searchControl.valueChanges.pipe(\n        debounceTime(300),\n        tap((keyword) => this.closePanelIfEmpty(keyword)),\n        tap((keyword) => (this.defaultValueForDropDownMode = keyword)),\n        tap((keyword) => this.emitInputEvent(keyword)),\n        tap(() => (this.isLoading = true)),\n        switchMap((keyword) => {\n          return this.searchFieldConfig.asyncSuggestionDataProvider\n            ? this.searchFieldConfig\n                .asyncSuggestionDataProvider({\n                  keyword,\n                  numberOfSuggestions: this.numberOfSuggestions,\n                })\n                .pipe(finalize(() => (this.isLoading = false)))\n            : of([]);\n        })\n      );\n    }\n\n    this.breakpointSubscription = this.breakpointObserver\n      .observe([Breakpoints.Mobile, Breakpoints.Tablet])\n      .subscribe((result) => {\n        this.isMobile = result.breakpoints[Breakpoints.Mobile];\n        this.isTablet = result.breakpoints[Breakpoints.Tablet];\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.breakpointSubscription.unsubscribe();\n  }\n\n  startSearch(): void {\n    const searchKeyword = this.searchControl.value || '';\n    if (this.searchFieldConfig.addQueryToURLParams) {\n      resetToQueryParam(this.searchQueryParamKey, searchKeyword);\n    }\n    this.searchEvent.emit(searchKeyword);\n  }\n\n  startSearchWithEnter($event: any): void {\n    $event.target.blur();\n    this.autocomplete.closePanel();\n    this.startSearch();\n  }\n  startSearchWithOptionClick($event: any): void {\n    if ($event.target.tagName !== 'MAT-ICON') {\n      this.autocomplete.closePanel();\n      this.startSearch();\n    } else {\n      $event.preventDefault();\n    }\n    if (document.activeElement instanceof HTMLElement) {\n      document.activeElement.blur();\n    }\n  }\n\n  getFormattedOption(option: string): string {\n    const indexFound = option\n      .toLowerCase()\n      .indexOf(this.searchControl.value?.toLowerCase());\n    if (this.searchControl.value && indexFound >= 0) {\n      return `<strong>${option.substring(\n        0,\n        indexFound\n      )}</strong>${option.substring(\n        indexFound,\n        indexFound + this.searchControl.value.length\n      )}<strong>${option.substring(\n        indexFound + this.searchControl.value.length,\n        option.length\n      )}</strong>`;\n    }\n    return option;\n  }\n\n  onOptionActivated($event: any): void {\n    if ($event.option) {\n      if ($event.option.id === this.numberOfSuggestions) {\n        this.searchControl.setValue(this.defaultValueForDropDownMode, {\n          emitEvent: false,\n        });\n      } else {\n        this.searchControl.setValue($event.option.value, { emitEvent: false });\n      }\n    }\n  }\n\n  setOptionAsSearchValue(option: string): void {\n    this.searchControl.setValue(option);\n  }\n\n  clearSearchValue(): void {\n    this.searchControl.setValue('');\n  }\n\n  private emitInputEvent(keyword: string): void {\n    this.inputEvent.emit({\n      keyword,\n      numberOfSuggestions: this.numberOfSuggestions,\n    });\n  }\n\n  private closePanelIfEmpty(keyword: string): void {\n    if (keyword === '') {\n      this.autocomplete.closePanel();\n    }\n  }\n\n  private checkValueInput(value: string | undefined): void {\n    if (value) {\n      this.searchControl.setValue(this.searchFieldConfig.value);\n      if (this.searchFieldConfig.addQueryToURLParams) {\n        resetToQueryParam(this.searchQueryParamKey, value);\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../styles/breakpoints\";\n:host {\n  display: flex;\n  justify-content: center;\n  align-items: baseline;\n  width: 100%;\n  .search-field {\n    width: 100%;\n  }\n  .search-button {\n    min-width: auto;\n    margin-left: 10px;\n  }\n}\n.is-loading ::ng-deep .mat-option-text {\n  display: flex;\n  justify-content: center;\n}\n\n@media screen and (max-width: $tablet) {\n  .grey-icon {\n    color: grey;\n    font-size: 20px;\n  }\n  .suggest-option {\n    border-top: 1px solid lightgrey;\n    padding-right: 0;\n    .suggest-option-container {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      .into-search {\n        margin-right: 0;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./search-field.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver"
                    }
                ],
                "line": 53,
                "jsdoctags": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "config": {
                    "name": "config",
                    "setSignature": {
                        "name": "config",
                        "type": "void",
                        "args": [
                            {
                                "name": "config",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 33,
                        "jsdoctags": [
                            {
                                "name": "config",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<mat-form-field\n  class=\"search-field\"\n  [appearance]=\"searchFieldConfig.formFieldAppearance!\"\n>\n  <mat-label>{{\n    searchFieldText?.placeholderLabel\n      ? searchFieldText.placeholderLabel\n      : (\"searchField.placeholderLabel\" | translate)\n  }}</mat-label>\n  <label>\n    <input\n      tabindex=\"0\"\n      spellcheck=\"true\"\n      matInput\n      type=\"text\"\n      [matAutocomplete]=\"auto\"\n      [formControl]=\"searchControl\"\n      (keyup.enter)=\"startSearchWithEnter($event)\"\n    />\n  </label>\n  <button\n    *ngIf=\"(isMobile || isTablet) && searchControl.value\"\n    matSuffix\n    mat-icon-button\n    aria-label=\"Clear\"\n    class=\"clear-search\"\n    (click)=\"clearSearchValue()\"\n  >\n    <mat-icon class=\"grey-icon\">close</mat-icon>\n  </button>\n  <mat-autocomplete\n    class=\"autocomplete-panel\"\n    #auto=\"matAutocomplete\"\n    (optionActivated)=\"onOptionActivated($event)\"\n  >\n    <ng-container\n      *ngIf=\"\n        !searchFieldConfig.disableAutocomplete! ||\n        !searchFieldConfig.asyncSuggestionDataProvider\n      \"\n    >\n      <mat-option *ngIf=\"isLoading\" class=\"is-loading\"\n        ><mat-spinner diameter=\"30\"></mat-spinner\n      ></mat-option>\n      <ng-container\n        *ngFor=\"let option of filteredSuggestions$ | async; let idxId = index\"\n      >\n        <mat-option\n          class=\"suggest-option\"\n          *ngIf=\"!isLoading\"\n          [value]=\"option\"\n          [id]=\"idxId.toString()\"\n          (click)=\"startSearchWithOptionClick($event)\"\n        >\n          <div class=\"suggest-option-container\">\n            <span [innerHTML]=\"getFormattedOption(option)\">{{ option }}</span>\n            <button\n              mat-icon-button\n              *ngIf=\"isMobile || isTablet\"\n              (click)=\"setOptionAsSearchValue(option)\"\n            >\n              <mat-icon class=\"into-search grey-icon\">north_west</mat-icon>\n            </button>\n          </div>\n        </mat-option>\n      </ng-container>\n      <mat-option\n        style=\"display: none\"\n        [id]=\"numberOfSuggestions.toString()\"\n        [value]=\"defaultValueForDropDownMode\"\n      ></mat-option>\n    </ng-container>\n  </mat-autocomplete>\n</mat-form-field>\n<button\n  class=\"search-button\"\n  mat-raised-button\n  color=\"accent\"\n  (click)=\"startSearch()\"\n>\n  <mat-icon>search</mat-icon>\n  <span *ngIf=\"!isMobile\">{{\n    searchFieldText?.searchButtonText\n      ? searchFieldText.searchButtonText\n      : (\"searchField.searchButtonText\" | translate)\n  }}</span>\n</button>\n"
        },
        {
            "name": "SearchResultMetaComponent",
            "id": "component-SearchResultMetaComponent-2c9f2da3dad1fd2ec89c790fe2053179",
            "file": "projects/amsui/src/lib/search-result-meta/search-result-meta.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amsui-search-result-meta",
            "styleUrls": [
                "./search-result-meta.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search-result-meta.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "metaResultViewConfig",
                    "line": 30,
                    "type": ""
                },
                {
                    "name": "searchResultMeta",
                    "defaultValue": "defaultConfig.searchResultMeta",
                    "line": 28,
                    "type": "SearchResultMeta"
                }
            ],
            "outputsClass": [
                {
                    "name": "didYouMeanEvent",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 40,
                    "type": "EventEmitter"
                },
                {
                    "name": "resultViewTypeChanged",
                    "defaultValue": "new EventEmitter<ResultViewType>()",
                    "line": 39,
                    "type": "EventEmitter"
                },
                {
                    "name": "sortingChanged",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 38,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "activeSortingOption",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "breakpointSubscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "defaultSortingOption",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "isMobile",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "metaViewConfig",
                    "defaultValue": "defaultConfig.metaViewConfig",
                    "type": "MetaResultViewConfig",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methodsClass": [
                {
                    "name": "didYouMeanClick",
                    "args": [
                        {
                            "name": "didYouMeanValue",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "jsdoctags": [
                        {
                            "name": "didYouMeanValue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitResultViewTypeChange",
                    "args": [
                        {
                            "name": "resultViewType",
                            "type": "ResultViewType"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "jsdoctags": [
                        {
                            "name": "resultViewType",
                            "type": "ResultViewType",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitSortEvent",
                    "args": [
                        {
                            "name": "sortingType",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "jsdoctags": [
                        {
                            "name": "sortingType",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n  OnDestroy,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport type {\n  MetaResultViewConfig,\n  ResultViewType,\n  SearchResultMeta,\n} from '../search-service/search.types';\nimport { BreakpointObserver } from '@angular/cdk/layout';\nimport { map } from 'rxjs/operators';\nimport { Breakpoints } from '../breakpoints';\nimport { Subscription } from 'rxjs';\nimport { getDefaultSortingOptionValue } from './sorting-select/sorting-select.utils';\nimport { defaultConfig } from '../default.config';\n@Component({\n  selector: 'amsui-search-result-meta',\n  templateUrl: './search-result-meta.component.html',\n  styleUrls: ['./search-result-meta.component.scss'],\n})\nexport class SearchResultMetaComponent implements OnInit, OnDestroy, OnChanges {\n  @Input() searchResultMeta: SearchResultMeta = defaultConfig.searchResultMeta;\n\n  @Input() set metaResultViewConfig(\n    metaResultViewConfig: MetaResultViewConfig\n  ) {\n    this.metaViewConfig = {\n      ...this.metaViewConfig,\n      ...metaResultViewConfig,\n    };\n  }\n  @Output() sortingChanged = new EventEmitter<string>();\n  @Output() resultViewTypeChanged = new EventEmitter<ResultViewType>();\n  @Output() didYouMeanEvent = new EventEmitter<string>();\n  defaultSortingOption = '';\n  activeSortingOption = '';\n  isMobile = false;\n  metaViewConfig: MetaResultViewConfig = defaultConfig.metaViewConfig;\n  private breakpointSubscription!: Subscription;\n\n  constructor(private readonly breakpointObserver: BreakpointObserver) {}\n\n  ngOnInit(): void {\n    this.breakpointSubscription = this.breakpointObserver\n      .observe([Breakpoints.Mobile])\n      .pipe(map((result) => result.matches))\n      .subscribe((mobileCheck) => (this.isMobile = mobileCheck));\n    if (this.metaViewConfig.sortingOptions) {\n      this.defaultSortingOption = getDefaultSortingOptionValue(\n        this.metaViewConfig.sortingOptions\n      );\n    }\n    this.activeSortingOption = this.defaultSortingOption;\n  }\n\n  ngOnDestroy(): void {\n    this.breakpointSubscription.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (\n      changes.searchResultMeta &&\n      !changes.searchResultMeta.firstChange &&\n      changes.searchResultMeta.currentValue.keyword !==\n        changes.searchResultMeta.previousValue.keyword\n    ) {\n      this.activeSortingOption = this.defaultSortingOption;\n    }\n  }\n\n  emitSortEvent(sortingType: string): void {\n    this.activeSortingOption = sortingType;\n    this.sortingChanged.emit(sortingType);\n  }\n\n  emitResultViewTypeChange(resultViewType: ResultViewType): void {\n    this.resultViewTypeChanged.emit(resultViewType);\n  }\n\n  didYouMeanClick(didYouMeanValue: string): void {\n    this.didYouMeanEvent.emit(didYouMeanValue);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../styles/breakpoints\";\n\n:host {\n  font-size: 12px;\n  .header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    flex-wrap: nowrap;\n    margin: 0 35px 10px;\n    .header-right {\n      display: flex;\n      width: initial;\n    }\n  }\n}\n\n@media screen and (max-width: $mobile) {\n  :host {\n    .header {\n      flex-wrap: wrap;\n      .header-right {\n        width: 100%;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./search-result-meta.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver"
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "OnChanges"
            ],
            "accessors": {
                "metaResultViewConfig": {
                    "name": "metaResultViewConfig",
                    "setSignature": {
                        "name": "metaResultViewConfig",
                        "type": "void",
                        "args": [
                            {
                                "name": "metaResultViewConfig",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 30,
                        "jsdoctags": [
                            {
                                "name": "metaResultViewConfig",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"header\">\n  <amsui-search-result-text\n    [searchResultMeta]=\"searchResultMeta\"\n    (didYouMeanEvent)=\"didYouMeanClick($event)\"\n  >\n  </amsui-search-result-text>\n\n  <div class=\"header-right\">\n    <amsui-result-type\n      [disabled]=\"searchResultMeta.numFound <= 0\"\n      [resultTypes]=\"isMobile ? ['list'] : metaViewConfig.resultViewTypes!\"\n      [selectedResultType]=\"\n        isMobile ? 'list' : metaViewConfig.selectedResultViewType!\n      \"\n      (resultViewTypeChanged)=\"emitResultViewTypeChange($event)\"\n    ></amsui-result-type>\n    <amsui-sorting-select\n      *ngIf=\"metaViewConfig.sortingOptions!.length > 0\"\n      [sortingOptions]=\"metaViewConfig.sortingOptions!\"\n      [defaultSortOption]=\"activeSortingOption\"\n      [disabled]=\"searchResultMeta.numFound <= 0\"\n      (sortingChanged)=\"emitSortEvent($event)\"\n    ></amsui-sorting-select>\n  </div>\n</div>\n"
        },
        {
            "name": "SearchResultsWrapperComponent",
            "id": "component-SearchResultsWrapperComponent-37111aebdc3ece7dd0c8bd6943221f8b",
            "file": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amsui-search-results-wrapper",
            "styleUrls": [
                "./search-results-wrapper.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search-results-wrapper.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "noResultsConfig",
                    "defaultValue": "defaultConfig.noResultsConfig",
                    "line": 41,
                    "type": "NoResultsConfig"
                },
                {
                    "name": "resultViewConfig",
                    "line": 35,
                    "type": ""
                },
                {
                    "name": "searchResultMeta",
                    "defaultValue": "defaultConfig.searchResultMeta",
                    "line": 34,
                    "type": "SearchResultMeta"
                },
                {
                    "name": "searchResults",
                    "line": 42,
                    "type": "[]"
                },
                {
                    "name": "searchResultsWrapperText",
                    "line": 46,
                    "type": "SearchResultsWrapperText"
                }
            ],
            "outputsClass": [
                {
                    "name": "didYouMeanEvent",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 47,
                    "type": "EventEmitter"
                },
                {
                    "name": "filterChangedEvent",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 49,
                    "type": "EventEmitter"
                },
                {
                    "name": "loadMoreEvent",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 48,
                    "type": "EventEmitter"
                },
                {
                    "name": "resultActionClicked",
                    "defaultValue": "new EventEmitter<ResultEntryActionEvent>()",
                    "line": 50,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "activeSortingType",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "breakpointSubscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "isMobile",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "loadMoreTimeout",
                    "defaultValue": "-1",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "loadMoreToggle",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "originalResults",
                    "defaultValue": "[]",
                    "type": "ResultEntry[]",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "results",
                    "defaultValue": "[]",
                    "type": "ResultEntry[]",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "selectedFilterIndex",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "showErrorLoadMore",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "viewConfig",
                    "defaultValue": "defaultConfig.resultViewConfig",
                    "type": "ResultViewConfig",
                    "optional": false,
                    "description": "",
                    "line": 57
                }
            ],
            "methodsClass": [
                {
                    "name": "changeResultType",
                    "args": [
                        {
                            "name": "resultType",
                            "type": "ResultViewType"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "jsdoctags": [
                        {
                            "name": "resultType",
                            "type": "ResultViewType",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "didYouMeanClick",
                    "args": [
                        {
                            "name": "didYouMeanValue",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "jsdoctags": [
                        {
                            "name": "didYouMeanValue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitFilterChangedEvent",
                    "args": [
                        {
                            "name": "matTabChangeEvent",
                            "type": "MatTabChangeEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "jsdoctags": [
                        {
                            "name": "matTabChangeEvent",
                            "type": "MatTabChangeEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitResultActionClicked",
                    "args": [
                        {
                            "name": "resultEntryAction",
                            "type": "ResultEntryActionEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "jsdoctags": [
                        {
                            "name": "resultEntryAction",
                            "type": "ResultEntryActionEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSortChange",
                    "args": [
                        {
                            "name": "sortingType",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "jsdoctags": [
                        {
                            "name": "sortingType",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadMore",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65
                },
                {
                    "name": "sortByType",
                    "args": [
                        {
                            "name": "sortingType",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "jsdoctags": [
                        {
                            "name": "sortingType",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  SimpleChanges,\n  EventEmitter,\n} from '@angular/core';\nimport type {\n  NoResultsConfig,\n  ResultEntry,\n  ResultEntryActionEvent,\n  ResultViewConfig,\n  ResultViewType,\n  SearchResultMeta,\n} from '../search-service/search.types';\nimport { BreakpointObserver } from '@angular/cdk/layout';\nimport { map } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\nimport { Breakpoints } from '../breakpoints';\nimport { defaultConfig } from '../default.config';\nimport { MatTabChangeEvent } from '@angular/material/tabs';\nimport type { SearchResultsWrapperText } from '../text.types';\n\n@Component({\n  selector: 'amsui-search-results-wrapper',\n  templateUrl: './search-results-wrapper.component.html',\n  styleUrls: ['./search-results-wrapper.component.scss'],\n})\nexport class SearchResultsWrapperComponent\n  implements OnInit, OnDestroy, OnChanges {\n  @Input() searchResultMeta: SearchResultMeta = defaultConfig.searchResultMeta;\n  @Input() set resultViewConfig(viewConfig: ResultViewConfig) {\n    this.viewConfig = {\n      ...this.viewConfig,\n      ...viewConfig,\n    };\n  }\n  @Input() noResultsConfig: NoResultsConfig = defaultConfig.noResultsConfig;\n  @Input() set searchResults(searchResults: ResultEntry[]) {\n    this.results = [...searchResults];\n    this.originalResults = [...searchResults];\n  }\n  @Input() searchResultsWrapperText?: SearchResultsWrapperText;\n  @Output() didYouMeanEvent = new EventEmitter<string>();\n  @Output() loadMoreEvent = new EventEmitter<void>();\n  @Output() filterChangedEvent = new EventEmitter<string>();\n  @Output() resultActionClicked = new EventEmitter<ResultEntryActionEvent>();\n\n  results: ResultEntry[] = [];\n  isMobile = false;\n  loadMoreToggle = false;\n  showErrorLoadMore = false;\n  selectedFilterIndex = 0;\n  viewConfig: ResultViewConfig = defaultConfig.resultViewConfig;\n  private activeSortingType = '';\n  private breakpointSubscription!: Subscription;\n  private originalResults: ResultEntry[] = [];\n  private loadMoreTimeout = -1;\n\n  constructor(private readonly breakpointObserver: BreakpointObserver) {}\n\n  ngOnInit(): void {\n    this.originalResults = this.results;\n    this.breakpointSubscription = this.breakpointObserver\n      .observe([Breakpoints.Mobile])\n      .pipe(map((result) => result.matches))\n      .subscribe((mobileCheck) => (this.isMobile = mobileCheck));\n  }\n\n  ngOnDestroy(): void {\n    this.breakpointSubscription.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (\n      this.activeSortingType &&\n      changes.searchResultInfo &&\n      changes.searchResultInfo.previousValue.keyword ===\n        changes.searchResultInfo.currentValue.keyword\n    ) {\n      this.sortByType(this.activeSortingType);\n    }\n    if (changes.searchResults) {\n      this.loadMoreToggle = false;\n      this.showErrorLoadMore = false;\n      clearTimeout(this.loadMoreTimeout);\n    }\n  }\n\n  sortByType(sortingType: string): void {\n    if (sortingType === 'title') {\n      this.results = [\n        ...this.results.sort((a, b) =>\n          a.title.toLowerCase() > b.title.toLowerCase() ? 1 : -1\n        ),\n      ];\n    } else if (sortingType === 'relevance') {\n      this.results = [...this.originalResults];\n    }\n  }\n\n  handleSortChange(sortingType: string): void {\n    this.activeSortingType = sortingType;\n    this.sortByType(sortingType);\n  }\n\n  changeResultType(resultType: ResultViewType): void {\n    this.viewConfig.selectedResultViewType = resultType;\n  }\n\n  didYouMeanClick(didYouMeanValue: string): void {\n    this.didYouMeanEvent.emit(didYouMeanValue);\n  }\n\n  loadMore(): void {\n    this.showErrorLoadMore = false;\n    this.loadMoreToggle = true;\n    this.loadMoreEvent.emit();\n    this.loadMoreTimeout = window.setTimeout(() => {\n      if (this.loadMoreToggle) {\n        this.loadMoreToggle = false;\n        this.showErrorLoadMore = true;\n      }\n    }, 10000);\n  }\n\n  emitFilterChangedEvent(matTabChangeEvent: MatTabChangeEvent): void {\n    this.filterChangedEvent.emit(matTabChangeEvent.tab.textLabel);\n  }\n\n  emitResultActionClicked(resultEntryAction: ResultEntryActionEvent): void {\n    this.resultActionClicked.emit(resultEntryAction);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../styles/breakpoints\";\n\nmat-tab-group {\n  margin: 0 50px;\n  .filter-tab-icon {\n    margin-right: 5px;\n  }\n}\n.results-container {\n  padding: 1em;\n  .load-more-container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    margin: 50px auto;\n    text-align: center;\n  }\n}\n\n.search-result-placeholder {\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  color: var(--primary-color);\n  text-align: center;\n  p {\n    margin: 30px 0 0;\n  }\n}\n@media screen and (max-width: $mobile) {\n  .search-result-placeholder p {\n    margin: 20px 50px 0;\n  }\n}\n",
                    "styleUrl": "./search-results-wrapper.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver"
                    }
                ],
                "line": 61,
                "jsdoctags": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "OnChanges"
            ],
            "accessors": {
                "resultViewConfig": {
                    "name": "resultViewConfig",
                    "setSignature": {
                        "name": "resultViewConfig",
                        "type": "void",
                        "args": [
                            {
                                "name": "viewConfig",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 35,
                        "jsdoctags": [
                            {
                                "name": "viewConfig",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "searchResults": {
                    "name": "searchResults",
                    "setSignature": {
                        "name": "searchResults",
                        "type": "void",
                        "args": [
                            {
                                "name": "searchResults",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 42,
                        "jsdoctags": [
                            {
                                "name": "searchResults",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<mat-tab-group\n  [(selectedIndex)]=\"selectedFilterIndex\"\n  (selectedTabChange)=\"emitFilterChangedEvent($event)\"\n  *ngIf=\"viewConfig.filterTabs!.length > 1\"\n>\n  <mat-tab *ngFor=\"let filter of viewConfig.filterTabs!\" [label]=\"filter.name\">\n    <ng-template mat-tab-label>\n      <mat-icon class=\"filter-tab-icon\">{{ filter.icon }}</mat-icon>\n      <span>{{ filter.viewName | translate }}</span>\n    </ng-template>\n  </mat-tab>\n</mat-tab-group>\n\n<div class=\"results-container\" *ngIf=\"results.length > 0\">\n  <amsui-search-result-meta\n    *ngIf=\"results.length > 0 && searchResultMeta.keyword !== ''\"\n    [searchResultMeta]=\"searchResultMeta\"\n    [metaResultViewConfig]=\"viewConfig\"\n    (resultViewTypeChanged)=\"changeResultType($event)\"\n    (sortingChanged)=\"handleSortChange($event)\"\n    (didYouMeanEvent)=\"didYouMeanClick($event)\"\n  ></amsui-search-result-meta>\n  <amsui-results\n    [results]=\"results\"\n    [resultType]=\"isMobile ? 'list' : viewConfig.selectedResultViewType!\"\n    (resultActionClicked)=\"emitResultActionClicked($event)\"\n  ></amsui-results>\n  <div\n    class=\"load-more-container\"\n    *ngIf=\"\n      searchResultMeta.numFound > 20 &&\n      searchResultMeta.numFound > searchResultMeta.numShowed\n    \"\n  >\n    <button\n      mat-raised-button\n      color=\"accent\"\n      (click)=\"loadMore()\"\n      *ngIf=\"!loadMoreToggle\"\n    >\n      {{\n        searchResultsWrapperText?.loadMoreButton\n          ? searchResultsWrapperText.loadMoreButton\n          : (\"searchResultsWrapper.loadMoreButton\" | translate)\n      }}\n    </button>\n    <mat-progress-spinner\n      mode=\"indeterminate\"\n      color=\"primary\"\n      [diameter]=\"36\"\n      *ngIf=\"loadMoreToggle\"\n    ></mat-progress-spinner>\n    <p *ngIf=\"showErrorLoadMore && !loadMoreToggle\">\n      {{\n        searchResultsWrapperText?.problemsLoadMore\n          ? searchResultsWrapperText.problemsLoadMore\n          : (\"searchResultsWrapper.problemsLoadMore\" | translate)\n      }}\n    </p>\n  </div>\n</div>\n\n<amsui-no-results\n  [config]=\"noResultsConfig\"\n  (didYouMeanEvent)=\"didYouMeanClick($event)\"\n  (resultActionClicked)=\"emitResultActionClicked($event)\"\n  *ngIf=\"results.length <= 0 && searchResultMeta.keyword !== ''\"\n></amsui-no-results>\n<div\n  class=\"search-result-placeholder\"\n  *ngIf=\"results.length <= 0 && searchResultMeta.keyword === ''\"\n>\n  <p>\n    {{\n      searchResultsWrapperText?.placeholder\n        ? searchResultsWrapperText.placeholder\n        : (\"searchResultsWrapper.placeholder\" | translate)\n    }}\n  </p>\n</div>\n"
        },
        {
            "name": "SearchResultTextComponent",
            "id": "component-SearchResultTextComponent-4720000f1d870d92223498e3ae618275",
            "file": "projects/amsui/src/lib/search-result-meta/search-result-text/search-result-text.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amsui-search-result-text",
            "styleUrls": [
                "./search-result-text.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search-result-text.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "searchResultMeta",
                    "defaultValue": "defaultConfig.searchResultMeta",
                    "line": 12,
                    "type": "SearchResultMeta"
                },
                {
                    "name": "text",
                    "line": 13,
                    "type": "SearchResultText"
                }
            ],
            "outputsClass": [
                {
                    "name": "didYouMeanEvent",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "didYouMeanClick",
                    "args": [
                        {
                            "name": "didYouMeanValue",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "didYouMeanValue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "roundTo3Decimals",
                    "args": [
                        {
                            "name": "num",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 18,
                    "jsdoctags": [
                        {
                            "name": "num",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport type { SearchResultMeta } from '../../search-service/search.types';\nimport { defaultConfig } from '../../default.config';\nimport type { SearchResultText } from '../../text.types';\n\n@Component({\n  selector: 'amsui-search-result-text',\n  templateUrl: './search-result-text.component.html',\n  styleUrls: ['./search-result-text.component.scss'],\n})\nexport class SearchResultTextComponent {\n  @Input() searchResultMeta: SearchResultMeta = defaultConfig.searchResultMeta;\n  @Input() text?: SearchResultText;\n  @Output() didYouMeanEvent = new EventEmitter<string>();\n\n  constructor() {}\n\n  roundTo3Decimals(num: number): number {\n    return Math.round((num / 1000 + Number.EPSILON) * 1000) / 1000;\n  }\n\n  didYouMeanClick(didYouMeanValue: string): void {\n    this.didYouMeanEvent.emit(didYouMeanValue);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles/breakpoints\";\n\n.search-result-text {\n  line-height: 1.5;\n  .header-text::after {\n    content: \"\\a\";\n    white-space: pre;\n  }\n}\n\n@media screen and (max-width: $mobile) {\n  .search-result-text {\n    margin-right: 15px;\n  }\n}\n",
                    "styleUrl": "./search-result-text.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            },
            "templateData": "<div *ngIf=\"searchResultMeta\" class=\"search-result-text\">\n  <amsui-did-you-mean\n    [value]=\"searchResultMeta.didYouMeanValue || ''\"\n    (didYouMeanEvent)=\"didYouMeanClick($event)\"\n  ></amsui-did-you-mean>\n  <span\n    *ngIf=\"searchResultMeta.keyword !== '' && searchResultMeta.numFound > 0\"\n    [innerHTML]=\"\n      text?.information\n        ? text.information\n        : ('searchResultText.information'\n          | translate\n            : {\n                numFound: searchResultMeta.numFound,\n                numShowed:\n                  searchResultMeta.numShowed > searchResultMeta.numFound\n                    ? searchResultMeta.numFound\n                    : searchResultMeta.numShowed,\n                keyword: searchResultMeta.keyword,\n                timeTaken: searchResultMeta.timeTaken\n                  ? ' (' + roundTo3Decimals(searchResultMeta.timeTaken) + 's)'\n                  : ''\n              })\n    \"\n    class=\"header-text\"\n  >\n  </span>\n  <span\n    class=\"header-text\"\n    *ngIf=\"searchResultMeta.numFound === 0 && searchResultMeta.keyword !== ''\"\n    [innerHTML]=\"\n      text?.notFound\n        ? text.notFound\n        : ('searchResultText.notFound'\n          | translate: { keyword: searchResultMeta.keyword })\n    \"\n  >\n  </span>\n</div>\n"
        },
        {
            "name": "SortingSelectComponent",
            "id": "component-SortingSelectComponent-1cefb9300c1cc1392fab8d153543bc3d",
            "file": "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amsui-sorting-select",
            "styleUrls": [
                "./sorting-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sorting-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "defaultSortOption",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 12
                },
                {
                    "name": "formFieldAppearance",
                    "defaultValue": "'standard'",
                    "line": 14,
                    "type": "MatFormFieldAppearance"
                },
                {
                    "name": "sortingOptions",
                    "line": 20,
                    "type": "[]"
                },
                {
                    "name": "textLabel",
                    "line": 13,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "sortingChanged",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 29,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "activeOption",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "defaultOption",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "type": "SortingOption[]",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "emitSortEvent",
                    "args": [
                        {
                            "name": "sortType",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "sortType",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { SortingOption } from '../../search-service/search.types';\nimport { getDefaultSortingOptionValue } from './sorting-select.utils';\nimport type { MatFormFieldAppearance } from '@angular/material/form-field';\n\n@Component({\n  selector: 'amsui-sorting-select',\n  templateUrl: './sorting-select.component.html',\n  styleUrls: ['./sorting-select.component.scss'],\n})\nexport class SortingSelectComponent {\n  @Input() disabled = false;\n  @Input() textLabel?: string;\n  @Input() formFieldAppearance: MatFormFieldAppearance = 'standard';\n  @Input() set defaultSortOption(defaultSortOption: string) {\n    this.defaultOption = defaultSortOption;\n    this.activeOption = defaultSortOption;\n  }\n  @Input()\n  set sortingOptions(sortingOptions: SortingOption[]) {\n    this.options = sortingOptions;\n    if (this.defaultOption !== '') {\n      this.defaultSortOption = getDefaultSortingOptionValue(sortingOptions);\n    }\n  }\n  get sortingOptions(): SortingOption[] {\n    return this.options;\n  }\n  @Output() sortingChanged = new EventEmitter<string>();\n  defaultOption = '';\n  activeOption = '';\n  private options: SortingOption[] = [];\n\n  constructor() {}\n\n  emitSortEvent(sortType: string): void {\n    this.sortingChanged.emit(sortType);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles/breakpoints\";\n\n:host {\n  width: 100%;\n  margin-top: -5px;\n  .search-result-sort {\n    display: flex;\n    align-items: center;\n    margin-right: 20px;\n    margin-bottom: -20px;\n    width: initial;\n  }\n}\n\n@media screen and (max-width: $mobile) {\n  :host {\n    margin-left: -20px;\n    width: 120%;\n    margin-right: -20px;\n    margin-top: 15px;\n    .search-result-sort {\n      width: 100%;\n      margin: 10px 0 -15px;\n      ::ng-deep .mat-form-field-wrapper {\n        width: 100%;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./sorting-select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 32
            },
            "accessors": {
                "defaultSortOption": {
                    "name": "defaultSortOption",
                    "setSignature": {
                        "name": "defaultSortOption",
                        "type": "void",
                        "args": [
                            {
                                "name": "defaultSortOption",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 15,
                        "jsdoctags": [
                            {
                                "name": "defaultSortOption",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "sortingOptions": {
                    "name": "sortingOptions",
                    "setSignature": {
                        "name": "sortingOptions",
                        "type": "void",
                        "args": [
                            {
                                "name": "sortingOptions",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 20,
                        "jsdoctags": [
                            {
                                "name": "sortingOptions",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "sortingOptions",
                        "type": "[]",
                        "returnType": "SortingOption[]",
                        "line": 26
                    }
                }
            },
            "templateData": "<mat-form-field\n  class=\"search-result-sort\"\n  *ngIf=\"sortingOptions.length > 0\"\n  [appearance]=\"formFieldAppearance\"\n>\n  <mat-label>{{\n    textLabel ? textLabel : (\"sort.label\" | translate)\n  }}</mat-label>\n  <mat-select\n    [value]=\"activeOption\"\n    [disabled]=\"disabled\"\n    (valueChange)=\"emitSortEvent($event)\"\n  >\n    <mat-option\n      *ngFor=\"let sortingOption of sortingOptions\"\n      [value]=\"sortingOption.value\"\n    >\n      {{ sortingOption.viewValue }}\n    </mat-option>\n  </mat-select>\n</mat-form-field>\n"
        }
    ],
    "modules": [
        {
            "name": "AmsuiModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FacetGroupModule"
                        },
                        {
                            "name": "SearchFieldModule"
                        },
                        {
                            "name": "SearchResultsWrapperModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SearchFieldModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DidYouMeanModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DidYouMeanComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DidYouMeanComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FacetGroupModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FacetGroupComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FacetModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FacetGroupComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FacetModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FacetComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FacetComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NoResultsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NoResultsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DidYouMeanModule"
                        },
                        {
                            "name": "ResultsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NoResultsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "OverlayLoaderModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "OverlayLoaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "OverlayLoaderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ResultEntryModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ResultEntryComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ResultEntryComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ResultsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ResultsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ResultEntryModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ResultsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ResultTypeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ResultTypeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ResultTypeComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SearchFieldModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SearchFieldComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SearchFieldComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SearchResultMetaModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SearchResultMetaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DidYouMeanModule"
                        },
                        {
                            "name": "ResultTypeModule"
                        },
                        {
                            "name": "SearchResultTextModule"
                        },
                        {
                            "name": "SortingSelectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SearchResultMetaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SearchResultsWrapperModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SearchResultsWrapperComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "NoResultsModule"
                        },
                        {
                            "name": "ResultsModule"
                        },
                        {
                            "name": "SearchResultMetaModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SearchResultsWrapperComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SearchResultTextModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SearchResultTextComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DidYouMeanModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SearchResultTextComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SortingSelectModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SortingSelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SortingSelectComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TranslationSettingsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "AddConfigs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "AddFilterTabs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "AddSortingAndViewChange",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "AddValue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-result-meta/did-you-mean/did-you-mean.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "AllFeatures",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/no-results/no-results.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "AllFeatures",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-result-meta/search-results-meta.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "AllFeatures",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "AlternativeResults",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/no-results/no-results.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "AutocompleteSuggestions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-field/search-field.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "AvatarIconResult",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "AvatarImageResult",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Breakpoints",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/breakpoints.ts",
                "type": "object",
                "defaultValue": "{\n  // XSmall: '(max-width: 599.98px)',\n  // Small: '(min-width: 600px) and (max-width: 959.98px)',\n  // Medium: '(min-width: 960px) and (max-width: 1279.98px)',\n  // Large: '(min-width: 1280px) and (max-width: 1919.98px)',\n  // XLarge: '(min-width: 1920px)',\n  //\n  // Handset:\n  //   '(max-width: 599.98px) and (orientation: portrait), ' +\n  //   '(max-width: 959.98px) and (orientation: landscape)',\n  // Tablet:\n  //   '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' +\n  //   '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n  // Web:\n  //   '(min-width: 840px) and (orientation: portrait), ' +\n  //   '(min-width: 1280px) and (orientation: landscape)',\n  //\n  // HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',\n  // TabletPortrait:\n  //   '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',\n  // WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n  //\n  // HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',\n  // TabletLandscape:\n  //   '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n  // WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n  Mobile: '(max-width: 599.98px)',\n  Tablet: '(min-width: 600px) and (max-width: 959.98px)',\n  Desktop: '(min-width: 960px)',\n}"
            },
            {
                "name": "ChangeableViewType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-result-meta/search-results-meta.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ChangedFormFieldAppearance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ChangeMaterialAppearance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-field/search-field.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ChangeResultType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/results/results.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ChangeText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/facets/facet-group.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ChangeText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-field/search-field.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ChangeText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/no-results/no-results.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ChangeText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ChangeText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ChangeText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ChangeText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-result-meta/result-type/result-type.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ChangeText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-result-meta/did-you-mean/did-you-mean.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ChangeText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-result-meta/search-result-text/search-result-text.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ChangeText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ChangeTextNotFound",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-result-meta/search-result-text/search-result-text.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Collapsed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ContactInformation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/no-results/no-results.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DeactivateHighlighting",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/results/results.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DeactivateHighlighting",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/overlay-loader/overlay-loader.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-field/search-field.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/results/results.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/no-results/no-results.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-result-meta/search-results-meta.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-result-meta/result-type/result-type.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-result-meta/search-result-text/search-result-text.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "defaultConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/default.config.ts",
                "type": "DefaultConfig",
                "defaultValue": "{\n  highlightingActivated: true,\n  numberOfSuggestions: 6,\n  showMoreWordLimit: 100,\n  searchResultMeta: {\n    numFound: -1,\n    numShowed: -1,\n    keyword: '',\n    timeTaken: -1,\n  },\n  facetOptions: {\n    enableSearch: false,\n    showMoreBehaviour: true,\n    showMoreThreshold: 5,\n    collapsed: false,\n    facetType: 'single',\n    icon: '',\n    hideNumbers: false,\n  },\n  searchFieldConfig: {\n    value: '',\n    addQueryToURLParams: true,\n    disableAutocomplete: false,\n    formFieldAppearance: 'standard',\n  },\n  metaViewConfig: defaultViewConfig,\n  resultViewConfig: {\n    ...defaultViewConfig,\n    filterTabs: [],\n  },\n  noResultsConfig: {\n    alternativeKeywords: [],\n    alternativeResults: [],\n    didYouMeanValue: '',\n    searchKeyword: '',\n  },\n}"
            },
            {
                "name": "defaultViewConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/default.config.ts",
                "type": "MetaResultViewConfig",
                "defaultValue": "{\n  sortingOptions: [],\n  resultViewTypes: ['list', 'grid'],\n  selectedResultViewType: 'list',\n}"
            },
            {
                "name": "DidYouMean",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-result-meta/search-results-meta.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DidYouMeanModuleImports",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-result-meta/did-you-mean/did-you-mean.stories.ts",
                "type": "",
                "defaultValue": "moduleMetadata({\n  declarations: [DidYouMeanComponent],\n  imports: [CommonModule, TranslationSettingsModule, BrowserAnimationsModule],\n})"
            },
            {
                "name": "DidYouMeanValue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-result-meta/search-result-text/search-result-text.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-result-meta/result-type/result-type.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "EnableURLQueryParams",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-field/search-field.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true,\n}"
            },
            {
                "name": "FacetGroupModuleImports",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/facets/facet-group.stories.ts",
                "type": "",
                "defaultValue": "moduleMetadata({\n  declarations: [FacetGroupComponent],\n  imports: [\n    CommonModule,\n    FacetModule,\n    TranslateModule,\n    MatTooltipModule,\n    MatButtonModule,\n    MatIconModule,\n    MatExpansionModule,\n    BrowserAnimationsModule,\n    TranslationSettingsModule,\n  ],\n})"
            },
            {
                "name": "FacetModuleImports",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                "type": "",
                "defaultValue": "moduleMetadata({\n  declarations: [FacetComponent],\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatCardModule,\n    MatIconModule,\n    MatExpansionModule,\n    MatTooltipModule,\n    MatCheckboxModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatBadgeModule,\n    BrowserAnimationsModule,\n    TranslationSettingsModule,\n  ],\n})"
            },
            {
                "name": "Icon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "KeywordHandling",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/no-results/no-results.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MultipleFacets",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/facets/facet-group.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MultiSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "NoResults",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "NoResultsModuleImports",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/no-results/no-results.stories.ts",
                "type": "",
                "defaultValue": "moduleMetadata({\n  declarations: [NoResultsComponent],\n  imports: [\n    CommonModule,\n    ResultsModule,\n    DidYouMeanModule,\n    TranslationSettingsModule,\n    MatButtonModule,\n    MatIconModule,\n  ],\n})"
            },
            {
                "name": "NoShowMore",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "OverlayLoaderModuleImports",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/overlay-loader/overlay-loader.stories.ts",
                "type": "",
                "defaultValue": "moduleMetadata({\n  declarations: [OverlayLoaderComponent],\n  imports: [CommonModule, MatProgressSpinnerModule],\n})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "ResultEntryModuleImports",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                "type": "",
                "defaultValue": "moduleMetadata({\n  declarations: [ResultEntryComponent],\n  imports: [\n    CommonModule,\n    TranslationSettingsModule,\n    MatCardModule,\n    MatIconModule,\n    MatTooltipModule,\n    MatChipsModule,\n    MatButtonModule,\n    BrowserAnimationsModule,\n  ],\n})"
            },
            {
                "name": "ResultsModuleImports",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/results/results.stories.ts",
                "type": "",
                "defaultValue": "moduleMetadata({\n  declarations: [ResultsComponent],\n  imports: [CommonModule, TranslationSettingsModule, ResultEntryModule],\n})"
            },
            {
                "name": "ResultTypeModuleImports",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-result-meta/result-type/result-type.stories.ts",
                "type": "",
                "defaultValue": "moduleMetadata({\n  declarations: [ResultTypeComponent],\n  imports: [\n    CommonModule,\n    MatButtonToggleModule,\n    MatTooltipModule,\n    MatIconModule,\n    TranslationSettingsModule,\n    BrowserAnimationsModule,\n  ],\n})"
            },
            {
                "name": "Search",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SearchFieldModuleImports",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-field/search-field.stories.ts",
                "type": "",
                "defaultValue": "moduleMetadata({\n  declarations: [SearchFieldComponent],\n  imports: [\n    ReactiveFormsModule,\n    MatIconModule,\n    MatAutocompleteModule,\n    MatButtonModule,\n    MatFormFieldModule,\n    CommonModule,\n    MatInputModule,\n    MatProgressSpinnerModule,\n    TranslationSettingsModule,\n    BrowserAnimationsModule,\n  ],\n})"
            },
            {
                "name": "SearchResultMetaModuleImports",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-result-meta/search-results-meta.stories.ts",
                "type": "",
                "defaultValue": "moduleMetadata({\n  declarations: [\n    SearchResultMetaComponent,\n    SearchResultTextComponent,\n    SortingSelectComponent,\n    ResultTypeComponent,\n  ],\n  imports: [\n    CommonModule,\n    MatTooltipModule,\n    MatButtonToggleModule,\n    MatIconModule,\n    MatSelectModule,\n    DidYouMeanModule,\n    BrowserAnimationsModule,\n    TranslationSettingsModule,\n  ],\n})"
            },
            {
                "name": "SearchResultsWrapperModuleImports",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts",
                "type": "",
                "defaultValue": "moduleMetadata({\n  declarations: [SearchResultsWrapperComponent],\n  imports: [\n    CommonModule,\n    MatSelectModule,\n    MatIconModule,\n    MatButtonToggleModule,\n    MatTooltipModule,\n    MatCardModule,\n    MatChipsModule,\n    MatButtonModule,\n    SearchResultMetaModule,\n    NoResultsModule,\n    MatProgressSpinnerModule,\n    ResultsModule,\n    MatTabsModule,\n    BrowserAnimationsModule,\n    TranslationSettingsModule,\n  ],\n})"
            },
            {
                "name": "SearchResultTextModuleImports",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-result-meta/search-result-text/search-result-text.stories.ts",
                "type": "",
                "defaultValue": "moduleMetadata({\n  declarations: [SearchResultTextComponent],\n  imports: [CommonModule, DidYouMeanModule, TranslationSettingsModule],\n})"
            },
            {
                "name": "SelectedType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-result-meta/result-type/result-type.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SetDefaultSortingOption",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SetTextMetaInformation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-result-meta/search-results-meta.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SetValue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-field/search-field.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ShowMoreDescription",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ShowMoreLimit",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ShowMoreThreshold",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SortingOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-result-meta/search-results-meta.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SortingSelectModuleImports",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.stories.ts",
                "type": "",
                "defaultValue": "moduleMetadata({\n  declarations: [SortingSelectComponent],\n  imports: [\n    CommonModule,\n    MatSelectModule,\n    BrowserAnimationsModule,\n    TranslationSettingsModule,\n  ],\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/facets/facet-group.stories.ts",
                "type": "Story<FacetGroupComponent>",
                "defaultValue": "(args: FacetGroupComponent) => ({\n  component: FacetGroupComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/overlay-loader/overlay-loader.stories.ts",
                "type": "Story<OverlayLoaderComponent>",
                "defaultValue": "(\n  args: OverlayLoaderComponent\n) => ({\n  component: OverlayLoaderComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-field/search-field.stories.ts",
                "type": "Story<SearchFieldComponent>",
                "defaultValue": "(args: SearchFieldComponent) => ({\n  component: SearchFieldComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/results/results.stories.ts",
                "type": "Story<ResultsComponent>",
                "defaultValue": "(args: ResultsComponent) => ({\n  component: ResultsComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/no-results/no-results.stories.ts",
                "type": "Story<NoResultsComponent>",
                "defaultValue": "(\n  args: NoResultsComponent\n) => ({\n  component: NoResultsComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts",
                "type": "Story<SearchResultsWrapperComponent>",
                "defaultValue": "(\n  args: SearchResultsWrapperComponent\n) => ({\n  component: SearchResultsWrapperComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-result-meta/search-results-meta.stories.ts",
                "type": "Story<SearchResultMetaComponent>",
                "defaultValue": "(\n  args: SearchResultMetaComponent\n) => ({\n  component: SearchResultMetaComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                "type": "Story<FacetComponent>",
                "defaultValue": "(args: FacetComponent) => ({\n  component: FacetComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                "type": "Story<ResultEntryComponent>",
                "defaultValue": "(args: ResultEntryComponent) => ({\n  component: ResultEntryComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-result-meta/result-type/result-type.stories.ts",
                "type": "Story<ResultTypeComponent>",
                "defaultValue": "(\n  args: ResultTypeComponent\n) => ({\n  component: ResultTypeComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-result-meta/did-you-mean/did-you-mean.stories.ts",
                "type": "Story<DidYouMeanComponent>",
                "defaultValue": "(\n  args: DidYouMeanComponent\n) => ({\n  component: DidYouMeanComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-result-meta/search-result-text/search-result-text.stories.ts",
                "type": "Story<SearchResultTextComponent>",
                "defaultValue": "(\n  args: SearchResultTextComponent\n) => ({\n  component: SearchResultTextComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.stories.ts",
                "type": "Story<SortingSelectComponent>",
                "defaultValue": "(\n  args: SortingSelectComponent\n) => ({\n  component: SortingSelectComponent,\n  props: args,\n})"
            },
            {
                "name": "WithActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WithImage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WithMetaInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WithTags",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [
            {
                "name": "fakeSearchSuggestions",
                "file": "projects/amsui/src/lib/search-field/search-field.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "input"
                    }
                ],
                "returnType": "Observable<string[]>",
                "jsdoctags": [
                    {
                        "name": "input",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getDefaultSortingOptionValue",
                "file": "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "sortingOptions"
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "sortingOptions",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getFacet",
                "file": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "index"
                    }
                ],
                "returnType": "Facet",
                "jsdoctags": [
                    {
                        "name": "index",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getFacets",
                "file": "projects/amsui/src/lib/facets/facet-group.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "Facet[]"
            },
            {
                "name": "getMetaConfig",
                "file": "projects/amsui/src/lib/search-result-meta/search-results-meta.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "index"
                    }
                ],
                "returnType": "literal type",
                "jsdoctags": [
                    {
                        "name": "index",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getNoResultConfig",
                "file": "projects/amsui/src/lib/no-results/no-results.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "index"
                    }
                ],
                "returnType": "NoResultsConfig",
                "jsdoctags": [
                    {
                        "name": "index",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getResultEntry",
                "file": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "index"
                    }
                ],
                "returnType": "ResultEntry",
                "jsdoctags": [
                    {
                        "name": "index",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getResults",
                "file": "projects/amsui/src/lib/results/results.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "ResultEntry[]"
            },
            {
                "name": "getResultTypeConfig",
                "file": "projects/amsui/src/lib/search-result-meta/result-type/result-type.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "index"
                    }
                ],
                "returnType": "any",
                "jsdoctags": [
                    {
                        "name": "index",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getResultViewConfig",
                "file": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "index"
                    }
                ],
                "returnType": "ResultViewConfig",
                "jsdoctags": [
                    {
                        "name": "index",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getSearchKeywordFromURL",
                "file": "projects/amsui/src/lib/search-params.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "searchString"
                    },
                    {
                        "name": "searchQueryParamKey"
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "searchString",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "searchQueryParamKey",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getSearchResultMeta",
                "file": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "index"
                    }
                ],
                "returnType": "SearchResultMeta",
                "jsdoctags": [
                    {
                        "name": "index",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getSearchResultMeta",
                "file": "projects/amsui/src/lib/search-result-meta/search-result-text/search-result-text.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "index"
                    }
                ],
                "returnType": "any",
                "jsdoctags": [
                    {
                        "name": "index",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getSortImportance",
                "file": "projects/amsui/src/lib/facets/facet/facet.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "entry"
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": "entry",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getSortingSelectInputs",
                "file": "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "index"
                    }
                ],
                "returnType": "any",
                "jsdoctags": [
                    {
                        "name": "index",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "handleFacetQueryParam",
                "file": "projects/amsui/src/lib/search-params.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "key"
                    },
                    {
                        "name": "value"
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": "key",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "handleSearchQueryParam",
                "file": "projects/amsui/src/lib/search-params.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "key"
                    },
                    {
                        "name": "value"
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": "key",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "moduleHttpLoaderFactory",
                "file": "src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "http"
                    }
                ],
                "returnType": "ModuleTranslateLoader",
                "jsdoctags": [
                    {
                        "name": "http",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "moduleHttpLoaderFactory",
                "file": "projects/amsui/src/lib/translation-settings.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "http"
                    }
                ],
                "returnType": "ModuleTranslateLoader",
                "jsdoctags": [
                    {
                        "name": "http",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "paramsNotEmpty",
                "file": "projects/amsui/src/lib/search-params.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "params"
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "params",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "paramsToSelectedFacets",
                "file": "projects/amsui/src/lib/search-params.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "params"
                    }
                ],
                "returnType": "SelectedFacet[]",
                "jsdoctags": [
                    {
                        "name": "params",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "resetToQueryParam",
                "file": "projects/amsui/src/lib/search-params.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "key"
                    },
                    {
                        "name": "value"
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": "key",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "FacetType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"single\" | \"multi\"",
                "file": "projects/amsui/src/lib/search-service/search.types.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "Params",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/amsui/src/lib/search-params.util.ts",
                "description": "",
                "kind": 165
            },
            {
                "name": "ResultViewType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"grid\" | \"list\"",
                "file": "projects/amsui/src/lib/search-service/search.types.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts": [
                {
                    "name": "AddConfigs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "AddFilterTabs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "AddSortingAndViewChange",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ChangeText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "NoResults",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SearchResultsWrapperModuleImports",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts",
                    "type": "",
                    "defaultValue": "moduleMetadata({\n  declarations: [SearchResultsWrapperComponent],\n  imports: [\n    CommonModule,\n    MatSelectModule,\n    MatIconModule,\n    MatButtonToggleModule,\n    MatTooltipModule,\n    MatCardModule,\n    MatChipsModule,\n    MatButtonModule,\n    SearchResultMetaModule,\n    NoResultsModule,\n    MatProgressSpinnerModule,\n    ResultsModule,\n    MatTabsModule,\n    BrowserAnimationsModule,\n    TranslationSettingsModule,\n  ],\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts",
                    "type": "Story<SearchResultsWrapperComponent>",
                    "defaultValue": "(\n  args: SearchResultsWrapperComponent\n) => ({\n  component: SearchResultsWrapperComponent,\n  props: args,\n})"
                }
            ],
            "projects/amsui/src/lib/search-result-meta/did-you-mean/did-you-mean.stories.ts": [
                {
                    "name": "AddValue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-result-meta/did-you-mean/did-you-mean.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ChangeText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-result-meta/did-you-mean/did-you-mean.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "DidYouMeanModuleImports",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-result-meta/did-you-mean/did-you-mean.stories.ts",
                    "type": "",
                    "defaultValue": "moduleMetadata({\n  declarations: [DidYouMeanComponent],\n  imports: [CommonModule, TranslationSettingsModule, BrowserAnimationsModule],\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-result-meta/did-you-mean/did-you-mean.stories.ts",
                    "type": "Story<DidYouMeanComponent>",
                    "defaultValue": "(\n  args: DidYouMeanComponent\n) => ({\n  component: DidYouMeanComponent,\n  props: args,\n})"
                }
            ],
            "projects/amsui/src/lib/no-results/no-results.stories.ts": [
                {
                    "name": "AllFeatures",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/no-results/no-results.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "AlternativeResults",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/no-results/no-results.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ChangeText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/no-results/no-results.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ContactInformation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/no-results/no-results.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/no-results/no-results.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "KeywordHandling",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/no-results/no-results.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "NoResultsModuleImports",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/no-results/no-results.stories.ts",
                    "type": "",
                    "defaultValue": "moduleMetadata({\n  declarations: [NoResultsComponent],\n  imports: [\n    CommonModule,\n    ResultsModule,\n    DidYouMeanModule,\n    TranslationSettingsModule,\n    MatButtonModule,\n    MatIconModule,\n  ],\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/no-results/no-results.stories.ts",
                    "type": "Story<NoResultsComponent>",
                    "defaultValue": "(\n  args: NoResultsComponent\n) => ({\n  component: NoResultsComponent,\n  props: args,\n})"
                }
            ],
            "projects/amsui/src/lib/search-result-meta/search-results-meta.stories.ts": [
                {
                    "name": "AllFeatures",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-result-meta/search-results-meta.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ChangeableViewType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-result-meta/search-results-meta.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-result-meta/search-results-meta.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "DidYouMean",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-result-meta/search-results-meta.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SearchResultMetaModuleImports",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-result-meta/search-results-meta.stories.ts",
                    "type": "",
                    "defaultValue": "moduleMetadata({\n  declarations: [\n    SearchResultMetaComponent,\n    SearchResultTextComponent,\n    SortingSelectComponent,\n    ResultTypeComponent,\n  ],\n  imports: [\n    CommonModule,\n    MatTooltipModule,\n    MatButtonToggleModule,\n    MatIconModule,\n    MatSelectModule,\n    DidYouMeanModule,\n    BrowserAnimationsModule,\n    TranslationSettingsModule,\n  ],\n})"
                },
                {
                    "name": "SetTextMetaInformation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-result-meta/search-results-meta.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SortingOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-result-meta/search-results-meta.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-result-meta/search-results-meta.stories.ts",
                    "type": "Story<SearchResultMetaComponent>",
                    "defaultValue": "(\n  args: SearchResultMetaComponent\n) => ({\n  component: SearchResultMetaComponent,\n  props: args,\n})"
                }
            ],
            "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts": [
                {
                    "name": "AllFeatures",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "AvatarIconResult",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "AvatarImageResult",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ChangeText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "DeactivateHighlighting",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ResultEntryModuleImports",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                    "type": "",
                    "defaultValue": "moduleMetadata({\n  declarations: [ResultEntryComponent],\n  imports: [\n    CommonModule,\n    TranslationSettingsModule,\n    MatCardModule,\n    MatIconModule,\n    MatTooltipModule,\n    MatChipsModule,\n    MatButtonModule,\n    BrowserAnimationsModule,\n  ],\n})"
                },
                {
                    "name": "ShowMoreDescription",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ShowMoreLimit",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                    "type": "Story<ResultEntryComponent>",
                    "defaultValue": "(args: ResultEntryComponent) => ({\n  component: ResultEntryComponent,\n  props: args,\n})"
                },
                {
                    "name": "WithActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "WithImage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "WithMetaInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "WithTags",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "projects/amsui/src/lib/search-field/search-field.stories.ts": [
                {
                    "name": "AutocompleteSuggestions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-field/search-field.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ChangeMaterialAppearance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-field/search-field.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ChangeText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-field/search-field.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-field/search-field.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "EnableURLQueryParams",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-field/search-field.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SearchFieldModuleImports",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-field/search-field.stories.ts",
                    "type": "",
                    "defaultValue": "moduleMetadata({\n  declarations: [SearchFieldComponent],\n  imports: [\n    ReactiveFormsModule,\n    MatIconModule,\n    MatAutocompleteModule,\n    MatButtonModule,\n    MatFormFieldModule,\n    CommonModule,\n    MatInputModule,\n    MatProgressSpinnerModule,\n    TranslationSettingsModule,\n    BrowserAnimationsModule,\n  ],\n})"
                },
                {
                    "name": "SetValue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-field/search-field.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-field/search-field.stories.ts",
                    "type": "Story<SearchFieldComponent>",
                    "defaultValue": "(args: SearchFieldComponent) => ({\n  component: SearchFieldComponent,\n  props: args,\n})"
                }
            ],
            "projects/amsui/src/lib/breakpoints.ts": [
                {
                    "name": "Breakpoints",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/breakpoints.ts",
                    "type": "object",
                    "defaultValue": "{\n  // XSmall: '(max-width: 599.98px)',\n  // Small: '(min-width: 600px) and (max-width: 959.98px)',\n  // Medium: '(min-width: 960px) and (max-width: 1279.98px)',\n  // Large: '(min-width: 1280px) and (max-width: 1919.98px)',\n  // XLarge: '(min-width: 1920px)',\n  //\n  // Handset:\n  //   '(max-width: 599.98px) and (orientation: portrait), ' +\n  //   '(max-width: 959.98px) and (orientation: landscape)',\n  // Tablet:\n  //   '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' +\n  //   '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n  // Web:\n  //   '(min-width: 840px) and (orientation: portrait), ' +\n  //   '(min-width: 1280px) and (orientation: landscape)',\n  //\n  // HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',\n  // TabletPortrait:\n  //   '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',\n  // WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n  //\n  // HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',\n  // TabletLandscape:\n  //   '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n  // WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n  Mobile: '(max-width: 599.98px)',\n  Tablet: '(min-width: 600px) and (max-width: 959.98px)',\n  Desktop: '(min-width: 960px)',\n}"
                }
            ],
            "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.stories.ts": [
                {
                    "name": "ChangedFormFieldAppearance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ChangeText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SetDefaultSortingOption",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SortingSelectModuleImports",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.stories.ts",
                    "type": "",
                    "defaultValue": "moduleMetadata({\n  declarations: [SortingSelectComponent],\n  imports: [\n    CommonModule,\n    MatSelectModule,\n    BrowserAnimationsModule,\n    TranslationSettingsModule,\n  ],\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.stories.ts",
                    "type": "Story<SortingSelectComponent>",
                    "defaultValue": "(\n  args: SortingSelectComponent\n) => ({\n  component: SortingSelectComponent,\n  props: args,\n})"
                }
            ],
            "projects/amsui/src/lib/results/results.stories.ts": [
                {
                    "name": "ChangeResultType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/results/results.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "DeactivateHighlighting",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/results/results.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/results/results.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ResultsModuleImports",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/results/results.stories.ts",
                    "type": "",
                    "defaultValue": "moduleMetadata({\n  declarations: [ResultsComponent],\n  imports: [CommonModule, TranslationSettingsModule, ResultEntryModule],\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/results/results.stories.ts",
                    "type": "Story<ResultsComponent>",
                    "defaultValue": "(args: ResultsComponent) => ({\n  component: ResultsComponent,\n  props: args,\n})"
                }
            ],
            "projects/amsui/src/lib/facets/facet-group.stories.ts": [
                {
                    "name": "ChangeText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/facets/facet-group.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FacetGroupModuleImports",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/facets/facet-group.stories.ts",
                    "type": "",
                    "defaultValue": "moduleMetadata({\n  declarations: [FacetGroupComponent],\n  imports: [\n    CommonModule,\n    FacetModule,\n    TranslateModule,\n    MatTooltipModule,\n    MatButtonModule,\n    MatIconModule,\n    MatExpansionModule,\n    BrowserAnimationsModule,\n    TranslationSettingsModule,\n  ],\n})"
                },
                {
                    "name": "MultipleFacets",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/facets/facet-group.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/facets/facet-group.stories.ts",
                    "type": "Story<FacetGroupComponent>",
                    "defaultValue": "(args: FacetGroupComponent) => ({\n  component: FacetGroupComponent,\n  props: args,\n})"
                }
            ],
            "projects/amsui/src/lib/facets/facet/facet.stories.ts": [
                {
                    "name": "ChangeText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Collapsed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FacetModuleImports",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                    "type": "",
                    "defaultValue": "moduleMetadata({\n  declarations: [FacetComponent],\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatCardModule,\n    MatIconModule,\n    MatExpansionModule,\n    MatTooltipModule,\n    MatCheckboxModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatBadgeModule,\n    BrowserAnimationsModule,\n    TranslationSettingsModule,\n  ],\n})"
                },
                {
                    "name": "Icon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "MultiSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "NoShowMore",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Search",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ShowMoreThreshold",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                    "type": "Story<FacetComponent>",
                    "defaultValue": "(args: FacetComponent) => ({\n  component: FacetComponent,\n  props: args,\n})"
                }
            ],
            "projects/amsui/src/lib/search-result-meta/result-type/result-type.stories.ts": [
                {
                    "name": "ChangeText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-result-meta/result-type/result-type.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-result-meta/result-type/result-type.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-result-meta/result-type/result-type.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ResultTypeModuleImports",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-result-meta/result-type/result-type.stories.ts",
                    "type": "",
                    "defaultValue": "moduleMetadata({\n  declarations: [ResultTypeComponent],\n  imports: [\n    CommonModule,\n    MatButtonToggleModule,\n    MatTooltipModule,\n    MatIconModule,\n    TranslationSettingsModule,\n    BrowserAnimationsModule,\n  ],\n})"
                },
                {
                    "name": "SelectedType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-result-meta/result-type/result-type.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-result-meta/result-type/result-type.stories.ts",
                    "type": "Story<ResultTypeComponent>",
                    "defaultValue": "(\n  args: ResultTypeComponent\n) => ({\n  component: ResultTypeComponent,\n  props: args,\n})"
                }
            ],
            "projects/amsui/src/lib/search-result-meta/search-result-text/search-result-text.stories.ts": [
                {
                    "name": "ChangeText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-result-meta/search-result-text/search-result-text.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ChangeTextNotFound",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-result-meta/search-result-text/search-result-text.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-result-meta/search-result-text/search-result-text.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "DidYouMeanValue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-result-meta/search-result-text/search-result-text.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SearchResultTextModuleImports",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-result-meta/search-result-text/search-result-text.stories.ts",
                    "type": "",
                    "defaultValue": "moduleMetadata({\n  declarations: [SearchResultTextComponent],\n  imports: [CommonModule, DidYouMeanModule, TranslationSettingsModule],\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/search-result-meta/search-result-text/search-result-text.stories.ts",
                    "type": "Story<SearchResultTextComponent>",
                    "defaultValue": "(\n  args: SearchResultTextComponent\n) => ({\n  component: SearchResultTextComponent,\n  props: args,\n})"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/amsui/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/amsui/src/lib/overlay-loader/overlay-loader.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/overlay-loader/overlay-loader.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "OverlayLoaderModuleImports",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/overlay-loader/overlay-loader.stories.ts",
                    "type": "",
                    "defaultValue": "moduleMetadata({\n  declarations: [OverlayLoaderComponent],\n  imports: [CommonModule, MatProgressSpinnerModule],\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/overlay-loader/overlay-loader.stories.ts",
                    "type": "Story<OverlayLoaderComponent>",
                    "defaultValue": "(\n  args: OverlayLoaderComponent\n) => ({\n  component: OverlayLoaderComponent,\n  props: args,\n})"
                }
            ],
            "projects/amsui/src/lib/default.config.ts": [
                {
                    "name": "defaultConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/default.config.ts",
                    "type": "DefaultConfig",
                    "defaultValue": "{\n  highlightingActivated: true,\n  numberOfSuggestions: 6,\n  showMoreWordLimit: 100,\n  searchResultMeta: {\n    numFound: -1,\n    numShowed: -1,\n    keyword: '',\n    timeTaken: -1,\n  },\n  facetOptions: {\n    enableSearch: false,\n    showMoreBehaviour: true,\n    showMoreThreshold: 5,\n    collapsed: false,\n    facetType: 'single',\n    icon: '',\n    hideNumbers: false,\n  },\n  searchFieldConfig: {\n    value: '',\n    addQueryToURLParams: true,\n    disableAutocomplete: false,\n    formFieldAppearance: 'standard',\n  },\n  metaViewConfig: defaultViewConfig,\n  resultViewConfig: {\n    ...defaultViewConfig,\n    filterTabs: [],\n  },\n  noResultsConfig: {\n    alternativeKeywords: [],\n    alternativeResults: [],\n    didYouMeanValue: '',\n    searchKeyword: '',\n  },\n}"
                },
                {
                    "name": "defaultViewConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/amsui/src/lib/default.config.ts",
                    "type": "MetaResultViewConfig",
                    "defaultValue": "{\n  sortingOptions: [],\n  resultViewTypes: ['list', 'grid'],\n  selectedResultViewType: 'list',\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n}"
                }
            ]
        },
        "groupedFunctions": {
            "projects/amsui/src/lib/search-field/search-field.stories.ts": [
                {
                    "name": "fakeSearchSuggestions",
                    "file": "projects/amsui/src/lib/search-field/search-field.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "input"
                        }
                    ],
                    "returnType": "Observable<string[]>",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.utils.ts": [
                {
                    "name": "getDefaultSortingOptionValue",
                    "file": "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "sortingOptions"
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "sortingOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/amsui/src/lib/facets/facet/facet.stories.ts": [
                {
                    "name": "getFacet",
                    "file": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "index"
                        }
                    ],
                    "returnType": "Facet",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/amsui/src/lib/facets/facet-group.stories.ts": [
                {
                    "name": "getFacets",
                    "file": "projects/amsui/src/lib/facets/facet-group.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "Facet[]"
                }
            ],
            "projects/amsui/src/lib/search-result-meta/search-results-meta.stories.ts": [
                {
                    "name": "getMetaConfig",
                    "file": "projects/amsui/src/lib/search-result-meta/search-results-meta.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "index"
                        }
                    ],
                    "returnType": "literal type",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/amsui/src/lib/no-results/no-results.stories.ts": [
                {
                    "name": "getNoResultConfig",
                    "file": "projects/amsui/src/lib/no-results/no-results.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "index"
                        }
                    ],
                    "returnType": "NoResultsConfig",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts": [
                {
                    "name": "getResultEntry",
                    "file": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "index"
                        }
                    ],
                    "returnType": "ResultEntry",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/amsui/src/lib/results/results.stories.ts": [
                {
                    "name": "getResults",
                    "file": "projects/amsui/src/lib/results/results.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "ResultEntry[]"
                }
            ],
            "projects/amsui/src/lib/search-result-meta/result-type/result-type.stories.ts": [
                {
                    "name": "getResultTypeConfig",
                    "file": "projects/amsui/src/lib/search-result-meta/result-type/result-type.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "index"
                        }
                    ],
                    "returnType": "any",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts": [
                {
                    "name": "getResultViewConfig",
                    "file": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "index"
                        }
                    ],
                    "returnType": "ResultViewConfig",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSearchResultMeta",
                    "file": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "index"
                        }
                    ],
                    "returnType": "SearchResultMeta",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/amsui/src/lib/search-params.util.ts": [
                {
                    "name": "getSearchKeywordFromURL",
                    "file": "projects/amsui/src/lib/search-params.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "searchString"
                        },
                        {
                            "name": "searchQueryParamKey"
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "searchString",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "searchQueryParamKey",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleFacetQueryParam",
                    "file": "projects/amsui/src/lib/search-params.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "key"
                        },
                        {
                            "name": "value"
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSearchQueryParam",
                    "file": "projects/amsui/src/lib/search-params.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "key"
                        },
                        {
                            "name": "value"
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "paramsNotEmpty",
                    "file": "projects/amsui/src/lib/search-params.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "params"
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "paramsToSelectedFacets",
                    "file": "projects/amsui/src/lib/search-params.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "params"
                        }
                    ],
                    "returnType": "SelectedFacet[]",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetToQueryParam",
                    "file": "projects/amsui/src/lib/search-params.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "key"
                        },
                        {
                            "name": "value"
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/amsui/src/lib/search-result-meta/search-result-text/search-result-text.stories.ts": [
                {
                    "name": "getSearchResultMeta",
                    "file": "projects/amsui/src/lib/search-result-meta/search-result-text/search-result-text.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "index"
                        }
                    ],
                    "returnType": "any",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/amsui/src/lib/facets/facet/facet.component.ts": [
                {
                    "name": "getSortImportance",
                    "file": "projects/amsui/src/lib/facets/facet/facet.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "entry"
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": "entry",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.stories.ts": [
                {
                    "name": "getSortingSelectInputs",
                    "file": "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "index"
                        }
                    ],
                    "returnType": "any",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "moduleHttpLoaderFactory",
                    "file": "src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "http"
                        }
                    ],
                    "returnType": "ModuleTranslateLoader",
                    "jsdoctags": [
                        {
                            "name": "http",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/amsui/src/lib/translation-settings.module.ts": [
                {
                    "name": "moduleHttpLoaderFactory",
                    "file": "projects/amsui/src/lib/translation-settings.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "http"
                        }
                    ],
                    "returnType": "ModuleTranslateLoader",
                    "jsdoctags": [
                        {
                            "name": "http",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/amsui/src/lib/search-service/search.types.ts": [
                {
                    "name": "FacetType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"single\" | \"multi\"",
                    "file": "projects/amsui/src/lib/search-service/search.types.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "ResultViewType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"grid\" | \"list\"",
                    "file": "projects/amsui/src/lib/search-service/search.types.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/amsui/src/lib/search-params.util.ts": [
                {
                    "name": "Params",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/amsui/src/lib/search-params.util.ts",
                    "description": "",
                    "kind": 165
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/breakpoints.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Breakpoints",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/default.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/default.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultViewConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/facets/facet-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FacetGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/facets/facet-group.stories.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getFacets",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/facets/facet-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ChangeText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/facets/facet-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FacetGroupModuleImports",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/facets/facet-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultipleFacets",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/facets/facet-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/facets/facet/facet.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FacetComponent",
                "coveragePercent": 5,
                "coverageCount": "1/20",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/facets/facet/facet.component.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getSortImportance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getFacet",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ChangeText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Collapsed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FacetModuleImports",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Icon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultiSelect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoShowMore",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Search",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ShowMoreThreshold",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/facets/facet/facet.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/no-results/no-results.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NoResultsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/no-results/no-results.stories.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getNoResultConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/no-results/no-results.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllFeatures",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/no-results/no-results.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AlternativeResults",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/no-results/no-results.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ChangeText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/no-results/no-results.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ContactInformation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/no-results/no-results.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/no-results/no-results.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "KeywordHandling",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/no-results/no-results.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoResultsModuleImports",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/no-results/no-results.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/overlay-loader/overlay-loader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OverlayLoaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/overlay-loader/overlay-loader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/overlay-loader/overlay-loader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OverlayLoaderModuleImports",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/overlay-loader/overlay-loader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/results/result-entry/result-entry.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResultEntryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getResultEntry",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllFeatures",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AvatarIconResult",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AvatarImageResult",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ChangeText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DeactivateHighlighting",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ResultEntryModuleImports",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ShowMoreDescription",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ShowMoreLimit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithImage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithMetaInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/results/result-entry/result-entry.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithTags",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/results/results.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResultsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/results/results.stories.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getResults",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/results/results.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ChangeResultType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/results/results.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DeactivateHighlighting",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/results/results.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/results/results.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ResultsModuleImports",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/results/results.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-field/search-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-field/search-field.stories.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "fakeSearchSuggestions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-field/search-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AutocompleteSuggestions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-field/search-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ChangeMaterialAppearance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-field/search-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ChangeText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-field/search-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-field/search-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EnableURLQueryParams",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-field/search-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SearchFieldModuleImports",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-field/search-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SetValue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-field/search-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-params.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getSearchKeywordFromURL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-params.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "handleFacetQueryParam",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-params.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "handleSearchQueryParam",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-params.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "paramsNotEmpty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-params.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "paramsToSelectedFacets",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-params.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "resetToQueryParam",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/did-you-mean/did-you-mean.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DidYouMeanComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/did-you-mean/did-you-mean.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AddValue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/did-you-mean/did-you-mean.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ChangeText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/did-you-mean/did-you-mean.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DidYouMeanModuleImports",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/did-you-mean/did-you-mean.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/result-type/result-type.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResultTypeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/result-type/result-type.stories.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getResultTypeConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/result-type/result-type.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ChangeText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/result-type/result-type.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/result-type/result-type.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/result-type/result-type.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ResultTypeModuleImports",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/result-type/result-type.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SelectedType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/result-type/result-type.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/search-result-meta.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchResultMetaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/search-result-text/search-result-text.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchResultTextComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/search-result-text/search-result-text.stories.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getSearchResultMeta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/search-result-text/search-result-text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ChangeText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/search-result-text/search-result-text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ChangeTextNotFound",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/search-result-text/search-result-text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/search-result-text/search-result-text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DidYouMeanValue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/search-result-text/search-result-text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SearchResultTextModuleImports",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/search-result-text/search-result-text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/search-results-meta.stories.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getMetaConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/search-results-meta.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllFeatures",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/search-results-meta.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ChangeableViewType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/search-results-meta.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/search-results-meta.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DidYouMean",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/search-results-meta.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SearchResultMetaModuleImports",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/search-results-meta.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SetTextMetaInformation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/search-results-meta.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SortingOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/search-results-meta.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SortingSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.stories.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getSortingSelectInputs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ChangedFormFieldAppearance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ChangeText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SetDefaultSortingOption",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SortingSelectModuleImports",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-result-meta/sorting-select/sorting-select.utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getDefaultSortingOptionValue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchResultsWrapperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getResultViewConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getSearchResultMeta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AddConfigs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AddFilterTabs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AddSortingAndViewChange",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ChangeText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoResults",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SearchResultsWrapperModuleImports",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-results-wrapper/search-results-wrapper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-service/search.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SearchService",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-service/search.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DefaultConfig",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-service/search.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Facet",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-service/search.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FacetEntry",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-service/search.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FacetOptions",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-service/search.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FilterTab",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-service/search.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MetaResultViewConfig",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-service/search.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NamedIcon",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-service/search.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NoResultsConfig",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-service/search.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResultEntry",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-service/search.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResultEntryActionEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-service/search.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResultViewConfig",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-service/search.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SearchFieldConfig",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-service/search.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SearchResultMeta",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-service/search.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectedFacet",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-service/search.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SortingOption",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-service/search.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SuggestionParameter",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/search-service/search.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "VisualFacetState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/solr-service/solr.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SolrService",
                "coveragePercent": 0,
                "coverageCount": "0/39",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/solr-service/solr.types.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FacetConfigSolr",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/solr-service/solr.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Highlighting",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/solr-service/solr.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Params",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/solr-service/solr.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Response",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/solr-service/solr.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResponseHeader",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/solr-service/solr.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResultType",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/solr-service/solr.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResultTypeCriteria",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/solr-service/solr.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResultTypeData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/solr-service/solr.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResultTypesConfig",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/solr-service/solr.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SearchResultFacet",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/solr-service/solr.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SearchResultFacetEntry",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/solr-service/solr.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SearchResultFacets",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/solr-service/solr.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SearchResultsSolr",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/text.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FacetGroupText",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/text.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FacetText",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/text.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NoResultsText",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/text.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResultEntryText",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/text.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResultTypeText",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/text.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SearchFieldText",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/text.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SearchResultsWrapperText",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/text.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SearchResultText",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/lib/translation-settings.module.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "moduleHttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/amsui/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "moduleHttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}